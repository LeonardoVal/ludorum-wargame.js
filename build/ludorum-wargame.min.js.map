{"version":3,"sources":["../src/__prologue__.js","../src/armies.js","../src/moves.js","../src/wargame.js","../src/terrain.js","../src/test.js","../src/grim-future.js","../src/dynamicScripting.js","../src/dynamicScriptingSinPesos.js","../src/basicRulePlayer_shoot.js","../src/basicRulePlayer_assault.js","../src/basicRulePlayer_assist.js","../src/basicRulePlayer_scape_then_shoot.js","../src/render.js","../src/strategic.js","../src/astar.js","../src/__epilogue__.js"],"names":["__init__","base","Sermat","ludorum","declare","iterable","Iterable","initialize","raiseIf","obj","exports","__package__","__name__","__dependencies__","__SERMAT__","include","Army","constructor","args","army","this","string","ignore","number","coerce","defaultValue","array","units","forEach","unit","i","id","player","isEnabled","len","length","startRound","filter","actions","game","activeUnit","getActions","map","ActivateAction","isEliminated","isDead","livingUnits","worth","sum","static __SERMAT__","serializer","score","Unit","radius","quality","defense","props","bool","cost","models","m","size","livingModels","model","health","toughness","EndTurnAction","isActive","hasMoved","concat","getMoveActions","getShootActions","maxRange","r","Infinity","equipments","equipment","range","shooter","armies","opponent","target","terrain","canShoot","ShootAction","getAssaultActions","assaulter","AssaultAction","reachablePositions","mapApply","k","v","pos","split","MoveAction","toArray","activate","__activeUnit__","endTurn","move","newPosition","position","suffer","woundCount","modelHealth","wounds","Math","min","influence","hasOwnProperty","Model","shooting","eq","melee","GameAction","aleatories","execute","objects","unimplemented","unitById","unitId","players","j","toString","ser","identifier","run","Array","apply","targetId","distance","attackCount","attacks","ShootAleatory","haps","targetUnit","targetWorth","aleatory","enemyAttackCount","enemyModel","enemyWounds","counterWounds","livingEnemyModels","round","unitPos","targetPos","new_position","combinations","math","rolls","p","n","pow","rerolls","ns","repeat","p2","p3","addRolls","rs1","rs2","len1","len2","Aleatory","shooterQuality","targetDefense","__hitProb__","max","__saveProb__","rs","__distribution__","distribution","value","random","Randomness","DEFAULT","weightedChoice","Wargame","MoralAleatory","__prob__","Game","name","rounds","params","call","activePlayer","object","integer","nextRound","nextTurn","indexOf","activePlayers","scores","toObject","result","player1","player2","zerosumResult","synchronizeMetagame","resetTerrain","moves","next","update","action","Contingent","nextGame","clone","Terrain","SURROUNDINGS","dx","dy","SQRT2","tileSet","passable","visible","line","Uint8Array","__unitsByPosition__","width","height","wargame","unitsByPosition","team","tileAt","tile","isPassable","checkUnits","isVisible","p1","d0","abs","d1","sqrt","pos2","cost2","delta","visited","pending","push","canReachAStarInf","graph","Graph","diagonal","end","start","attacker","grid","astar","search","exitCondition","heuristic","heuristicInfluence","influenceMap","role","canReachAStar","getInf","x","y","pos0","pos1","distanceToTurns","turns","undefinedAsignArray","matrix","undefined","sparseMatrix","distanceVal","key","dual bresenham","point1","point2","e2","sx","sy","curLoc","slice","err","shooterUnit","sight","bresenham","canShootPos","shooterUnitPos","targetUnitPos","shooterUnitId","targetUnitId","areaOfSight","area","BRESENHAM_CACHE","forEachApply","_","path","prototype","InfluenceMap","momentum","decay","iterations","gridRed","gridBlue","getGrid","setGrid","dim","fill","unitsInfluences","it","spread","sign","posX","posY","imap","getMomentumInf","c","decays","di","dj","inf","NaN","exp","oneGrid","test","example0","ARMY","GrimFuture","BattleBrothers","Red","UNITS","BattleBrothers_Unit","Blue","example1","example2","MODELS","BattleBrother","AssaultBrothers_Unit","AssaultBrother","Engineers_Unit","Engineer","SupportBikers_Unit","SupportBiker","NuevoFastAttacks_Unit","NuevoFastAttack","NuevoMelees_Unit","NuevoMelee","exampleAssault","randomGame","RandomPlayer","window","match","Match","events","on","RENDERER","render","console","log","then","randomAbstractedGame","AbstractedWargame","concreteGame","error","randomAbstractedGameDiscrete","time","MonteCarloPlayer","simulationCount","timeCap","timeEnd","testGame","renderSight","conPesosDS_vs_sinPesosDS","DynamicScriptingPlayer","DynamicScriptingSinPesosPlayer","sinPesosDS_vs_conPesosDS","conPesosDS_vs_random","sinPesosDS_vs_random","conPesosDS_vs_random_Abstracted","conPesosDS_vs_BasicRulePlayer_shoot","BasicRulePlayer_shoot","conPesosDS_vs_BasicRulePlayer_assault","BasicRulePlayer_assault","conPesosDS_vs_BasicRulePlayer_assist","BasicRulePlayer_assist","conPesosDS_vs_BasicRulePlayer_scape_then_shoot","BasicRulePlayer_scape_then_shoot","randomAbstractedTest","EQUIPMENTS","LightClaws","CClaws","Pistol","AssaultRifle","HeavyFlamethrower","ap","EnergyFist","LinkedAssaultRifle","HeavyMachinegun","SupportBrother","fearless","SupportBrothers_Unit","faction","static MODELS","static UNITS","playerRule","priority","fun","roundActions_global","Player","__pendingActions__","rules","ownRules","sortRules","roundActions","playerPossibleUnits","playerShootableUnits","playerAssaultableUnits","self","Object","keys","getPrototypeOf","member","f","substr","sort","r1","r2","sortRuleListByWeight","ruleList","firstRules","rule","retRules","decision","possibleUnits","allShootableUnits","allAssaultableUnits","armiesAndUnits","enableds","gameWorth","maxPriority","sumWeight","sumProb","rand","floor","__rule__","l","shift","participate","attachToMatch","state","lastRoundGame","isContingent","adjustWeights","reglasAplicadas","ra","reg","functionToCheck","lastGameWorth","diff","roundAction","worthDiv10","deadModels","playerUnits","unitY","unitX","serializeAsProperties","shoot","assault","moveAction","shootUnitY","scapeAux","enemyUnits","eu","canHide","hideMoves","canRun","runMoves","scape","mostDangerousUnits","scapeMdu","dangerousUnits","scapeDu","moveActions","assistAux","unitX2","canAssault","canBlockSight","blockSightMovements","canShoot_","assist","assistMdu","assistDu","getFewMoveActions","fewMoveActions","getCloseTo","unitZ","interpolatedPos","interpolation","possibleMoves","elem","closest","movePos","pu","shootableUnitsAux","shootableUnits","livingEnemyUnits","shootAction","shooterShootableUnits","enemyShootableUnits","psu","assaultableUnits","assaultAction","assaulterAssaultableUnits","enemyAssaultableUnits","pau","walking","interForX","xmin","xmax","y_xmin","parseInt","interForY","ymin","ymax","x_ymin","pointA","pointB","xa","xb","ya","yb","unitA","unitB","posA","posB","canAssist","du","runningUnit","enemyUnit","hidingUnit","zPos","farest","canScape","mdu","u","canKill","canBeKilled","canKillShooting","canKillAssaulting","bestAttackResultShooting","bestAttackResultAssaulting","bestAttackResult","barShooting","barAssaulting","unitYModelsAlive","shootingKillableUnits","willKillShooting","playerArmy","enemy","enemyArmy","wounded","canWoundALot","canWound","maxCost","mostExpensiveUnit","meu","cheapestUnit","chu","minCost","unitForce","unitIsStrongest","strongest","maxForce","classification","maxRangeInUnits","easiestToKill","easeToKill","expectedResultShooting","diceResult","hits","h","blocks","b","expectedResult","expectedResultAssaulting","willWoundALotShooting","willWoundHalfShooting","willWoundShooting","willKillAssaulting","willWoundALotAssaulting","willWoundHalfAssaulting","willWoundAssaulting","winning","enemyPlayer","losingGameByUnitElimination","winningActivation","toKillUnits","tk","canPin","isMelee","shootRange","shootAttacks","rule_12A","j2","unitY2","rule_12B","rule_12C","rule_12D","rule_11A","rule_11B","rule_11C","rule_11D","rule_10A","rule_10B","rule_9A","rule_9B","rule_8A","rule_8B","rule_8C","rule_7A","rule_7B","rule_7C","rule_7D","rule_7E","rule_7F","rule_6A","rule_6B","rule_6C","rule_5A","rule_5B","rule_5C","rule_5D","rule_5E","rule_5F","rule_5G","rule_4A","rule_4B","rule_4C","rule_4D","rule_4E","rule_3A","rule_3B","rule_3C","rule_3D","rule_3E","rule_3F","rule_3G","rule_3H","rule_3I","rule_3J","rule_3K","rule_3L","rule_3M","rule_3N","rule_3O","rule_3P","rule_3Q","rule_3R","rule_3S","rule_3T","allUnits","rule_2A","rule_2B","rule_2C","rule_2D","rule_2E","rule_2F","rule_2G","rule_2H","rule_2I","rule_2J","rule_2K","rule_2L","rule_2M","rule_2N","rule_2O","rule_2P","rule_2Q","rule_2R","rule_2S","rule_1A","rule_1B","rule_1C","rule_1D","rule_1E","rule_1F","rule_100","rule_1","rule_2","Renderer","canvas","document","getElementById","ctx","getContext","fillStyle","renderScope","block","save","scale","restore","clearRect","drawSquare","renderer","strokeStyle","font","fillText","renderPath","color","alpha","renderMoves","world","WorldWidth","WorldHeight","beginPath","arc","PI","fillRect","renderInfluence","absMax","opacity","w","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","isNaN","StrategicAttackAction","executeMovement","canShootThisTurn","shootPositions","canMoveThisTurn","assaultPositions","movePositions","m1","m2","randomNext","g","attack","strategicPositions","abstractedGame","posibleActions","unshift","shootDistance","canAssaultThisTurn","concreteInfluence","getShots","product","ConcreteRandomPlayer","pathTo","node","curr","parent","getHeap","BinaryHeap","options","cleanDirty","heuristics","manhattan","openHeap","closestNode","markDirty","currentNode","pop","closed","neighbors","il","neighbor","isWall","gScore","getCost","beenVisited","rescoreElement","D2","d2","cleanNode","valueOfNode","check1","nodes","check2","GridNode","init","dirtyNodes","ret","graphString","rowDebug","row","weight","join","fromNeighbor","scoreFunction","content","element","sinkDown","bubbleUp","remove","parentN","elemScore","child1Score","child2N","child1N","swap","child1","child2","type"],"mappings":"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","file":"ludorum-wargame.min.js","sourcesContent":["/** Module wrapper and layout.\r\n*/\r\nfunction __init__(base, Sermat, ludorum) { \"use strict\";\r\n/** Import synonyms */\r\n\tvar declare = base.declare,\r\n\t\titerable = base.iterable,\r\n\t\tIterable = base.Iterable,\r\n\t\tinitialize = base.initialize,\r\n\t\traiseIf = base.raiseIf,\r\n\t\tobj = base.obj;\r\n\r\n/** Library layout. */\r\n\tvar exports = {\r\n\t\t\t__package__: 'ludorum-wargame',\r\n\t\t\t__name__: 'ludorum_wargame',\r\n\t\t\t__init__: __init__,\r\n\t\t\t__dependencies__: [base, Sermat, ludorum],\r\n\t\t\t__SERMAT__: { include: [base] }\r\n\t\t};\r\n\r\n/** See `__epilogue__.js`.\r\n*/\r\n","/** # Armies\n\n*/\n\n/** ## Army ########################################################################################\n\nEl parámetro name refiere a un ejemplo de army, con su tipo y su lista de unidades\n */\nvar Army = exports.Army = declare({\n\tconstructor: function Army(args) {\n\t\tvar army = this;\n\t\tinitialize(this, args)\n\t\t\t.string('player', { ignore: true })\n\t\t\t.number('score', { coerce: true, defaultValue: 0 })\n\t\t\t.array('units');\n\t\tif (this.units) {\n\t\t\tthis.units.forEach(function (unit, i) {\n\t\t\t\tunit.id = army.player +'#'+ i;\n\t\t\t\tunit.army = army;\n\t\t\t});\n\t\t}\n\t},\n\n\t/** The army is enabled if it has at least one enabled unit.\n\t*/\n\tisEnabled: function isEnabled() {\n\t\tfor (var i = 0, len = this.units.length; i < len; i++) {\n\t\t\tif (this.units[i].isEnabled) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t},\n\n\t/** `startRound` enables all living units of the army.\n\t*/\n\tstartRound: function startRound() {\n\t\treturn this.units.filter(function (unit) {\n\t\t\treturn unit.startRound();\n\t\t}).length;\n\t},\n\n\t/** Calculates the available `actions` for this army in the given game state.\n\t*/\n\tactions: function actions(game) {\n\t\tvar activeUnit = game.activeUnit();\n\t\tif (activeUnit) {\n\t\t\treturn activeUnit.getActions(game);\n\t\t} else {\n\t\t\treturn this.units.filter(function (unit) {\n\t\t\t\treturn unit.isEnabled;\n\t\t\t}).map(function (unit) {\n\t\t\t\treturn new ActivateAction(unit.id);\n\t\t\t});\n\t\t}\n\t},\n\n\t/** An army is eliminated if all its units are eliminated.\n\t */\n\tisEliminated: function isEliminated(game) {\n\t\treturn this.units.filter(function (unit) {\n\t\t\treturn !unit.isDead();\n\t\t}).length <= 0;\n\t},\n\n\t/** Returns the list of models that have not been destroyed.\n\t */\n\tlivingUnits: function livingUnits(){\n\t\treturn this.units.filter(function (unit) {\n\t\t\treturn !unit.isDead();\n\t\t});\n\t},\n\n\tworth: function worth() {\n\t\treturn iterable(this.units).map(function (unit) {\n\t\t\treturn unit.worth();\n\t\t}).sum();\n\t},\n\n\t// ### Serialization ###########################################################################\n\n\t'static __SERMAT__': {\n\t\tserializer: function serialize_Army(obj) {\n\t\t\treturn [{ player: obj.player, units: obj.units, score: obj.score }];\n\t\t}\n\t}\n}); // declare Army\n\n/** ## Unit ########################################################################################\n\nUnit tiene variables que pueden cambiar a lo largo del juego type refiere a las caracteristicas no\nvariables de la unidad models es una lista de modelos, salvo que haya un heroe seran todos del mismo\ntipo hero es un modelo con type diferente, incluido en la lista models (puede tener equipments y\nspecials diferentes) position es del tipo [x,y] pinned refiere a si esta aturdida (stunneada) la\nunidad\n */\nvar Unit = exports.Unit = declare({\n\t// Unit properties' defaults.\n\tradius: 0.5,\n\tquality: 3,\n\tdefense: 4,\n\n\tconstructor: function Unit(props) {\n\t\tinitialize(this, props)\n\t\t\t.array('position')\n\t\t\t.array('models')\n\t\t\t.bool('isActive', { ignore: true })\n\t\t\t.bool('hasMoved', { ignore: true })\n\t\t\t.bool('isEnabled', { ignore: true })\n\t\t\t// .bool('isPinned', { ignore: true })\n\t\t;\n\t//\tthis.position = new Float32Array(this.position);\n\t},\n\n\tcost: function cost() {\n\t\treturn iterable(this.models).map(function (m) {\n\t\t\treturn m.cost || 0;\n\t\t}).sum();\n\t},\n\n\tsize: function size() {\n\t\treturn this.models.length;\n\t},\n\n\t/** Returns the list of models that have not been destroyed.\n\t */\n\tlivingModels: function livingModels(){\n\t\treturn this.models.filter(function (model) {\n\t\t\treturn model.health() > 0;\n\t\t});\n\t},\n\n\t/** A unit's `health` is the amount of living models it has.\n\t*/\n\thealth: function health() {\n\t\treturn this.livingModels().length;\n\t},\n\n\tisDead: function isDead() {\n\t\treturn this.health() <= 0;\n\t},\n\n\tworth: function worth() {\n\t\treturn iterable(this.models).map(function (model) {\n\t\t\treturn model.health() / model.toughness * model.cost;\n\t\t}).sum();\n\t},\n\n\t// ## Unit's actions ###########################################################################\n\n\t/** Calculates the unit actions.\n\t*/\n\tgetActions: function getActions(game) {\n\t\tvar actions = [new EndTurnAction(this.id)];\n\t\tif (this.isActive) {\n\t\t\tif (!this.hasMoved) {\n\t\t\t\tactions = actions.concat(this.getMoveActions(game));\n\t\t\t}\n\t\t\tactions = actions.concat(this.getShootActions(game));\n\t\t}\n\t\treturn actions;\n\t},\n\n\tmaxRange: function maxRange() {\n\t\tvar r = -Infinity;\n\t\tthis.livingModels().forEach(function (model) {\n\t\t\tmodel.equipments.forEach(function (equipment) {\n\t\t\t\tif (+equipment.range > r) {\n\t\t\t\t\tr = +equipment.range;\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t\treturn r;\n\t},\n\n\t/**\n\t*/\n\tgetShootActions: function getShootActions(game) {\n\t\tvar enemyUnits = game.armies[game.opponent()].units,\n\t\t\tshooter = this,\n\t\t\tret=enemyUnits.filter(function (target) {\n\t\t\treturn game.terrain.canShoot(shooter, target)!=Infinity;\n\t\t}).map(function (target) {\n\t\t\treturn new ShootAction(shooter.id, target.id);\n\t\t});\n\t\treturn ret;\n\t},\n\n\t/**\n\t*/\n\tgetAssaultActions: function getAssaultActions(game) {\n\t\tvar enemyUnits = game.armies[game.opponent()].units,\n\t\t\tassaulter = this,\n\t\t\tret=enemyUnits.filter(function (target) {\n\t\t\treturn game.terrain.canShoot(assaulter, target)<=12;\n\t\t}).map(function (target) {\n\t\t\treturn new AssaultAction(assaulter.id, target.id);\n\t\t});\n\t\treturn ret;\n\t},\n\n\t/**\n\t*/\n\tgetMoveActions: function getMoveActions(game) {\n\t\tvar unit = this;\n\t\treturn iterable(game.terrain.reachablePositions(unit)).mapApply(function (k, v) {\n\t\t\tvar pos = k.split(',');\n\t\t\treturn new MoveAction(unit.id, [+pos[0], +pos[1]], v > 6);\n\t\t}).toArray();\n\t},\n\t// ### Unit action executions ##################################################################\n\n\t/** At the beginning of its turn, every unit in the army becomes enabled, not activated and not\n\tmoved.\n\t */\n\tstartRound: function startRound() {\n\t\tthis.isActive = false;\n\t\tthis.hasMoved = false;\n\t\tthis.isEnabled = this.health() > 0;\n\t\t// this.isPinned = this.isPinned | false;\n\t\treturn this.isEnabled;\n\t},\n\n\t/** Changes the given `game` state, marking this unit as `ACTIVATED`.\n\t */\n\tactivate: function activate(game) {\n\t\traiseIf(!this.isEnabled, \"Unit \", this.id, \" is not enabled!\");\n\t\traiseIf(this.isActive, \"Unit \", this.id, \" is already active!\");\n\t\traiseIf(this.health() <= 0, \"Unit \", this.id, \" has been eliminated!\");\n\t\t// raiseIf(this.isPinned, \"Unit \", this.id, \" is pinned!\");\n\n\t\tthis.isActive = true;\n\t\tgame.__activeUnit__ = this;\n\t},\n\n\tendTurn: function endTurn(game) {\n\t\tthis.isActive = false;\n\t\tthis.isEnabled = false;\n\t\tif (game.__activeUnit__ === this) {\n\t\t\tgame.__activeUnit__ = null;\n\t\t}\n\t},\n\n\t/**\n\t */\n\tmove: function move(game, newPosition, endTurn) {\n\t\traiseIf(!this.isActive, \"Unit \", this.id, \" is not active!\");\n\t\tthis.position = newPosition;\n\t\tthis.hasMoved = true;\n\t\tif (endTurn) {\n\t\t\tthis.endTurn(game);\n\t\t}\n\t},\n\n\t/**\n\t */\n\tsuffer: function suffer(game, woundCount) {\n\t\tvar models = this.models,\n\t\t\tmodel, modelHealth, i;\n\t\tfor (i = 0; woundCount > 0 && i < models.length; i++) {\n\t\t\tmodel = models[i];\n\t\t\tmodelHealth = model.health();\n\t\t\tif (modelHealth > 0) {\n\t\t\t\tmodel.wounds += Math.min(woundCount, modelHealth);\n\t\t\t\twoundCount -= modelHealth;\n\t\t\t\tif (woundCount <= 0) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tthis.isEnabled = this.isEnabled && !this.isDead();\n\n\t\t//FIXME para pinned: si tenia mas de la mitad de los modelos iniciales, y quedo en menos de la mitad tira MoralAleatory, si falla queda pinned.\n\t\t//si ya estaba pinned entonces muere.\n\t\t//console.log(\"#########################hice pinned\");\n\n\t\treturn this.isEnabled;\n\t},\n\n\t// ### Influence mapping #######################################################################\n\n\tinfluence: function influence(game) {\n\t\t//TODO Rodrigo Gómez\n\t},\n\n\t// ### Serialization ###########################################################################\n\n\t'static __SERMAT__': {\n\t\tserializer: function serialize_Unit(obj) {\n\t\t\tvar args = {\n\t\t\t\tposition: [obj.position[0], obj.position[1]],\n\t\t\t\tmodels: obj.models\n\t\t\t};\n\t\t\t['isActive', 'hasMoved', 'isEnabled'].forEach(function (k) {\n\t\t\t\tif (obj.hasOwnProperty(k)) {\n\t\t\t\t\targs[k] = obj[k];\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn [args];\n\t\t}\n\t}\n}); // declare Unit\n\n/** ## Model #######################################################################################\n\nGeneralmente un modelo con 1 en wounds significa que está eliminado type contendrá las\ncaracterísticas fijas del modelo\n */\nvar Model = exports.Model = declare({\n\t/** The `toughness` of a model is the number of wounds it can suffer before dying.\n\t */\n\ttoughness: 1,\n\tequipments: [],\n\n\tconstructor: function Model(wounds) {\n\t\tthis.wounds = wounds |0;\n\t},\n\n\thealth: function health() {\n\t\treturn this.toughness - this.wounds;\n\t},\n\n\t/** Returns all of the model's equipment that can shoot at the given range (1 by default).\n\t */\n\tshooting: function shooting(range) {\n\t\trange = range || 1;\n\t\treturn equipments.filter(function (eq) {\n\t\t\treturn eq.range >= range;\n\t\t});\n\t},\n\n\t/** Returns all of the model's equipment that can be used in close combat.\n\t */\n\tmelee: function melee() {\n\t\treturn equipments.filter(function (eq) {\n\t\t\treturn eq.range < 1;\n\t\t});\n\t},\n\n\t// ### Serialization ###########################################################################\n\n\t'static __SERMAT__': {\n\t\tserializer: function serialize_Model(obj) {\n\t\t\treturn [obj.wounds];\n\t\t}\n\t}\n}); // declare Model\n","/** ## GameAction ##################################################################################\n\n`GameAction` is the base class of all game actions. The game component delegates action execution on\nthese classes.\n*/\nvar GameAction = exports.GameAction = declare({\n\t/** Game actions have no random variables by default.\n\t*/\n\taleatories: function aleatories(game) {\n\t\treturn null;\n\t},\n\n\texecute: base.objects.unimplemented('GameAction', 'execute(game, haps)'),\n\n\tunitById: function unitById(game, id) {\n\t\tid = id || this.unitId;\n\t\tvar unit = null;\n\t\tfor (var i = 0; !unit && i < game.players.length; i++) {\n\t\t\tvar units = game.armies[game.players[i]].units;\n\t\t\tfor (var j = 0; j < units.length; j++) {\n\t\t\t\tif (units[j].id == id) {\n\t\t\t\t\tunit = units[j];\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\traiseIf(!unit, 'Unit ', id, ' was not found!');\n\t\treturn unit;\n\t},\n\n\t/** The action's `worth` is the value that the action takes after being executed. Zero by default.\n\t*/\n\tworth: function worth() {\n\t\treturn 0;\n\t},\n\n\ttoString: function toString() {\n\t\treturn Sermat.ser(this);\n\t}\n}); // declare GameAction\n\n/** ## ActivateAction ##############################################################################\n*/\nvar ActivateAction = exports.ActivateAction = declare(GameAction, {\n\tconstructor: function ActivateAction(unitId) {\n\t\tthis.unitId = unitId;\n\t},\n\n\texecute: function execute(game) {\n\t\tthis.unitById(game).activate(game);\n\t},\n\n\t'static __SERMAT__': {\n\t\tidentifier: 'ActivateAction',\n\t\tserializer: function serialize_ActivateAction(obj) {\n\t\t\treturn [obj.unitId];\n\t\t}\n\t}\n}); // declare ActivateAction\n\n/** ## EndTurn #####################################################################################\n*/\nvar EndTurnAction = exports.EndTurnAction = declare(GameAction, {\n\tconstructor: function EndTurnAction(unitId) {\n\t\tthis.unitId = unitId;\n\t},\n\n\texecute: function execute(game) {\n\t\tthis.unitById(game).endTurn(game);\n\t},\n\n\t'static __SERMAT__': {\n\t\tidentifier: 'EndTurnAction',\n\t\tserializer: function serialize_ActivateAction(obj) {\n\t\t\treturn [obj.unitId];\n\t\t}\n\t}\n}); // declare EndTurnAction\n\n/** ## MoveAction ##################################################################################\n*/\nvar MoveAction = exports.MoveAction = declare(GameAction, {\n\tconstructor: function MoveAction(unitId, position, run) {\n\t\tthis.unitId = unitId;\n\t\tthis.position = position;\n\t\tthis.run = run;\n\t},\n\n\t/** The execution of a `Move` actions changes the unit's position.\n\t*/\n\texecute: function execute(game) {\n\t\t//TODO Check the unit can really move to the position.\n\t\tthis.unitById(game).move(game, this.position, this.run);\n\t},\n\n\t'static __SERMAT__': {\n\t\tidentifier: 'MoveAction',\n\t\tserializer: function serialize_MoveAction(obj) {\n\t\t\treturn [obj.unitId, Array.apply(Array, obj.position), obj.run];\n\t\t}\n\t}\n}); // declare MoveAction\n\n/** ## ShootAction #################################################################################\n */\nvar ShootAction = exports.ShootAction = declare(GameAction, {\n\tconstructor: function ShootAction(unitId, targetId) {\n\t\tthis.unitId = unitId;\n\t\tthis.targetId = targetId;\n\t},\n\n\taleatories: function aleatories(game) {\n\t\tvar shooter = this.unitById(game),\n\t\t\ttarget = this.unitById(game, this.targetId),\n\t\t\tdistance = game.terrain.distance(shooter.position, target.position),\n\t\t\tattackCount = 0;\n\t\tshooter.models.forEach(function (model) {\n\t\t\tmodel.equipments.forEach(function (equipment) {\n\t\t\t\tif (equipment.range >= distance) {\n\t\t\t\t\tattackCount += equipment.attacks;\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t\tvar aleatory = new ShootAleatory(shooter.quality, target.defense, attackCount);\n\t\treturn { wounds: aleatory };\n\t},\n\n\texecute: function execute(game, haps) {\n\t\tvar wounds = haps.wounds,\n\t\t\ttargetUnit = this.unitById(game, this.targetId);\n\t\tif (wounds > 0) {\n\t\t\tvar targetWorth = targetUnit.worth();\n\t\t\ttargetUnit.suffer(game, wounds);\n\t\t\t// The actions worth depends on the damage achieved.\n\t\t\tthis.worth = targetWorth - targetUnit.worth();\n\t\t}\n\t\tthis.unitById(game, this.unitId).endTurn(game);\n\t},\n\n\t/** Serialization and materialization using Sermat.\n\t*/\n\t'static __SERMAT__': {\n\t\tidentifier: 'ShootAction',\n\t\tserializer: function serialize_ShootAction(obj) {\n\t\t\treturn [obj.unitId, obj.targetId];\n\t\t}\n\t}\n}); // declare ShootAction\n\n\nfunction newPosition(unitPos, targetPos) {\n if (unitPos[0]<targetPos[0]){\n\t return [targetPos[0]-1,targetPos[1]];\n }\n if (unitPos[0]>targetPos[0]){\n\t return [targetPos[0]+1,targetPos[1]];\n }\n if (unitPos[1]<targetPos[1]){\n\t return [targetPos[0],targetPos[1]-1];\n }\n if (unitPos[1]>=targetPos[1]){\n\treturn [targetPos[0],targetPos[1]+1];\n }\n}\n/** ## AssaultAction ###############################################################################\n*/\nvar AssaultAction = exports.AssaultAction = declare(GameAction, {\n\n\tconstructor: function AssaultAction(unitId, targetId) {\n\t\tthis.unitId = unitId;\n\t\tthis.targetId = targetId;\n\t},\n\n\taleatories: function aleatories(game) {\n\t\tvar assaulter = this.unitById(game),\n\t\t\ttarget = this.unitById(game, this.targetId),\n\t\t\tdistance = game.terrain.canShoot(assaulter, target),\n\t\t\tattackCount = 0;\n\t\tif (distance<=12){\n\t\t\tassaulter.models.forEach(function (model) {\n\t\t\t\tmodel.equipments.forEach(function (equipment) {\n\t\t\t\t\t\tattackCount += equipment.attacks;\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\t\tvar defense = target.defense;\n\t\t// if (target.isPinned){\n\t\t// \tdefense = defense - 1;\n\t\t// }\n\t\tvar aleatory = new ShootAleatory(assaulter.quality, defense, attackCount);\n\t\tvar enemyAttackCount = 0;\n\t\ttarget.models.forEach(function (enemyModel) {\n\t\t\tenemyModel.equipments.forEach(function (eq) {\n\t\t\t\t\tenemyAttackCount += eq.attacks;\n\t\t\t});\n\t\t});\n\n\t\t// var pinnedAleatory;\n\t\t// if (enemyAttackCount < attackCount){\n\t\t// \t//FIXME MoralAleatory no ShootAleatory\n\t\t// \tpinnedAleatory = new ShootAleatory(target.quality, 0, 1);\n\t\t// \tconsole.log(pinnedAleatory);\n\t\t// \tif (pinnedAleatory>0){\n\t\t// \t\tconsole.log(\"#########################hice pinned\");\n\t\t// \t   target.isPinned = true;\n\t\t// \t}\n\t\t// }else {\n\t\t// \tif (enemyAttackCount > attackCount){\n\t\t// \t\t//FIXME MoralAleatory no ShootAleatory\n\t\t// \t\tpinnedAleatory = new ShootAleatory(assaulter.quality, 0, 1);\n\t\t// \t\tif (pinnedAleatory>0){\n\t\t// \t\t\tconsole.log(\"#########################estoy pinned\");\n\t\t// \t\t\t assaulter.isPinned = true;\n\t\t// \t\t}\n\t\t// \t}\n\t\t// }\n\n\n\t\tvar enemyAleatory = new ShootAleatory(target.quality, assaulter.defense, enemyAttackCount);\n\t\treturn { wounds: aleatory, enemyWounds: enemyAleatory };\n\t},\n\n\n\n\texecute: function execute(game, haps) {\n\t\tvar wounds = haps.wounds;\n\t\tvar targetUnit = this.unitById(game, this.targetId);\n\t\tvar unit = this.unitById(game, this.unitId);\n\t\tthis.worth = 0;\n\t\t//si hay heridas se las aplica a la unidad enemiga\n\t\tif (wounds > 0) {\n\t\t\ttargetUnit.suffer(game, wounds);\n\t\t}\n\t\t//si murio la unidad enemiga se suma su coste total\n\t\tif (targetUnit.isDead(game)){\n\t\t\tthis.worth += targetUnit.cost();\n\t\t}\n\t\t// se suma el coste de cada herida aplicada en la unidad enemiga\n\t\tthis.worth += targetUnit.cost()*wounds/targetUnit.size();\n\n\t\t//contraataque\n\t\tvar counterWounds = haps.enemyWounds,\n\t\t  livingEnemyModels = targetUnit.livingModels().length;\n\t\tcounterWounds = Math.round(livingEnemyModels * counterWounds / targetUnit.size());\n\t\t//si hay heridas se las aplica a la unidad enemiga\n\t\tif (counterWounds > 0) {\n\t\t\tunit.suffer(game, counterWounds);\n\t\t}\n\t\t//si murio la unidad asaltante se resta su coste total\n\t\tif (unit.isDead(game)){\n\t\t\tthis.worth -= unit.cost();\n\t\t}\n\t\t// se resta el coste de cada herida aplicada en la unidad asaltante\n\t\tthis.worth -= unit.cost()*counterWounds/unit.size();\n\n\t\t//la unidad asaltante se mueve al lado de la enemiga y se termina el turno\n\t\tvar new_position = newPosition(unit.position, targetUnit.position);\n\t\tthis.unitById(game).move(game, new_position, false);\n\t\tthis.unitById(game, this.unitId).endTurn(game);\n\t},\n\n\t/** Serialization and materialization using Sermat.\n\t*/\n\t'static __SERMAT__': {\n\t\tidentifier: 'AssaultAction',\n\t\tserializer: function serialize_AssaultAction(obj) {\n\t\t\treturn [obj.unitId, obj.targetId];\n\t\t}\n\t}\n}); // declare AssaultAction\n\n/** ## Dice rolls ##################################################################################\n\n*/\nvar combinations = base.math.combinations;\n\nvar rolls = exports.rolls = function rolls(p, n) {\n    return n <= 0 ? [1] : Iterable.range(n + 1).map(function (i) {\n        return Math.pow(p, i) * Math.pow(1 - p, n - i) * combinations(n, i);\n    }).toArray();\n};\n\nvar rerolls = exports.rerolls = function rerolls(p, ns) {\n    var r = Iterable.repeat(0, ns.length).toArray();\n    ns.forEach(function (p2, n) {\n        if (n === 0) { // This is only an optimization.\n            r[0] += p2;\n        } else {\n            rolls(p, n).forEach(function (p3, i) {\n                r[i] += p2 * p3;\n            });\n        }\n    });\n    return r;\n};\n\nvar addRolls = exports.addRolls = function addRolls(rs1, rs2) {\n\tvar len1 = rs1.length,\n\t\tlen2 = rs2.length;\n\treturn Iterable.range(len1 + len2 - 1).map(function (i) {\n\t\treturn Iterable.range(i + 1).filter(function (j) {\n\t\t\treturn j < len1 && (i - j) < len2;\n\t\t}, function (j) {\n\t\t\treturn rs1[j] * rs2[i - j];\n\t\t}).sum();\n\t}).toArray();\n};\n\nvar ShootAleatory = exports.ShootAleatory = declare(ludorum.aleatories.Aleatory, {\n\tconstructor: function ShootAleatory(shooterQuality, targetDefense, attackCount) {\n\t\tthis.shooterQuality = shooterQuality |0;\n\t\tthis.targetDefense = targetDefense |0;\n\t\tthis.attackCount = attackCount |0;\n\t\tthis.__hitProb__ = Math.max(0, Math.min(1, (6 - shooterQuality + 1) / 6));\n\t\tthis.__saveProb__ = Math.max(0, Math.min(1, (6 - targetDefense + 1) / 6));\n\t\tvar rs = rerolls(this.__saveProb__, rolls(this.__hitProb__, attackCount));\n\t\tthis.__distribution__ = iterable(rs).map(function (p, v) {\n\t\t\treturn [v, p];\n\t\t}).toArray();\n\t},\n\n\tdistribution: function distribution() {\n\t\treturn iterable(this.__distribution__);\n\t},\n\n\tvalue: function value(random) {\n\t\treturn (random || base.Randomness.DEFAULT).weightedChoice(this.__distribution__);\n\t},\n\n\t'static __SERMAT__': {\n\t\tidentifier: 'ShootAleatory',\n\t\tserializer: function serialize_ShootAleatory(obj) {\n\t\t\treturn [obj.shooterQuality, obj.targetDefense, obj.attackCount];\n\t\t}\n\t}\n});\n\nvar MoralAleatory = exports.MoralAleatory = declare(ludorum.aleatories.Aleatory, {\n\tconstructor: function MoralAleatory(quality) {\n\t\tthis.quality = quality |0;\n\t\tthis.__prob__ = Math.max(0, Math.min(1, (6 - quality + 1) / 6));\n\t\t//FIXME es una única tirada de datos que tiene que superar o igualar la quality\n\t\tvar rs = rerolls(this.__saveProb__, rolls(this.__hitProb__, attackCount));\n\t\tthis.__distribution__ = iterable(rs).map(function (p, v) {\n\t\t\treturn [v, p];\n\t\t}).toArray();\n\t},\n\n\tdistribution: function distribution() {\n\t\treturn iterable(this.__distribution__);\n\t},\n\n\tvalue: function value(random) {\n\t\treturn (random || base.Randomness.DEFAULT).weightedChoice(this.__distribution__);\n\t},\n\n\t'static __SERMAT__': {\n\t\tidentifier: 'MoralAleatory',\n\t\tserializer: function serialize_MoralAleatory(obj) {\n\t\t\treturn [obj.quality];\n\t\t}\n\t}\n});\n","/** # Wargame\n *\n */\nvar Wargame = exports.Wargame = declare(ludorum.Game, {\n\tname: 'Wargame',\n\tplayers: ['Red', 'Blue'],\n\trounds:4,\n\n\t/** ## Constructor and state handling ##########################################################\n\n\tThe constructor takes the following parameters:\n\t*/\n\tconstructor: function Wargame(params) {\n\t\tludorum.Game.call(this, params.activePlayer || this.players[0]);\n\t\tinitialize(this, params)\n\t\t\t/** + `armies`: An object of the form `{player: Army}`.\n\t\t\t*/\n\t\t\t.object('armies')\n\t\t\t/** + `terrain`: The terrain on which the game is being played.\n\t\t\t*/\n\t\t\t.object('terrain')\n\t\t\t/** + `round`: The current round number. A round is completed after all players have\n\t\t\tfinished their turns.\n\t\t\t*/\n\t\t\t.integer('round', { coerce: true, defaultValue: -1 })\n\t\t\t/** + `rounds`: A limit of rounds for the game; 5 by default.\n\t\t\t*/\n\t\t\t.number('rounds', { coerce: true, ignore: true })\n\t\t\t/** + '__activeUnit__': The unit that is being played.\n\t\t\t*/\n\t\t\t.object('__activeUnit__', { ignore: true })\n\t\t;\n\t\tif (this.round < 0) {\n\t\t\tthis.nextRound();\n\t\t} else {\n\t\t\tthis.nextTurn();\n\t\t}\n\t},\n\n\t/** Advance the game to the next (or the first) turn.\n\t*/\n\tnextTurn: function nextTurn() {\n\t\tvar activePlayer = this.activePlayer();\n\t\tif (!this.armies[activePlayer].isEnabled()) {\n\t\t\tvar i = (this.players.indexOf(activePlayer) + 1) % this.players.length;\n\t\t\tthis.activePlayers = [this.players[i]]; //FIXME Use Game.activatePlayer.\n\t\t\tif (!i) {\n\t\t\t\tthis.nextRound();\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t},\n\n\tnextRound: function nextRound() {\n\t\tthis.round++;\n\t\tvar armies = this.armies;\n\t\tfor (var p in armies) {\n\t\t\tarmies[p].startRound();\n\t\t}\n\t\treturn this;\n\t},\n\n\t// ## Game ending and scores ###################################################################\n\n\t/** An array with the minimum and maximum possible results.\n\t */\n\t//resultBounds: [0,750], //TODO Calcular los topes reales.\n\n\t/**\n\t * A medida que se destruye por completo a una unidad enemiga, el score incrementa segun el coste de dicha unidad eliminada.\n\t * Diccionario con claves los jugadores y valor su score. Ejemplo {One: 0, Two: 0};\n\t */\n\tscores: function scores() {\n\t\treturn iterable(this.armies).mapApply(function (name, army) {\n\t\t\treturn [name, army.worth()];\n\t\t}).toObject();\n\t},\n\n\t/**\n\t * returns an object with the game's result if the game is final.\n\t */\n\tresult: function result() {\n\t\tvar player1 = this.players[0],\n\t\t\tplayer2 = this.players[1];\n\t\tif (this.armies[player1].isEliminated(this) ||\n\t\t\t\tthis.armies[player2].isEliminated(this) ||\n\t\t\t\tthis.round >= this.rounds\n\t\t\t) {\n\t\t\tvar scores = this.scores();\n\t\t\treturn this.zerosumResult(scores[player1] - scores[player2], player1);\n\t\t}\n\t\treturn null; // Game continues.\n\t},\n\n\t/** The definitions of the metagame have to be synchronized with the current game state before\n\tany calculation is performed.\n\t*/\n\tsynchronizeMetagame: function synchronizeMetagame() {\n\t\tthis.terrain.resetTerrain(this);\n\t},\n\n\t/** An `activeUnit` is a unit that can take actions in this game state.\n\t*/\n\tactiveUnit: function activeUnit() {\n\t\treturn this.__activeUnit__;\n\t},\n\n\t/** The `moves` method calculates the active player's actions for this game state.\n\t*/\n\tmoves: function moves() {\n\t\tif (!this.result()) { // There are no moves for a finished game.\n\t\t\tthis.synchronizeMetagame();\n\t\t\tvar activePlayer = this.activePlayer();\n\t\t\treturn obj(activePlayer, this.armies[activePlayer].actions(this));\n\t\t}\n\t\treturn null;\n\t},\n\n\t/** Executes the given action on this game state. If the action has aleatories, a contingent\n\tgame state is returned.\n\t*/\n\tnext: function next(actions, haps, update){\n\t\tvar activePlayer = this.activePlayer(),\n\t\t\taction = actions[activePlayer];\n\t\traiseIf(!action, 'Active player ', activePlayer, ' has no actions!');\n\t\tvar aleatories = action.aleatories(this);\n\t\traiseIf(!aleatories && haps, 'Unexpected haps! ', haps);\n\t\tif (aleatories && !haps) {\n\t\t\treturn new ludorum.Contingent(this, actions, aleatories, update);\n\t\t} else {\n\t\t\tvar nextGame = update ? this : this.clone();\n\t\t\taction.execute(nextGame, haps);\n\t\t\treturn nextGame.nextTurn();\n\t\t}\n\t},\n\n\tclone: function clone() {\n\t\tvar args = Sermat.clone({\n\t\t\t\t__activeUnit__: this.__activeUnit__,\n\t\t\t\tarmies: this.armies\n\t\t\t});\n\t\targs.round = this.round;\n\t\targs.rounds = this.rounds;\n\t\targs.terrain = this.terrain;\n\t\treturn new this.constructor(args);\n\t},\n\n\t// ## Serialization ############################################################################\n\n\t'static __SERMAT__': {\n\t\tserializer: function serialize_Wargame(obj) {\n\t\t\tvar args = {\n\t\t\t\t\tactivePlayer: obj.activePlayer(),\n\t\t\t\t\tarmies: obj.armies,\n\t\t\t\t\tterrain: obj.terrain,\n\t\t\t\t\tround: obj.round,\n\t\t\t\t\trounds: obj.rounds\n\t\t\t\t};\n\t\t\tif (obj.__activeUnit__) {\n\t\t\t\targs.__activeUnit__ = obj.__activeUnit__;\n\t\t\t}\n\t\t\treturn [args];\n\t\t}\n\t}\n}); // declare Wargame\n","/** # Terrain\n\n*/\n\n\nvar Terrain = exports.Terrain = declare({\n\tSURROUNDINGS: [\n\t\t{dx:-1, dy:-1, cost: Math.SQRT2},\n\t\t{dx:-1, dy: 0, cost: 1},\n\t\t{dx:-1, dy: 1, cost: Math.SQRT2},\n\t\t{dx: 0, dy:-1, cost: 1},\n\t\t{dx: 0, dy: 1, cost: 1},\n\t\t{dx: 1, dy:-1, cost: Math.SQRT2},\n\t\t{dx: 1, dy: 0, cost: 1},\n\t\t{dx: 1, dy: 1, cost: Math.SQRT2}\n\t],\n\n\t/** The map of the terrain is made of tiles taken from a tileSet. This is the default tile set.\n\t*/\n\ttileSet: [\n\t\t//{ passable: true, visible: true },\n\t\t{ passable: true, visible: true },\n\t\t{ passable: false, visible: false }\n\t],\n\n\tmap: [\n\t\t\"000000000000000000000001000000000000000000000000\",\n\t\t\"000000000000000000000001000000000000000000000000\",\n\t\t\"000000000000000000000001000000000000000000000000\",\n\t\t\"000000000000000000000001000000000000000000000000\",\n\t\t\"000000000000000000000000000000000000000000000000\",\n\t\t\"000000000000000000000000000000000000000000000000\",\n\t\t\"000000000000000000000000000000000000000000000000\",\n\t\t\"000000000000000000000000000000000000000000000000\",\n\t\t\"000000000000000000000000000000000000000000000000\",\n\t\t\"000000000000000000000000000000000000000000000000\",\n\t\t\"000000000000000000000000000000000000000000000000\",\n\t\t\"000000000000000000000000000000000000000000000000\",\n\t\t\"000000000000000000000000000000000000000000000000\",\n\t\t\"000000000000000000000000000000000000000000000000\",\n\t\t\"000000000000000000000000000000000000000000000000\",\n\t\t\"000000000000000000000000000000000000000000000000\",\n\t\t\"000000000000000000000000000000000000000000000000\",\n\t\t\"000000000000000000000000000000000000000000000000\",\n\t\t\"000000000000000000000000000000000000000000000000\",\n\t\t\"000000000000000000000000000000000000000000000000\",\n\t\t\"000000000000000000000000000000000000000000000000\",\n\t\t\"000000000000000000000000000000000000000000000000\",\n\t\t\"000000000000000000000000000000000000000000000000\",\n\t\t\"111100000000000011110000000011110000000000001111\",\n\t\t\"000000000000000000000000000000000000000000000000\",\n\t\t\"000000000000000000000000000000000000000000000000\",\n\t\t\"000000000000000000000000000000000000000000000000\",\n\t\t\"000000000000000000000000000000000000000000000000\",\n\t\t\"000000000000000000000000000000000000000000000000\",\n\t\t\"000000000000000000000000000000000000000000000000\",\n\t\t\"000000000000000000000000000000000000000000000000\",\n\t\t\"000000000000000000000000000000000000000000000000\",\n\t\t\"000000000000000000000000000000000000000000000000\",\n\t\t\"000000000000000000000000000000000000000000000000\",\n\t\t\"000000000000000000000000000000000000000000000000\",\n\t\t\"000000000000000000000000000000000000000000000000\",\n\t\t\"000000000000000000000000000000000000000000000000\",\n\t\t\"000000000000000000000000000000000000000000000000\",\n\t\t\"000000000000000000000000000000000000000000000000\",\n\t\t\"000000000000000000000000000000000000000000000000\",\n\t\t\"000000000000000000000000000000000000000000000000\",\n\t\t\"000000000000000000000000000000000000000000000000\",\n\t\t\"000000000000000000000000000000000000000000000000\",\n\t\t\"000000000000000000000000000000000000000000000000\",\n\t\t\"000000000000000000000001000000000000000000000000\",\n\t\t\"000000000000000000000001000000000000000000000000\",\n\t\t\"000000000000000000000001000000000000000000000000\",\n\t\t\"000000000000000000000001000000000000000000000000\"\n\t].map(function (line) {\n\t\treturn new Uint8Array(line.split(''));\n\t}),\n\n\t__unitsByPosition__: {},\n\n\tconstructor: function Terrain(args) {\n\t\t//TODO initialization\n\t\tthis.width = this.map.length;\n\t\tthis.height = this.map[0].length;\n\t\n\t},\n\n\tresetTerrain: function resetTerrain(wargame){\n\t\tthis.__unitsByPosition__ = this.unitsByPosition(wargame);\n\t},\n\n\tunitsByPosition: function unitsByPosition(wargame){\n\t\tvar armies = wargame.armies,\n\t\t\tresult = {};\n\t\tfor (var team in armies) {\n\t\t\tarmies[team].units.forEach(function (unit) {\n\t\t\t\tif (!unit.isDead()){\n\t\t          \tresult[unit.position] = unit;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\treturn result;\n\t},\n\n\ttileAt: function tileAt(position) {\n\t\tvar tile = this.map[position[0]] && this.map[position[0]][position[1]];\n\t\treturn this.tileSet[tile];\n\t},\n\n\tisPassable: function isPassable(position, checkUnits) {\n\t\tvar tile = this.tileAt(position);\n\t\treturn !!(tile && tile.passable &&\n\t\t\t(!checkUnits || !this.__unitsByPosition__.hasOwnProperty(position)));\n\t},\n\n\tisVisible: function isVisible(position, checkUnits) {\n\t\tvar tile = this.tileAt(position);\n\t\treturn !!(tile && tile.visible &&\n\t\t\t(!checkUnits || !this.__unitsByPosition__.hasOwnProperty(position)));\n\t},\n\n\tdistance: function distance(p1, p2) {\n\t\tvar d0 = Math.abs(p1[0] - p2[0]),\n\t\t\td1 = Math.abs(p1[1] - p2[1]);\n\t\treturn Math.sqrt(d0 * d0 + d1 * d1);\n\t},\n\n\t// ## Movement ################################################################################\n\n\t/** Returns all reachable positions of the given unit.\n\t*/\n\treachablePositions: function reachablePositions(unit, range) {\n\n\t\trange = range || 12;\n\t\tvar visited = {},\n\t\t\tpending = [unit.position],\n\t\t\twidth = this.width,\n\t\t\theight = this.height,\n\t\t\tSURROUNDINGS = this.SURROUNDINGS,\n            \tpos, pos2, cost, cost2, delta, tile;\n\t\tvisited[unit.position] = 0;\n\n\t\tfor (var i = 0; i < pending.length; i++) {\n\t\t\tpos = pending[i];\n\t\t\tcost = visited[pos];\n\t\t\tfor (var j = 0; j < SURROUNDINGS.length; j++) {\n\t\t\t\tdelta = SURROUNDINGS[j];\n\t\t\t\tcost2 = cost + delta.cost;\n\t\t\t\tif (cost2 > range) continue;\n\t\t\t\tpos2 = [pos[0] + delta.dx, pos[1] + delta.dy];\n\t\t\t\tif (visited.hasOwnProperty(pos2) || !this.isPassable(pos2, true)) continue;\n\t\t\t\tvisited[pos2] = cost2;\n\t\t\t\tpending.push(pos2);\n\t\t\t}\n\t\t}\n\n\t\treturn visited;\n\t},\n\tcanReachAStarInf: function canReachAStarInf(args){\n\t\tvar graph = new Graph(this, {diagonal:true,end:args.target.position,start:args.attacker.position}),\n\t\t\tend = graph.grid[args.target.position[0]][args.target.position[1]],\n\t\t\tstart = graph.grid[args.attacker.position[0]][args.attacker.position[1]],\n\t\t\tresult=graph.astar.search(graph, start, end,{exitCondition:args.exitCondition,heuristic:this.heuristicInfluence,influenceMap:args.influenceMap,role:args.role});\n\n\t\treturn result;\n\n\t},\n\tcanReachAStar: function canReachAStar(args){\n\t\tvar graph = new Graph(this, {diagonal:true}),\n\t\t\tend = graph.grid[args.target.position[0]][args.target.position[1]],\n\t\t\tstart = graph.grid[args.attacker.position[0]][args.attacker.position[1]],\n\t\t\tresult =graph.astar.search(graph, start, end,{exitCondition:args.exitCondition});\n\n\t\treturn result;\n\n\t},\n\tgetInf:function getInf(pos,role,grid){\n\t\tvar x=pos[0],\n\t\t\ty=pos[1];\n\t\tif (role==\"Red\")\n\t\t\treturn grid[x][y];\n\t\treturn -grid[x][y];\n\n\t},\n\theuristicInfluence: function heuristicInfluence(pos0, pos1,grid,role){\n\t\tvar d1 = Math.abs(pos1.x - pos0.x),\n\t\t\td2 = Math.abs(pos1.y - pos0.y),\n\t\t\tinf= role==\"Red\" ? grid[pos0.x][pos0.y]: -grid[pos0.x][pos0.y];\n\t\treturn d1 + d2+inf*60;\n\t\t\n\t},\n\tdistanceToTurns:function distanceToTurns(distance){\n\t\tvar turns =0;\n\t\tif (distance<=6){\n\t\t\treturn turns;\n\t\t}\n\t\treturn turns =distance % 12===0 ?distance / 12:( distance/12)+1;\n\t},\n\tundefinedAsignArray: function undefinedAsign(matrix,position) {\n\t\tmatrix[position]=matrix[position]!==undefined ? matrix[position] : [];\n\t},\n\tsparseMatrix:function sparseMatrix(matrix,distanceVal,pos,object){\n\t\tif (object.value!=undefined){\n\t\tmatrix[pos[0]]=matrix[pos[0]]!==undefined ? matrix[pos[0]] : [];\n\t\tmatrix[pos[0]][[pos[1]]]=matrix[pos[0]][[pos[1]]]!==undefined  ? matrix[pos[0]][[pos[1]]] : {};\n\t\tmatrix[pos[0]][[pos[1]]][object.key]=object.value;\n\t\t}\n\t},\n\n\t// ## Visibility ##############################################################################\n\n\t'dual bresenham': function bresenham(point1, point2, maxRange){\n\t\tmaxRange = maxRange || Infinity;\n\t\tvar result = [],\n\t\t\tdx = Math.abs(point2[0] - point1[0]),\n\t\t\tdy = Math.abs(point2[1] - point1[1]),\n\t\t\tsx = (point1[0] < point2[0]) ? 1 : -1,\n\t\t\tsy = (point1[1] < point2[1]) ? 1 : -1,\n\t\t\tcurLoc = point1.slice(),\n\t\t\terr = dx - dy,\n\t\t\te2;\n\t\twhile (maxRange--){\n\t\t\tresult.push(curLoc.slice());\n\t\t\tif (curLoc[0] === point2[0] && curLoc[1] === point2[1]) break;\n\t\t\te2 = err * 2;\n\t\t\tif (e2 > -dy) {\n\t\t\t\terr -= dy;\n\t\t\t\tcurLoc[0] += sx;\n\t\t\t}\n\t\t\tif (e2 < dx) {\n\t\t\t\terr += dx;\n\t\t\t\tcurLoc[1] += sy;\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t},\n\n\tcanShoot:function canShoot(shooterUnit, targetUnit){\n\t\tif (shooterUnit.army === targetUnit.army) {\n\t\t\treturn Infinity;\n\t\t}\n\t\tvar distance = this.distance(shooterUnit.position, targetUnit.position);\n\t\tif (distance > shooterUnit.maxRange()) {\n\t\t\treturn Infinity;\n\t\t} else {\n\t\t\tvar sight = this.bresenham(shooterUnit.position, targetUnit.position, distance),\n\t\t\t\tpos;\n\t\t\tfor (var i = 0; i < sight.length; i++) {\n\t\t\t\tpos = sight[i];\n\t\t\t\tif (!this.isVisible(pos) || this.__unitsByPosition__[pos] &&\n\t\t\t\t\t\tthis.__unitsByPosition__[pos].id !== shooterUnit.id &&\n\t\t\t\t\t\tthis.__unitsByPosition__[pos].id !== targetUnit.id) {\n\t\t\t\t\treturn Infinity;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn distance;\n\t\t}\n\t},\n\tcanShootPos:function canShootPos(shooterUnitPos, targetUnitPos,shooterUnitId,targetUnitId,maxRange){\n\t\n\t\tvar distance = this.distance(shooterUnitPos,targetUnitPos);\n\t\tif (distance > maxRange) {\n\t\t\treturn Infinity;\n\t\t} else {\n\t\t\tvar sight = this.bresenham(shooterUnitPos, targetUnitPos, distance),\n\t\t\t\tpos;\n\t\t\tfor (var i = 0; i < sight.length; i++) {\n\t\t\t\tpos = sight[i];\n\t\t\t\tif (!this.isVisible(pos) || this.__unitsByPosition__[pos] &&\n\t\t\t\t\t\tthis.__unitsByPosition__[pos].id !== shooterUnitId &&\n\t\t\t\t\t\tthis.__unitsByPosition__[pos].id !== targetUnitId) {\n\t\t\t\t\treturn Infinity;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn distance;\n\t\t}\n\t},\n\n\t\n\n\tareaOfSight: function areaOfSight(unit, radius) {\n\t\tradius = radius || Infinity;\n\t\tvar pos = unit.position,\n\t\t\tterrain = this,\n\t\t\tarea = {};\n\t\titerable(this.BRESENHAM_CACHE).forEachApply(function (_, path) {\n\t\t\tvar pos2;\n\t\t\tfor (var i = 1; i < path.length && i <= radius; i++) {\n\t\t\t\tpos2 = path[i];\n\t\t\t\tpos2 = [pos[0] + pos2[0], pos[1] + pos2[1]];\n\t\t\t\tif (!terrain.isVisible(pos2)) break;\n\t\t\t\tarea[pos2] = i;\n\t\t\t\tif (terrain.__unitsByPosition__[pos2]) break;\n\t\t\t}\n\t\t});\n\t\treturn area;\n\t},\n\n\t// ## Utilities ###############################################################################\n\n\t'static __SERMAT__': {\n\t\tserializer: function serialize_Terrain(obj) {\n\t\t\treturn [];\n\t\t}\n\t}\n}); // declare Terrain\n\nTerrain.BRESENHAM_CACHE = Terrain.prototype.BRESENHAM_CACHE = (function (radius) {\n\tvar pointCache = {},\n\t\tresult = { radius: radius };\n\n\tfunction cachePath(path) {\n\t\treturn path.map(function (point) {\n\t\t\treturn pointCache[point] || (pointCache[point] = point);\n\t\t});\n\t}\n\n\tfor (var i = -radius; i <= radius; i++) {\n\t\tresult[[i, -radius]] = Terrain.bresenham([0, 0], [i, -radius]);\n\t\tresult[[i, +radius]] = Terrain.bresenham([0, 0], [i, +radius]);\n\t\tif (i !== -radius && i !== radius) {\n\t\t\tresult[[-radius, i]] = Terrain.bresenham([0, 0], [-radius, i]);\n\t\t\tresult[[+radius, i]] = Terrain.bresenham([0, 0], [+radius, i]);\n\t\t}\n\t}\n\treturn result;\n})(50);\n\n//var inf= new LW.InfluenceMap(game2,\"Red\")\n\nvar InfluenceMap = exports.InfluenceMap = declare({\n\tmomentum: 0.7,\n\tdecay: 0.5,\n\titerations: 2,\n\n\tconstructor: function InfluenceMap(args){\n\t\tthis.role=args.activePlayers[0];\n\t\tthis.width= args.terrain.width;\n\t\tthis.height= args.terrain.height;\n\t\tthis.gridRed= this.gridRed ||  this.matrix(this.width);\n\t\tthis.gridBlue= this.gridBlue ||  this.matrix(this.width);\n\t\tthis.terrain= args.terrain;\n\t\t\n\t\t//this.role = role;\n\t\t\n\t},\n\tgetGrid:function getGrid(){\n\t\tif (this.role==\"Red\")\n\t\t\treturn this.gridRed;\n\t\treturn this.gridBlue;\n\n\t},\n\tsetGrid:function getGrid(grid){\n\t\tif (this.role==\"Red\")\n\t\t\t this.gridRed=grid;\n\t\tthis.gridBlue=grid;\n\n\t},\n\tmatrix:function matrix(dim){\n\t\treturn  Array(dim).fill(0).map(function(v) {return   Array(dim).fill(0).map(function(v){return 0;});});\n\t},\n\tupdate: function update(game,iterations) {\n\t\tvar influenceMap = this,\n\t\t\tgrid = this.getGrid(),\n\t\t\tpos;\n\t\tthis.role = game.activePlayer();\n\t\tthis.unitsInfluences(game);\n\t\tfor (var i = 0; i < it; i++) {\n\t\t\tgrid=this.spread(grid);\n\t\t}\n\t\tthis.setGrid(grid);\n\t\treturn grid;\n\t},\n\tunitsInfluences: function unitsInfluences(game) {\n\t\tvar imap = this,\n\t\t\tsign,\n\t\t\tgrid = this.getGrid(),\n\t\t\tposX,\n\t\t\tposY;\n\t\tfor (var army in game.armies){\n\t\t\tsign = \"Red\" ===army ? +1 : -1;\n\t\t\tgame.armies[army].units.forEach(function (unit){\n\t\t\t\tif (!unit.isDead()) {\n\t\t\t\t\tposX = unit.position[0] |0;\n\t\t\t\t\tposY = unit.position[1] |0;\n\t\t\t\t\tif (!grid[posX]) {\n\t\t\t\t\t\tgrid[posX]=[];\n\t\t\t\t\t\tgrid[posX][posY]=0;\n\t\t\t\t\t}else if (!grid[posX][posY]){\n\t\t\t\t\t\tgrid[posX][posY]= 0;\n\t\t\t\t\t}\n\t\t\t\t\tgrid[posX][posY] = imap.influence(unit) * sign;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t},\n\n\tinfluence: function influence(unit) {\n\t\treturn unit.worth()*1000; //FIXME Too simple?\n\t},\n\tgetMomentumInf: function getMomentumInf(grid,r,c,decays){\n\t\tvar v,\n\t\t\tdi,dj,inf=0,absInf,absV;\n\t\tfor ( di = -1; di < 2; di++) {\n\t\t\tfor (dj = -1; dj < 2; dj++) {\n\t\t\t\tif ((di !== 0 || dj !== 0) && grid[r+di] && (v = grid[r+di][c+dj])) {\n\t\t\t\t\tv *= decays[di*di+dj*dj];\n\t\t\t\t\tabsInf =inf<0 ? -inf: inf;\n\t\t\t\t\tabsV   =v<0 ?   -v  : v;\n\t\t\t\t\t//\tif (Math.abs(inf) < Math.abs(v)) {\n\t\t\t\t\tif (absInf < absV) {\n\t\t\t\t\t\tinf = v;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn inf;\n\t},\n\n\tspread: function spread(grid) {\n\t//\tvar start=Date.now();\n\t\tvar decay = this.decay,\n\t\t\tdecays = [NaN, Math.exp(-1 * decay), Math.exp(-Math.SQRT2 * decay)],\n\t\t\tmomentum = this.momentum,\n\t\t\toneGrid=[],\n\t\t\tvalue,\n\t\t\tinf,\n\t\t\tterrain=this.terrain;\n\n\t\tfor (var r= 0; r <grid.length; r++) {\n\t\t\tfor (var c = 0; c < grid[r].length;c++) {\n\t\t\t\tvalue=grid[r][c];\n\t\t\t\tif (terrain.map[r][c]===1){\n\t\t\t\t\toneGrid[r]= !oneGrid[r] ? []: oneGrid[r];\n\t\t\t\t\toneGrid[r][c] =  \"t\";\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tinf = this.getMomentumInf(grid,r,c,decays);\n\t\t\t\t\toneGrid[r]= !oneGrid[r] ? []: oneGrid[r];\n\t\t\t\t\toneGrid[r][c] =  value * (1 - momentum) + inf * momentum;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn oneGrid;\n\n\t},\n\tserializer: function serialize_InfluenceMap(obj) {\n\t\tvar args = {\n\t\t\tgridRed:obj.gridRed,\n\t\t\tgridBlue:obj.gridBlue\n\t\t};\n\t\treturn [args];\n\t}\n\n\n}); // declare InfluenceMap\n","exports.test = {\n\t/** Simple test game. 01\n  */\n    example0: function example0() {\n      var terrain = new Terrain(),\n        ARMY = GrimFuture.BattleBrothers,\n        game = new Wargame({\n          terrain: terrain,\n          armies: {\n            Red: new GrimFuture.BattleBrothers({ player: 'Red',\n            //,[3,20],[4,15],[10,2]\n              units: [[3,10]].map(function (position) {\n                return new ARMY.UNITS.BattleBrothers_Unit({ position: position });\n              })\n            }),\n            Blue: new GrimFuture.BattleBrothers({ player: 'Blue',\n              units: [[40,10],[40,20],[40,15],[40,2]].map(function (position) {\n                return new ARMY.UNITS.BattleBrothers_Unit({ position: position });\n              })\n            })\n          }\n        });\n            return game;\n    },\n\n    example1: function example1() {\n\t/*\tvar terrain = new Terrain([\n\n        { type: p2.Shape.BOX, x:20,y:20, width:4, height:50}\n      ]),*/\n         var terrain = new Terrain(),\n\t\t\tARMY = GrimFuture.BattleBrothers,\n\t\t\tgame = new Wargame({\n\t\t\t\tterrain: terrain,\n\t\t\t\tarmies: {\n\t\t\t\t\tRed: new GrimFuture.BattleBrothers({ player: 'Red',\n            units: [[3,10],[3,20],[3,15],[3,2]].map(function (position) {\n\t\t\t\t\t\t\treturn new ARMY.UNITS.BattleBrothers_Unit({ position: position });\n\t\t\t\t\t\t})\n\t\t\t\t\t}),\n\t\t\t\t\tBlue: new GrimFuture.BattleBrothers({ player: 'Blue',\n\t\t\t\t\t\tunits: [[40,10],[40,20],[40,15],[40,2]].map(function (position) {\n\t\t\t\t\t\t\treturn new ARMY.UNITS.BattleBrothers_Unit({ position: position });\n\t\t\t\t\t\t})\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t});\n         return game;\n  },\n  example2: function example2() {\n    /*\n        */\n      var terrain = new Terrain(),\n        ARMY = GrimFuture.BattleBrothers,\n        game = new Wargame({\n          terrain: terrain,\n          armies: {\n            Red: new GrimFuture.BattleBrothers({ player: 'Red',\n              units: [new ARMY.UNITS.BattleBrothers_Unit({ position: [12,4], models:\n                Array.apply(null, {length: 5}).map(function(){ return new ARMY.MODELS.BattleBrother();})}),\n                    new ARMY.UNITS.AssaultBrothers_Unit({ position: [12,6], models:\n                Array.apply(null, {length: 5}).map(function(){ return new ARMY.MODELS.AssaultBrother();})}),\n                    new ARMY.UNITS.Engineers_Unit({ position: [12,8], models: [new ARMY.MODELS.Engineer()]}),\n                    new ARMY.UNITS.SupportBikers_Unit({ position: [2,7], models: [new ARMY.MODELS.SupportBiker()]}),\n                    new ARMY.UNITS.NuevoFastAttacks_Unit({ position: [12,10], models:\n                Array.apply(null, {length: 5}).map(function(){ return new ARMY.MODELS.NuevoFastAttack();})}),\n                    new ARMY.UNITS.NuevoMelees_Unit({ position: [12,12], models:\n                Array.apply(null, {length: 3}).map(function(){ return new ARMY.MODELS.NuevoMelee();})})\n              ]\n            }),\n            Blue: new GrimFuture.BattleBrothers({ player: 'Blue',\n              units: [new ARMY.UNITS.BattleBrothers_Unit({ position: [36,4], models:\n                Array.apply(null, {length: 5}).map(function(){ return new ARMY.MODELS.BattleBrother();})}),\n                    new ARMY.UNITS.AssaultBrothers_Unit({ position: [36,6], models:\n                Array.apply(null, {length: 5}).map(function(){ return new ARMY.MODELS.AssaultBrother();})}),\n                    new ARMY.UNITS.Engineers_Unit({ position: [36,8], models: [new ARMY.MODELS.Engineer()]}),\n                    new ARMY.UNITS.SupportBikers_Unit({ position: [46,7], models: [new ARMY.MODELS.SupportBiker()]}),\n                    new ARMY.UNITS.NuevoFastAttacks_Unit({ position: [36,10], models:\n                Array.apply(null, {length: 5}).map(function(){ return new ARMY.MODELS.NuevoFastAttack();})}),\n                    new ARMY.UNITS.NuevoMelees_Unit({ position: [36,12], models:\n                Array.apply(null, {length: 3}).map(function(){ return new ARMY.MODELS.NuevoMelee();})})\n              ]\n            })\n          }\n        });\n        return game;\n    },\n\n  exampleAssault: function exampleAssault() {\n    var terrain = new Terrain(),\n    ARMY = GrimFuture.BattleBrothers,\n    game = new Wargame({\n      terrain: terrain,\n      armies: {\n        Red: new GrimFuture.BattleBrothers({ player: 'Red',\n          units: [[3,10],[3,20],[4,15],[3,2]].map(function (position) {\n            return new ARMY.UNITS.BattleBrothers_Unit({ position: position });\n          })\n        }),\n        Blue: new GrimFuture.BattleBrothers({ player: 'Blue',\n          units: [[4,10],[4,20],[5,15],[4,2]].map(function (position) {\n            return new ARMY.UNITS.BattleBrothers_Unit({ position: position });\n          })\n        })\n      }\n    });\n       return game;\n},\n\n\trandomGame: function randomGame() { //FIXME window\n\t\tvar RandomPlayer = ludorum.players.RandomPlayer,\n\t\t\tplayers = [new RandomPlayer(), new RandomPlayer()];\n\t\twindow.match = new ludorum.Match(this.example1(), players);\n\t\tmatch.events.on('begin', function (game, match){\n\t\t\twindow.RENDERER.render(game);\n\t\t});\n\t\tmatch.events.on('move', function (game, moves, match) {\n\t\t\tconsole.log(Sermat.ser(moves));\n\t\t});\n\t\tmatch.events.on('next', function (game, next, match) {\n\t\t\tif (next instanceof Wargame) {\n\t\t\t\twindow.RENDERER.render(next);\n\t\t\t}\n\t\t});\n\t\tmatch.run().then(function (m) {\n\t\t\tconsole.log(m.result());\n\t\t});\n\t},\n\n\trandomAbstractedGame: function randomAbstractedGame() { //FIXME window\n\t\tvar players = [\n\t\t\t\tnew ludorum.players.RandomPlayer(),\n\t\t\t\tnew ludorum.players.RandomPlayer()\n\t\t\t],\n    game = new AbstractedWargame(this.example1());\n\t\twindow.match = new ludorum.Match(game, players);\n\t\tmatch.events.on('begin', function (game, match) {\n      var terrain=  game.concreteGame.terrain;\n          window.RENDERER.render(game.concreteGame);\n\n\t\t});\n\t\tmatch.events.on('move', function (game, moves, match) {\n\t\t\tconsole.log(Sermat.ser(moves));\n\t\t});\n\t\tmatch.events.on('next', function (game, next, match) {\n      try {\n        \n      \n      var terrain=  next.concreteGame.terrain;\n      window.RENDERER.render(next.concreteGame);\n      } catch (error) {\n        console.log(error);\n      }\n\t\t});\n\t\tmatch.run().then(function (m) {\n      console.log(\"randomAbstractedGame\");\n      console.log(m.result());\n\n\t\t});\n  },\n\n\trandomAbstractedGameDiscrete: function randomAbstractedGameDiscrete() { //FIXME window\n\t\tconsole.time(\"randomAbstractedGameDiscrete\");\n\t\tvar players = [\n\t\t\t\tnew ludorum.players.MonteCarloPlayer({ simulationCount: 10, timeCap: Infinity }),\n\t\t\t\tnew ludorum.players.RandomPlayer(),\n\t\t\t],\n\t\t\tgame = new AbstractedWargame(this.example1());\n\t\twindow.match = new ludorum.Match(game, players);\n\t\tmatch.events.on('begin', function (game, match) {\n\t\t\tvar terrain=  game.concreteGame.terrain;\n\t\t\twindow.RENDERER.render(game.concreteGame);\n\t\t});\n\t\tmatch.events.on('move', function (game, moves, match) {\n\t\t\tconsole.log(Sermat.ser(moves));\n\t\t});\n\t\tmatch.events.on('next', function (game, next, match) {\n\t\t\tvar terrain=  next.concreteGame.terrain;\n\t\t\twindow.RENDERER.render(next.concreteGame);\n\t\t});\n\t\tmatch.run().then(function (m) {\n\t\t\tconsole.timeEnd(\"randomAbstractedGameDiscrete\");\n\t\t\tconsole.log(m.result());\n\t\t});\n\t},\n\n\t//le paso los players, en caso de que no se pase, ahi si son aleatorios\n\ttestGame: function testGame(player1, player2) { //FIXME window\n\t\tvar RandomPlayer = ludorum.players.RandomPlayer,\n\t\t\tplayers = [\n\t\t\t\tplayer1 || new RandomPlayer(),\n\t\t\t\tplayer2 || new RandomPlayer()\n\t\t\t];\n\t\twindow.match = new ludorum.Match(this.example1(), players);\n\t\tmatch.events.on('begin', function (game, match) {\n\t\t\twindow.RENDERER.render(game);\n\t\t});\n\n\t\tmatch.events.on('move', function (game, moves, match) {\n\t\t\tconsole.log(Sermat.ser(moves));\n\t\t\twindow.RENDERER.renderSight(game);\n\t\t});\n\n\t\tmatch.events.on('next', function (game, next, match) {\n\t\t\tif (next instanceof Wargame) {\n\t\t\t\twindow.RENDERER.render(next);\n\t\t\t}\n\t\t});\n\n\t\tmatch.run().then(function (m) {\n\t\t\tconsole.log(m.result());\n\t\t});\n\t},\n\n  conPesosDS_vs_sinPesosDS: function conPesosDS_vs_sinPesosDS() { //FIXME window\n    var players = [\n      new DynamicScriptingPlayer(),\n      new DynamicScriptingSinPesosPlayer()\n    ];\n    window.match = new ludorum.Match(this.example2(), players);\n    match.events.on('begin', function (game, match) {\n      window.RENDERER.render(game);\n    });\n    match.events.on('move', function (game, moves, match) {\n      console.log(Sermat.ser(moves));\n      window.RENDERER.renderSight(game);\n    });\n    match.events.on('next', function (game, next, match) {\n      if (next instanceof Wargame) {\n        window.RENDERER.render(next);\n      }\n    });\n    match.run().then(function (m) {\n      console.log(m.result());\n    });\n  },\n\n  sinPesosDS_vs_conPesosDS: function sinPesosDS_vs_conPesosDS() { //FIXME window\n    var players = [\n      new DynamicScriptingSinPesosPlayer(),\n      new DynamicScriptingPlayer()\n    ];\n    window.match = new ludorum.Match(this.example2(), players);\n    match.events.on('begin', function (game, match) {\n      window.RENDERER.render(game);\n    });\n    match.events.on('move', function (game, moves, match) {\n      console.log(Sermat.ser(moves));\n      window.RENDERER.renderSight(game);\n    });\n    match.events.on('next', function (game, next, match) {\n      if (next instanceof Wargame) {\n        window.RENDERER.render(next);\n      }\n    });\n    match.run().then(function (m) {\n      console.log(m.result());\n    });\n  },\n\n  conPesosDS_vs_random: function conPesosDS_vs_random() { //FIXME window\n    var RandomPlayer = ludorum.players.RandomPlayer;\n    var players = [\n      new DynamicScriptingPlayer(),\n      new RandomPlayer()\n    ];\n    window.match = new ludorum.Match(this.example2(), players);\n    match.events.on('begin', function (game, match) {\n      window.RENDERER.render(game);\n    });\n    match.events.on('move', function (game, moves, match) {\n      //console.log(Sermat.ser(moves));\n      window.RENDERER.renderSight(game);\n    });\n    match.events.on('next', function (game, next, match) {\n      if (next instanceof Wargame) {\n        window.RENDERER.render(next);\n      }\n    });\n    match.run().then(function (m) {\n      console.log(m.result());\n    });\n  },\n\n  sinPesosDS_vs_random: function sinPesosDS_vs_random() { //FIXME window\n    var RandomPlayer = ludorum.players.RandomPlayer;\n    var players = [\n      new DynamicScriptingSinPesosPlayer(),\n      new RandomPlayer()\n    ];\n    window.match = new ludorum.Match(this.exampleAssault(), players);\n    match.events.on('begin', function (game, match) {\n      window.RENDERER.render(game);\n    });\n    match.events.on('move', function (game, moves, match) {\n      console.log(Sermat.ser(moves));\n      window.RENDERER.renderSight(game);\n    });\n    match.events.on('next', function (game, next, match) {\n      if (next instanceof Wargame) {\n        window.RENDERER.render(next);\n      }\n    });\n    match.run().then(function (m) {\n      console.log(m.result());\n    });\n  },\n\n  conPesosDS_vs_random_Abstracted: function conPesosDS_vs_random_Abstracted() { //FIXME window\n    var RandomPlayer = ludorum.players.RandomPlayer,\n      players = [\n        new DynamicScriptingPlayer(),\n        new RandomPlayer()\n      ];\n    var game = new AbstractedWargame(this.example2());\n    window.match = new ludorum.Match(game, players);\n    match.events.on('begin', function (game, match) {\n      var terrain=  game.concreteGame.terrain;\n          window.RENDERER.render(game.concreteGame);\n\n    });\n    match.events.on('move', function (game, moves, match) {\n      console.log(Sermat.ser(moves));\n    });\n    match.events.on('next', function (game, next, match) {\n      var terrain=  next.concreteGame.terrain;\n      window.RENDERER.render(next.concreteGame);\n    });\n    match.run().then(function (m) {\n      console.log(\"conPesosDS_vs_random_Abstracted\");\n      console.log(m.result());\n\n    });\n  },\n  conPesosDS_vs_BasicRulePlayer_shoot: function conPesosDS_vs_BasicRulePlayer_shoot() { //FIXME window\n    var players = [\n      new DynamicScriptingPlayer(),\n      new BasicRulePlayer_shoot()\n    ];\n    window.match = new ludorum.Match(this.example2(), players);\n    match.events.on('begin', function (game, match) {\n      window.RENDERER.render(game);\n    });\n    match.events.on('move', function (game, moves, match) {\n      console.log(Sermat.ser(moves));\n      window.RENDERER.renderSight(game);\n    });\n    match.events.on('next', function (game, next, match) {\n      if (next instanceof Wargame) {\n        window.RENDERER.render(next);\n      }\n    });\n    match.run().then(function (m) {\n      console.log(m.result());\n    });\n  },\n  conPesosDS_vs_BasicRulePlayer_assault: function conPesosDS_vs_BasicRulePlayer_assault() { //FIXME window\n    var players = [\n      new DynamicScriptingPlayer(),\n      new BasicRulePlayer_assault()\n    ];\n    window.match = new ludorum.Match(this.exampleAssault(), players);\n    match.events.on('begin', function (game, match) {\n      window.RENDERER.render(game);\n    });\n    match.events.on('move', function (game, moves, match) {\n      console.log(Sermat.ser(moves));\n      window.RENDERER.renderSight(game);\n    });\n    match.events.on('next', function (game, next, match) {\n      if (next instanceof Wargame) {\n        window.RENDERER.render(next);\n      }\n    });\n    match.run().then(function (m) {\n      console.log(m.result());\n    });\n  },\n  conPesosDS_vs_BasicRulePlayer_assist: function conPesosDS_vs_BasicRulePlayer_assist() { //FIXME window\n    var players = [\n      new DynamicScriptingPlayer(),\n      new BasicRulePlayer_assist()\n    ];\n    window.match = new ludorum.Match(this.example2(), players);\n    match.events.on('begin', function (game, match) {\n      window.RENDERER.render(game);\n    });\n    match.events.on('move', function (game, moves, match) {\n      console.log(Sermat.ser(moves));\n      window.RENDERER.renderSight(game);\n    });\n    match.events.on('next', function (game, next, match) {\n      if (next instanceof Wargame) {\n        window.RENDERER.render(next);\n      }\n    });\n    match.run().then(function (m) {\n      console.log(m.result());\n    });\n  },\n  conPesosDS_vs_BasicRulePlayer_scape_then_shoot: function conPesosDS_vs_BasicRulePlayer_scape_then_shoot() { //FIXME window\n    var players = [\n      new DynamicScriptingPlayer(),\n      new BasicRulePlayer_scape_then_shoot()\n    ];\n    window.match = new ludorum.Match(this.example2(), players);\n    match.events.on('begin', function (game, match) {\n      window.RENDERER.render(game);\n    });\n    match.events.on('move', function (game, moves, match) {\n      console.log(Sermat.ser(moves));\n      window.RENDERER.renderSight(game);\n    });\n    match.events.on('next', function (game, next, match) {\n      if (next instanceof Wargame) {\n        window.RENDERER.render(next);\n      }\n    });\n    match.run().then(function (m) {\n      console.log(m.result());\n    });\n  },\n\n  randomAbstractedTest: function randomAbstractedTest(player1, player2) { //FIXME window\n    var RandomPlayer = ludorum.players.RandomPlayer,\n      players = [\n        player1 || new RandomPlayer(),\n        player2 || new RandomPlayer()\n      ];\n      game = new AbstractedWargame(this.example1());\n    window.match = new ludorum.Match(game, players);\n    match.events.on('begin', function (game, match) {\n      var terrain=  game.concreteGame.terrain;\n          window.RENDERER.render(game.concreteGame);\n\n    });\n    match.events.on('move', function (game, moves, match) {\n      console.log(Sermat.ser(moves));\n    });\n    match.events.on('next', function (game, next, match) {\n      var terrain=  next.concreteGame.terrain;\n      window.RENDERER.render(next.concreteGame);\n    });\n    match.run().then(function (m) {\n      console.log(\"randomAbstractedGame\");\n      console.log(m.result());\n\n    });\n  }\n}; // scenarios\n","/** # Grim Future\n\n*/\nvar GrimFuture = exports.GrimFuture = (function () {\n\tvar GrimFuture = {};\n\n/** ## Battle Brothers #############################################################################\n\n*/\n\tvar EQUIPMENTS = {\n\t\t\tLightClaws: { range: 0, attacks: 1 },\n\t\t\tCClaws: { range: 0, attacks: 2 },\n\t\t\tPistol: { range: 12, attacks: 1 },\n\t\t\tAssaultRifle: { range: 24, attacks: 1 },\n\t\t\tHeavyFlamethrower: { range: 12, attacks: 6, ap: 1 },\n\t\t\tEnergyFist: { range: 0, attacks: 2, ap: 4},\n\t\t\tLinkedAssaultRifle: { range: 24, attacks: 1 },\n\t\t\tHeavyMachinegun: { range: 36, attacks: 3, ap: 1}\n\t\t},\n\t\tMODELS = {\n\t\t\tBattleBrother: declare(Model, {\n\t\t\t\tcost: 22,\n\t\t\t\tequipments: [EQUIPMENTS.AssaultRifle, EQUIPMENTS.LightClaws],\n\t\t\t\tconstructor: function BattleBrother(wounds) {\n\t\t\t\t\tModel.call(this, wounds);\n\t\t\t\t}\n\t\t\t}),\n\t\t\tAssaultBrother: declare(Model, {\n\t\t\t\tcost: 22,\n\t\t\t\tequipments: [EQUIPMENTS.Pistol, EQUIPMENTS.CClaws],\n\t\t\t\tconstructor: function AssaultBrother(wounds) {\n\t\t\t\t\tModel.call(this, wounds);\n\t\t\t\t}\n\t\t\t}),\n\t\t\tSupportBrother: declare(Model, {\n\t\t\t\tcost: 50,\n\t\t\t\tequipments: [EQUIPMENTS.HeavyFlamethrower, EQUIPMENTS.LightClaws],\n\t\t\t\tconstructor: function SupportBrother(wounds) {\n\t\t\t\t\tModel.call(this, wounds);\n\t\t\t\t}\n\t\t\t}),\n\t\t\tEngineer: declare(Model, {\n\t\t\t\tcost: 140,\n\t\t\t\tequipments: [EQUIPMENTS.Pistol, EQUIPMENTS.EnergyFist],\n\t\t\t\tconstructor: function Engineer(wounds) {\n\t\t\t\t\tModel.call(this, wounds);\n\t\t\t\t}\n\t\t\t}),\n\t\t\tSupportBiker: declare(Model, {\n\t\t\t\tcost: 100,\n\t\t\t\tequipments: [EQUIPMENTS.LinkedAssaultRifle, EQUIPMENTS.HeavyMachinegun, EQUIPMENTS.LightClaws],\n\t\t\t\tconstructor: function SupportBiker(wounds) {\n\t\t\t\t\tModel.call(this, wounds);\n\t\t\t\t}\n\t\t\t}),\n\t\t\tNuevoFastAttack: declare(Model, {\n\t\t\t\tcost: 30,\n\t\t\t\tequipments: [EQUIPMENTS.AssaultRifle, EQUIPMENTS.LightClaws],\n\t\t\t\tconstructor: function NuevoFastAttack(wounds) {\n\t\t\t\t\tModel.call(this, wounds);\n\t\t\t\t}\n\t\t\t}),\n\t\t\tNuevoMelee: declare(Model, {\n\t\t\t\tcost: 20,\n\t\t\t\tequipments: [EQUIPMENTS.LightClaws],\n\t\t\t\tconstructor: function NuevoMelee(wounds) {\n\t\t\t\t\tModel.call(this, wounds);\n\t\t\t\t}\n\t\t\t}),\n\t\t},\n\t\tUNITS = {\n\t\t\tBattleBrothers_Unit: declare(Unit, {\n\t\t\t\tquality: 3,\n\t\t\t\tdefense: 6,\n\t\t\t\tfearless: true,\n\t\t\t\tconstructor: function BattleBrothers_Unit(props) {\n\t\t\t\t\tprops = props || {};\n\t\t\t\t\tif (!props.models) {\n\t\t\t\t\t\tprops.models = Iterable.range(5).map(function () {\n\t\t\t\t\t\t\treturn new MODELS.BattleBrother();\n\t\t\t\t\t\t}).toArray();\n\t\t\t\t\t}\n\t\t\t\t\tUnit.call(this, props);\n\t\t\t\t}\n\t\t\t}),\n\t\t\tAssaultBrothers_Unit: declare(Unit, {\n\t\t\t\tquality: 3,\n\t\t\t\tdefense: 6,\n\t\t\t\t//models: Iterable.repeat(MODELS.AssaultBrother, 5).toArray(),\n\t\t\t\tfearless: true,\n\t\t\t\tconstructor: function AssaultBrothers_Unit(props) {\n\t\t\t\t\tprops = props || {};\n\t\t\t\t\tif (!props.models) {\n\t\t\t\t\t\tprops.models = Iterable.range(5).map(function () {\n\t\t\t\t\t\t\treturn new MODELS.AssaultBrother();\n\t\t\t\t\t\t}).toArray();\n\t\t\t\t\t}\n\t\t\t\t\tUnit.call(this, props);\n\t\t\t\t}\n\t\t\t}),\n\t\t\tSupportBrothers_Unit: declare(Unit, {\n\t\t\t\tquality: 3,\n\t\t\t\tdefense: 6,\n\t\t\t\tfearless: true,\n\t\t\t\tconstructor: function SupportBrothers_Unit(props) {\n\t\t\t\t\tprops = props || {};\n\t\t\t\t\tif (!props.models) {\n\t\t\t\t\t\tprops.models = Iterable.range(5).map(function () {\n\t\t\t\t\t\t\treturn new MODELS.SupportBrother();\n\t\t\t\t\t\t}).toArray();\n\t\t\t\t\t}\n\t\t\t\t\tUnit.call(this, props);\n\t\t\t\t}\n\t\t\t}),\n\t\t\tEngineers_Unit: declare(Unit, {\n\t\t\t\tquality: 3,\n\t\t\t\tdefense: 7,\n\t\t\t\tconstructor: function Engineers_Unit(props) {\n\t\t\t\t\tprops = props || {};\n\t\t\t\t\tif (!props.models) {\n\t\t\t\t\t\tprops.models = Iterable.range(1).map(function () {\n\t\t\t\t\t\t\treturn new MODELS.Engineer();\n\t\t\t\t\t\t}).toArray();\n\t\t\t\t\t}\n\t\t\t\t\tUnit.call(this, props);\n\t\t\t\t}\n\t\t\t}),\n\t\t\tSupportBikers_Unit: declare(Unit, {\n\t\t\t\tquality: 3,\n\t\t\t\tdefense: 6,\n\t\t\t\tconstructor: function SupportBikers_Unit(props) {\n\t\t\t\t\tprops = props || {};\n\t\t\t\t\tif (!props.models) {\n\t\t\t\t\t\tprops.models = Iterable.range(1).map(function () {\n\t\t\t\t\t\t\treturn new MODELS.SupportBiker();\n\t\t\t\t\t\t}).toArray();\n\t\t\t\t\t}\n\t\t\t\t\tUnit.call(this, props);\n\t\t\t\t}\n\t\t\t}),\n\t\t\t//inventado solo para que exista una unidad de clasificacion fast attack\n\t\t\tNuevoFastAttacks_Unit: declare(Unit, {\n\t\t\t\tquality: 4,\n\t\t\t\tdefense: 3,\n\t\t\t\tconstructor: function NuevoFastAttacks_Unit(props) {\n\t\t\t\t\tprops = props || {};\n\t\t\t\t\tif (!props.models) {\n\t\t\t\t\t\tprops.models = Iterable.range(5).map(function () {\n\t\t\t\t\t\t\treturn new MODELS.NuevoFastAttack();\n\t\t\t\t\t\t}).toArray();\n\t\t\t\t\t}\n\t\t\t\t\tUnit.call(this, props);\n\t\t\t\t}\n\t\t\t}),\n\t\t\t//inventado solo para que exista una unidad sin ataque a distancia\n\t\t\tNuevoMelees_Unit: declare(Unit, {\n\t\t\t\tquality: 3,\n\t\t\t\tdefense: 6,\n\t\t\t\tconstructor: function NuevoMelees_Unit(props) {\n\t\t\t\t\tprops = props || {};\n\t\t\t\t\tif (!props.models) {\n\t\t\t\t\t\tprops.models = Iterable.range(3).map(function () {\n\t\t\t\t\t\t\treturn new MODELS.NuevoMelee();\n\t\t\t\t\t\t}).toArray();\n\t\t\t\t\t}\n\t\t\t\t\tUnit.call(this, props);\n\t\t\t\t}\n\t\t\t}),\n\t\t};\n\n\tvar BattleBrothers = GrimFuture.BattleBrothers = declare(Army, {\n\t\tfaction: 'BattleBrothers',\n\t\t'static MODELS': MODELS,\n\t\t'static UNITS': UNITS,\n\n\t\tconstructor: function BattleBrothers(args) {\n\t\t\tArmy.call(this, args);\n\t\t}\n\t});\n\n//TODO More factions.\n\treturn GrimFuture;\n})();","\nfunction playerRule(priority, fun) {\n fun.priority = priority;\n return fun;\n}\n\nfunction isFunction(functionToCheck) {\n var getType = {};\n return functionToCheck && getType.toString.call(functionToCheck) === '[object Function]';\n}\n\nvar roundActions_global = [];\n\nvar DynamicScriptingPlayer = exports.DynamicScriptingPlayer = declare(ludorum.Player, {\n /** The constructor takes the player's `name` and the following:\n  */\n constructor: function DynamicScriptingPlayer(params) {\n   ludorum.Player.call(this, params);\n   initialize(this, params)\n    .array('rules', { defaultValue: [] });\n   this.__pendingActions__ = [];\n   this.rules = this.ownRules();\n   this.sortRules();\n   this.roundActions = [];\n   this.playerPossibleUnits = [];\n   this.playerShootableUnits = [];\n   this.playerAssaultableUnits = [];\n },\n\n /** Returns an array with the methods of this object whose name starts with `rule`.\n  */\n ownRules: function ownRules() {\n   var self = this;\n   return Object.keys(Object.getPrototypeOf(this)).map(function (id) {\n     return [self[id], 1];\n   }).filter(function (member) {\n     var f = member[0];\n     return typeof f === 'function' && f.name && f.name.substr(0, 4) === 'rule';\n   });\n },\n\n /** Sorts the rules first by priority (descending), then by weight (descending).\n  */\n sortRules: function sortRules() {\n   this.rules.sort(function (r1, r2) {\n     return r2[0].priority - r1[0].priority || r2[1] - r1[1];\n   });\n },\n\n sortRuleListByWeight: function sortRuleListByWeight(ruleList) {\n   if (ruleList.length > 0){\n     ruleList.sort(function (r1, r2) {\n       return r2[1] - r1[1];\n     });\n   }\n },\n //devuelve la lista de reglas de la prioridad indicada\n firstRules: function firstRules(game,player,priority){\n   var rule, actions;\n   var retRules = [];\n   for (var i = 0, len = this.rules.length; i < len; i++) {\n     if (this.rules[i][0].priority==priority){\n       rule = this.rules[i];\n       actions = rule[0].call(this, game, player);\n       if (actions) {\n         retRules.push(rule);\n       }\n     }\n   }\n   this.sortRuleListByWeight(retRules);\n   return retRules;\n  },\n\n\n /** The player makes a decision by calling the rules' functions in order. The first one to\n return a list of actions is used.\n */\n decision: function decision(game, player) {\n\t if (game instanceof AbstractedWargame) {\n\t\t return this.decision(game.concreteGame, player);\n\t }\n   game.synchronizeMetagame();\n   this.playerPossibleUnits = this.possibleUnits(game, player);\n   this.playerShootableUnits = this.allShootableUnits(game, player);\n   this.playerAssaultableUnits = this.allAssaultableUnits(game, player);\n   var rule, actions;\n   //[playerArmy, playerUnits, enemyArmy, enemyUnits]\n   var armiesAndUnits = this.armiesAndUnits(game,player);\n   var units = armiesAndUnits[1];\n   var enableds = 0;\n   for (var m=0; m<units.length;m++){\n     if (units[m].isEnabled || units[m].isActive){\n       enableds += 1;\n     }\n   }\n   var gameWorth = 0;\n   // si es el principio de la ronda\n   if (enableds === units.length){\n     gameWorth = this.gameWorth(game, player);\n   }\n   var roundActions = this.roundActions,\n     lastRoundGame = game;\n   if (this.__pendingActions__.length < 1) {\n      //for (var i = 0, len = this.rules.length; i < len; i++) {\n      var maxPriority = 12; //la mayor prioridad con reglas programadas\n      while (maxPriority >0){\n         //rule = this.rules[i];\n         var firstRules = this.firstRules(game,player,maxPriority);\n         if (firstRules.length>0){\n           var sumWeight = 0;\n           for (var j=0; j<firstRules.length; j++){\n              var firstRule = firstRules[j];\n              sumWeight += firstRule[1];\n           }\n           // ya hay alguna regla con peso asignado\n           if (sumWeight > firstRules.length){\n             var prob = 0;\n             var sumProb = 0;\n             var rand = Math.random();\n             for (var k=0; k<firstRules.length; k++){\n              prob = firstRules[k][1]/sumWeight;\n              sumProb += prob;\n              if (rand<=sumProb){\n                rule = firstRules[k];\n                actions = rule[0].call(this, game, player);\n              }\n             }\n           } else { //todavia no se aplico pesos a las reglas\n             rule = firstRules[Math.floor(Math.random()*firstRules.length)];\n             actions = rule[0].call(this, game, player);\n           }\n           if (actions) {\n             actions.forEach(function (action) {\n               action.__rule__ = rule;\n             });\n             this.__pendingActions__ = this.__pendingActions__.concat(actions);\n             roundActions = roundActions.concat(actions);\n             this.roundActions = roundActions;\n             roundActions_global = roundActions_global.concat(actions);\n\n             var activateds = 0;\n             for (var l=0; l<units.length;l++){\n               if (!units[l].isEnabled || units[l].isActive){\n                 activateds += 1;\n               }\n             }\n             return this.__pendingActions__.shift();\n           }\n         } else { // no se cumple ninguna regla para la maxima prioridad, bajar de prioridad\n           maxPriority -= 1;\n         }\n       }\n     }\n   raiseIf(this.__pendingActions__.length < 1, 'No rule applied to game!');\n   return this.__pendingActions__.shift();\n },\n\n participate: function participate(match, role){\n   this.attachToMatch(match.state(),match);\n   return this;\n },\n\n attachToMatch: function attachToMatch(game,match){\n   var player = this,\n     round = 0,\n     lastRoundGame = game;\n\n   match.events.on('next', function (game, next, match) {\n     //roundActions = this.roundActions;\n     if (!next.isContingent && next.round > round && !game.isContingent) {\n       player.adjustWeights(game,game.players[0],roundActions_global,lastRoundGame);\n       //player.adjustWeights(game,game.players[0],roundActions,lastRoundGame);\n       round = next.round;\n       //this.roundActions = [];\n       //roundActions = this.roundActions;\n       roundActions_global = [];\n       lastRoundGame = game;\n     }\n   });\n },\n\n//en desuso\n // training: function training(game, opponent){\n //   opponent = opponent || new ludorum.players.RandomPlayer();\n //   var match = new ludorum.Match(game, [this, opponent]),\n //     lastRoundGame = game;\n //     this.attachToMatch(lastRoundGame,match);\n // },\n\nadjustWeights: function adjustWeights(game, player, roundActions, lastRoundGame) {\n  var rules = this.rules;\n\n  // for (reg=0;reg<rules.length;reg++){\n  //   if(rules[reg][1] < 0){\n  //     //console.log(\"rules[reg][1]<0\");\n  //     //console.log(rules[reg][0].name);\n  //     rules[reg][1] = rules[reg][1]*(-1);\n  //   }\n  //   if(isNaN(rules[reg][1])){\n  //     //console.log(\"isNaN(rules[reg][1])\");\n  //     //console.log(rules[reg][0].name);\n  //     raiseIf(isNaN(rules[reg][1]), 'rules[reg][1]');\n  //   }\n  // }\n\n  var reglasAplicadas = [];\n  roundActions.forEach(function (ra){\n    if (reglasAplicadas.indexOf(ra.__rule__)<0){\n      reglasAplicadas.push(ra.__rule__);\n    }\n  });\n  var lastGameWorth = this.gameWorth(lastRoundGame,player);\n  var diff = (this.gameWorth(game,player) - lastGameWorth)/10;\n  // si diff da negativo, a todas las reglas, salvo las que jugaron en esta ronda, se les suma diff\n  var reg,\n    rap,\n    name;\n  if (diff <0){\n    for (reg=0;reg<rules.length;reg++){\n      if(reglasAplicadas.indexOf(rules[reg])<0){\n        rules[reg][1] += diff*(-1);\n      }\n    }\n  }\n else { // si diff da positivo se lo sumara una vez a cada regla aplicada en esta ronda\n    for (reg=0;reg<rules.length;reg++){\n      if(reglasAplicadas.indexOf(rules[reg])>=0){\n        rules[reg][1] += diff;\n      }\n    }\n  }\n  // para cada accion calculo su valor\n  for (var roundAction=0; roundAction<roundActions.length; roundAction++){\n    var action = roundActions[roundAction];\n    name = action.__rule__[0].name;\n    if (!action.__rule__[1]){\n      action.__rule__[1] = 1;\n    }\n    var worthDiv10 = 0;\n    if (isFunction(action.worth)){\n      worthDiv10 = action.worth()/10;\n    } else {\n      worthDiv10 = action.worth/10;\n    }\n\n    for (reg=0; reg<this.rules.length; reg++){\n      // si el valor de la accion es < 0, a cada accion que no sea esta,\n      //se le suma a su regla el valor de esta accion\n      if (worthDiv10<0){\n        if (this.rules[reg][0].name != name){\n           this.rules[reg][1] += worthDiv10*(-1);\n        }\n      } else { // si da positivo, a la regla de esta accion se le suma el valor de esta accion\n        if (this.rules[reg][0].name == name){\n           this.rules[reg][1] += worthDiv10;\n        }\n      }\n   }\n }\n // this.rules = rules;\n\n},\n\n\n /** Calculates the worth of a game state from the point of view of the player. This is the cost\n of opponent's eliminated models and units minus own eliminated models and units.\n  */\n gameWorth: function gameWorth(game, player) {\n   var worth = 0;\n   var cost = 0;\n   var deadModels = 0;\n   //[playerArmy, playerUnits, enemyArmy, enemyUnits]\n   var armiesAndUnits = this.armiesAndUnits(game,player);\n   var playerUnits = armiesAndUnits[1];\n   var enemyUnits = armiesAndUnits[3];\n   enemyUnits.forEach(function (unitY) {\n     cost = unitY.cost();\n     if (unitY.isDead()){\n       worth += cost;\n     }\n     deadModels = unitY.size() - unitY.livingModels().length;\n     worth += cost*deadModels/unitY.size(); //FIXME no funciona correctamente con tough\n   });\n\n   playerUnits.forEach(function (unitX) {\n     cost = unitX.cost();\n     if (unitX.isDead()){\n       worth -= cost;\n     }\n     deadModels = unitX.size() - unitX.livingModels().length;\n     worth -= cost*deadModels/unitX.size(); //FIXME no funciona correctamente con tough\n   });\n   return worth;\n },\n\n 'static __SERMAT__': {\n   identifier: 'DynamicScriptingPlayer',\n   serializer: function serialize_DynamicScriptingPlayer(obj) {\n     return this.serializeAsProperties(obj, ['name', 'rules']); //TODO Check function serialization.\n   }\n },\n\n // ## Helper functions /////////////////////////////////////////////////////////////////////////\n//accion basica shoot\n shoot: function shoot(unitX,unitY){\n   return [new ActivateAction(unitX.id),new ShootAction(unitX.id,unitY.id)];\n },\n//accion basica assault\n assault: function assault(unitX,unitY){\n   return [new ActivateAction(unitX.id),new AssaultAction(unitX.id,unitY.id)];\n },\n//accion basica move. puede solo moverse, o moverse y disparar\n move: function move(unitX,moveAction,shootUnitY){\n   if (shootUnitY){\n     //el shoot ya tiene EndTurnAction incorporado, si solo se mueve hay q agregarlo\n     return [new ActivateAction(unitX.id),moveAction,new ShootAction(unitX.id,shootUnitY.id)];\n   } else {\n     return [new ActivateAction(unitX.id),moveAction,new EndTurnAction(unitX.id)];\n   }\n },\n//metodo auxiliar para la funcion scape\nscapeAux: function scapeAux(game,player,enemyUnits,unitX){\n  for (var i = 0; i < enemyUnits.length; i++) {\n    var eu = enemyUnits[i];\n    var moves = [];\n    if (this.canHide(game,unitX,eu)){\n      var hideMoves = this.hideMoves(game,unitX,eu);\n      for (var j=0; j<hideMoves.length; j++){\n        if (game.terrain.distance(eu.position,hideMoves[j].position)<=eu.maxRange()+6){\n          return this.move(unitX,hideMoves[j]);\n        }\n      }\n      moves = moves.concat(hideMoves);\n    }\n    if (this.canRun(game,unitX,eu)){\n      var runMoves = this.runMoves(game,unitX,eu);\n      for (var k=0; k<runMoves.length; k++){\n        if (game.terrain.distance(eu.position,runMoves[k].position)<=eu.maxRange()+6){\n          return this.move(unitX,runMoves[k]);\n        }\n      }\n      moves = moves.concat(runMoves);\n    }\n    if (moves.length>0){\n      return this.move(unitX,moves[Math.floor(Math.random()*moves.length)]);\n    }\n  }\n},\n//retorna un move, que le sirva a unitX para escapar de los enemigos peligrosos\n scape: function scape(game,player,unitX){\n   var mostDangerousUnits = this.mostDangerousUnits(game,player,unitX);\n   var scapeMdu = this.scapeAux(game,player,mostDangerousUnits,unitX);\n   if (scapeMdu){\n     return scapeMdu;\n   }\n   var dangerousUnits = this.dangerousUnits(game,player,unitX);\n   var scapeDu = this.scapeAux(game,player,mostDangerousUnits,unitX);\n   if (scapeDu){\n     return scapeDu;\n   }\n   //console.log(\"no escapa cuando deberia\");\n   var moveActions = unitX.getMoveActions(game);\n   var return_move = this.move(unitX,moveActions[Math.floor(Math.random()*moveActions.length)]);\n   return return_move;\n },\n //metodo auxiliar para la funcion assist\n assistAux: function assistAux(game,player,enemyUnits,unitX,unitX2){\n   for (var i=0;i<enemyUnits.length;i++){\n      var eu = enemyUnits[i];\n      if (this.canAssault(game,unitX,eu)){\n        return this.assault(unitX,eu);\n      }\n      var moveAction;\n      if (this.canBlockSight(game,unitX,unitX2,eu)){\n        var blockSightMovements = this.blockSightMovements(game,unitX,unitX2,eu);\n        moveAction = blockSightMovements[Math.floor(Math.random()*blockSightMovements.length)];\n      }\n      if (this.canShoot_(game,unitX,eu,true)){\n        if (moveAction){\n          return this.move(unitX,moveAction,eu);\n        } else {\n          return this.shoot(unitX,eu);\n        }\n      } else{\n        if (moveAction){\n          return this.move(unitX,moveAction);\n        }\n      }\n    }\n    return null;\n },\n/*al enemigo que pueda atacar a unitX2, intenta asaltarlo, o moverse para bloquear su vista y dispararlo\nempezando por los enemigos mas peligrosos\n*/\n assist: function assist(game,player,unitX,unitX2){\n   var mostDangerousUnits = this.mostDangerousUnits(game,player,unitX2);\n   var assistMdu = this.assistAux(game,player,mostDangerousUnits,unitX,unitX2);\n   if (assistMdu){\n     return assistMdu;\n   }\n   var dangerousUnits = this.dangerousUnits(game,player,unitX2);\n   var assistDu = this.assistAux(game,player,dangerousUnits,unitX,unitX2);\n   if (assistDu){\n     return assistDu;\n   }\n   //console.log(\"no asiste cuando deberia\");\n   var moveActions = unitX.getMoveActions(game);\n   var return_move = this.move(unitX,moveActions[Math.floor(Math.random()*moveActions.length)]);\n   return return_move;\n },\n\n getFewMoveActions: function getFewMoveActions(game,unitX){\n   var fewMoveActions = [];\n   var x = unitX.position[0];\n   var y = unitX.position[1];\n   fewMoveActions.push(new MoveAction(unitX.id, [x+1, y+1], false));\n   //return new MoveAction(unitX.id, [+pos[0], +pos[1]], v > 6);\n   return fewMoveActions;\n },\n\n // retorna el move que hace que unitX se acerque lo mas posible a unitZ\n getCloseTo: function getCloseTo(game,unitX,unitZ){\n    //encuentro a linea de posiciones entre unitX y unitZ\n    var interpolatedPos = this.interpolation(unitX.position,unitZ.position);\n    //pongo en una lista todos los movimientos que lleven a la linea\n    var moveActions = unitX.getMoveActions(game);\n    //var moveActions = this.getFewMoveActions(game, unitX);\n    var possibleMoves = [];\n    for (var i=0; i<moveActions.length; i++){\n      var pos = moveActions[i].position;\n      interpolatedPos.forEach(function(elem){\n        if(pos[0]===elem[0]&&pos[1]===elem[1]){\n          possibleMoves.push(moveActions[i]);\n        }\n      });\n    }\n    // recorro la lista para ver cual esta mas cerca a unitZ\n    var closest = unitX.position;\n    var move = moveActions[Math.floor(Math.random()*moveActions.length)];\n    for (var j=0; j<possibleMoves.length;j++){\n      var movePos = possibleMoves[j].position;\n      if (game.terrain.distance(movePos,unitZ.position)<game.terrain.distance(closest,unitZ.position)){\n        closest = movePos;\n        move = possibleMoves[j];\n      }\n    }\n    var return_move = this.move(unitX,move);\n    return return_move;\n},\n// devuelve las unidades que el jugador puede usar en su proxima accion\npossibleUnits: function possibleUnits(game, player){\n  //[playerArmy, playerUnits, enemyArmy, enemyUnits]\n  var playerUnits = this.armiesAndUnits(game,player)[1];\n  var possibleUnits = [];\n  playerUnits.forEach(function (pu) {\n    if ((!pu.isDead()) && (pu.isEnabled) && (!pu.isActive)){\n      possibleUnits.push(pu);\n    }\n  });\n  return possibleUnits;\n},\n// devuelve una lista de unidades enemigas que pueden ser disparadas por la unidad atacante\nshootableUnitsAux: function shootableUnitsAux(game, player, shooter){\n  var shootableUnits = [];\n  var enemyUnits = this.livingEnemyUnits(game,player);\n  var shootActions = shooter.getShootActions(game);\n  shootActions.forEach(function(shootAction){\n    enemyUnits.forEach(function(target){\n      if(shootAction.targetId === target.id){\n        shootableUnits.push(target);\n      }\n    });\n  });\n  return shootableUnits;\n},\n// devuelve una lista de unidades enemigas que pueden ser disparadas por cada unidad aliada\nallShootableUnits: function allShootableUnits(game, player){\n  var allShootableUnits = [];\n  var possibleUnits = this.playerPossibleUnits;\n  for (var i = 0; i < possibleUnits.length; i++) {\n    var shooter = possibleUnits[i];\n    var shooterShootableUnits = [];\n    shooterShootableUnits = this.shootableUnitsAux(game, player, shooter);\n    allShootableUnits[i] = [shooter,shooterShootableUnits];\n  }\n  return allShootableUnits;\n},\nenemyShootableUnits: function enemyShootableUnits(game, player, shooter){\n  var enemyShootableUnits = [];\n  for (var psu=0; psu < this.playerShootableUnits.length; psu++){\n   if(this.playerShootableUnits[psu][0]==shooter){\n     enemyShootableUnits = this.playerShootableUnits[psu][1];\n   }\n  }\n  return enemyShootableUnits;\n},\n\n// devuelve una lista de unidades enemigas que pueden ser asaltadas por la unidad atacante\nassaultableUnits: function assaultableUnits(game, player, assaulter){\n  var assaultableUnits = [];\n  var enemyUnits = this.livingEnemyUnits(game,player);\n  var assaultActions = assaulter.getAssaultActions(game);\n  assaultActions.forEach(function(assaultAction){\n    enemyUnits.forEach(function (target){\n      if(assaultAction.targetId === target.id){\n        assaultableUnits.push(target);\n      }\n    });\n  });\n  return assaultableUnits;\n},\n// devuelve una lista de unidades enemigas que pueden ser asaltadas por cada unidad aliada\nallAssaultableUnits: function allAssaultableUnits(game, player){\n  var allAssaultableUnits = [];\n  var possibleUnits = this.playerPossibleUnits;\n  for (var i = 0; i < possibleUnits.length; i++) {\n    var assaulter = possibleUnits[i];\n    var assaulterAssaultableUnits = [];\n    assaulterAssaultableUnits = this.assaultableUnits(game, player, assaulter);\n    allAssaultableUnits[i] = [assaulter,assaulterAssaultableUnits];\n  }\n  return allAssaultableUnits;\n},\nenemyAssaultableUnits: function enemyAssaultableUnits(game, player, assaulter){\n  var enemyAssaultableUnits = [];\n  for (var pau=0; pau < this.playerAssaultableUnits.length; pau++){\n   if(this.playerAssaultableUnits[pau][0]==assaulter){\n     enemyAssaultableUnits = this.playerAssaultableUnits[pau][1];\n   }\n  }\n  return enemyAssaultableUnits;\n},\n\n//devuelve true si el shooter puede dispararle al target\n canShoot_: function canShoot_(game,shooter,target,walking){\n   if (!shooter.isDead() && shooter.isEnabled && !target.isDead()){\n     if (game.terrain.canShoot(shooter,target) != Infinity){\n       return true;\n     }\n   }\n   return false;\n },\n //devuelve true si el assaulter puede asaltar al target\n canAssault: function canAssault(game,assaulter,target){\n   if (!assaulter.isDead() && assaulter.isEnabled && !target.isDead()){\n     if (game.terrain.canShoot(assaulter,target) <= 12){\n       return true;\n     }\n   }\n   return false;\n },\n /*metodo auxiliar de interpolation\n  para cuando la distancia entre las X es mayor que la distancia entre las Y*/\n interForX: function interForX(xmin,xmax,y_xmin,delta){\n   var interpolatedPos = [];\n   var y=y_xmin;\n   for (var x=xmin+1;x<xmax;x++){\n      interpolatedPos.push([parseInt(x),parseInt(y)]);\n     y += delta;\n   }\n   return interpolatedPos;\n },\n /*metodo auxiliar de interpolation\n  para cuando la distancia entre las Y es mayor que la distancia entre las X*/\n interForY: function interFory(ymin,ymax,x_ymin,delta){\n   var interpolatedPos = [];\n   var x=x_ymin;\n   for (var y=ymin+1;y<ymax;y++){\n      interpolatedPos.push([parseInt(x),parseInt(y)]);\n     x += delta;\n   }\n   return interpolatedPos;\n },\n//genera un array de puntos entre el pointA y el pointB\n interpolation: function interpolation(pointA,pointB){\n   var x=0,\n    y=0,\n    delta=0;\n   var xa = pointA[0],\n    xb = pointB[0],\n    ya = pointA[1],\n    yb = pointB[1];\n   var xmin = Math.min(xa,xb),\n    xmax = Math.max(xa,xb),\n    ymin = Math.min(ya,yb),\n    ymax = Math.max(ya,yb);\n   var x_ymin,\n    y_xmin;\n   if (xmin === xa){\n     y_xmin = ya;\n   }else{\n     y_xmin = yb;\n   }\n   if (ymin === ya){\n     x_ymin = xa;\n   }else{\n     x_ymin = xb;\n   }\n   var interForX;\n   var interForY;\n   if (ya===yb){\n     interForX = this.interForX(xmin,xmax,y_xmin,delta);\n     return interForX;\n   } else {\n     if (xa===xb){\n       interForY = this.interForY(ymin,ymax,x_ymin,delta);\n       return interForY;\n     } else {\n       if (Math.abs(yb-ya) >= Math.abs(xb-xa)){\n         delta = Math.abs(xb-xa) / Math.abs(yb-ya);\n         interForY = this.interForY(ymin,ymax,x_ymin,delta);\n         return interForY;\n       } else {\n         delta = Math.abs(yb-ya) / Math.abs(xb-xa);\n         interForX = this.interForX(xmin,xmax,y_xmin,delta);\n         return interForX;\n       }\n     }\n   }\n },\n /*devuelve las posiciones en que la unitX puede ponerse entre la unitA y la unitB\n de forma tal que quite la linea de vision entre las mismas */\n blockSightMovements: function blockSightMovements(game,unitX,unitA,unitB){\n   //dadas las posiciones de unitA y unitB\n   var posA = unitA.position;\n   var posB = unitB.position;\n   //calcula las posiciones intermedias y las pone en un array\n   var interpolatedPos = this.interpolation(posA,posB);\n   //devuelve la posicion de los moveActions de unitX que coincidan con alguna del array\n   var possibleMoves = [];\n   var moveActions = unitX.getMoveActions(game);\n   for (var i=0; i<moveActions.length; i++){\n     var pos = moveActions[i].position;\n     interpolatedPos.forEach(function(elem){\n       if(pos[0]===elem[0]&&pos[1]===elem[1]){\n         possibleMoves.push(moveActions[i]);\n       }\n     });\n   }\n   return possibleMoves;\n },\n /*devuelve true si la unitX puede ponerse entre la unitA y la unitB\n de forma tal que quite la linea de vision entre las mismas */\n canBlockSight: function canBlockSight(game,unitX,unitA,unitB){\n   return (this.blockSightMovements(game,unitX,unitA,unitB).length>0);\n },\n /*Devuelve true si la unitX puede cubrir a la unitX2\n y/o puedeAtacar a las unidades enemigas no activadas que puedan atacar a la unitX2.*/\n canAssist: function canAssist(game,player,unitX,unitX2){\n  var dangerousUnits = this.dangerousUnits(game,player,unitX2);\n  var canAssist = false;\n  for (var i=0;i<dangerousUnits.length;i++){\n     var du = dangerousUnits[i];\n     if (this.canBlockSight(game,unitX,unitX2,du)||this.canShoot_(game,unitX,du,true)||this.canAssault(game,unitX,du)){\n       canAssist = true;\n     } else {\n       canAssist = false;\n       break;\n     }\n   }\n   //si nadie lo puede atacar, no tiene de que asistir\n   return canAssist;\n},\n //devuelve true si puede correr y alejarse el rango suficiente\n canRun: function canRun(game,runningUnit,enemyUnit){\n   var range = enemyUnit.maxRange()+6;\n   //corre 12 pero el enemigo se acerca 6\n   if (runningUnit.isEnabled && game.terrain.canShoot(enemyUnit,runningUnit)<=range){\n     return false;\n   }\n   return true;\n },\n /*devuelve true si puede cubrirse de las unidades enemigas\n tras otra unidad u terreno que quite linea de vision*/\n canHide: function canHide(game,hidingUnit,enemyUnit){//TODO\n   return false;\n },\n /*Retorna el move que hace que unitX se aleje lo mas posible de unitZ.\n Lo devuelve en una lista*/\n runMoves: function runMoves(game,unitX,unitZ){\n    var zPos = unitZ.position;\n    var farest = unitX.position;\n    var moveActions = unitX.getMoveActions(game);\n    var move = moveActions[Math.floor(Math.random()*moveActions.length)];\n    for (var i=0; i<moveActions.length;i++){\n      var movePos = moveActions[i].position;\n      if (game.terrain.distance(movePos,zPos)>game.terrain.distance(farest,zPos)){\n        farest = movePos;\n        move = moveActions[i];\n      }\n    }\n    if (game.terrain.distance(unitZ.position,farest)<=unitZ.maxRange()+6){\n      //console.log(\"run y puede huir\");\n     return [move];\n    }\n    //console.log(\"run y huyo lo maximo q pudo pero igual lo alcanzan\");\n    return [move];\n },\n //devuelve la lista de movimientos en los que la hidingUnit puede esconderse  de la enemyUnit\n hideMoves: function hideMoves(game,hidingUnit,enemyUnit){//TODO\n   return [];\n },\n// devuelve true si unitX puede escaparse de las unidades que la pueden matar\n canScape: function canScape(game,player,unitX){\n   var mostDangerousUnits = this.mostDangerousUnits(game,player,unitX);\n   //si nadie lo puede matar, no tiene de quien escapar\n   if (mostDangerousUnits.length === 0){\n     return false;\n   }\n   var canScape = true;\n   for (var i = 0; i < mostDangerousUnits.length; i++) {\n     var mdu = mostDangerousUnits[i];\n     if (!this.canRun(game,unitX,mdu) && !this.canHide(game,unitX,mdu)){\n       canScape = false;\n     }\n   }\n   return canScape;\n },\n // devuelve las unidades enemigas que pueden matar a la unitX\n mostDangerousUnits: function mostDangerousUnits(game,player,unitX){\n   var livingEnemyUnits = this.livingEnemyUnits(game,player),\n    mdu = [];\n   for (var i=0;i<livingEnemyUnits.length;i++){\n     var u = livingEnemyUnits[i];\n     if (this.canKill(game,u,unitX)){\n       mdu.push(u);\n     }\n   }\n   return mdu;\n   //return iterable(livingEnemyUnits).filter(function (u) {\n  //    return this.canKill(game,u,unitX);\n   //});\n },\n // devuelve las unidades enemigas que pueden atacar a la unitX\n dangerousUnits: function dangerousUnits(game,player,unitX){\n   var livingEnemyUnits = this.livingEnemyUnits(game,player),\n     du = [];\n    for (var i=0;i<livingEnemyUnits.length;i++){\n      var eu = livingEnemyUnits[i];\n      if (this.canShoot_(game,eu,unitX,true)||this.canAssault(game,eu,unitX)){\n        du.push(eu);\n      }\n    }\n    return du;\n   //return iterable(livingEnemyUnits).filter(function (eu) {\n     //return this.canShoot_(game,eu,unitX,true)||this.canAssault(game,eu,unitX);\n    //});\n },\n //devuelve verdadero si las unidades enemigas no pueden matar a unit en este turno\n canBeKilled: function canBeKilled(game,player,unit){\n   //[playerArmy, playerUnits, enemyArmy, enemyUnits]\n   var enemyUnits = this.armiesAndUnits(game,player)[3];\n   for (var i = 0; i < enemyUnits.length; i++) {\n     if (this.canKill(game,enemyUnits[i],unit)){\n       return true;\n     }\n   }\n   return false;\n },\n // devuelve verdadero si la unidad atacante puede llegar a eliminar a la defensora\n canKill: function canKill(game,attacker,target){\n   if (!attacker.isDead() && attacker.isEnabled && !target.isDead()){\n     if (this.canKillShooting(game,attacker,target) || this.canKillAssaulting(game,attacker,target)){\n       return true;\n     }\n   }\n   return false;\n },\n // devuelve verdadero si la unidad que dispara puede llegar a eliminar a la defensora\n canKillShooting: function canKillShooting(game,shooter,target){\n   if (!shooter.isDead() && !target.isDead() && shooter.isEnabled && this.bestAttackResultShooting(game,shooter,target)>=100){\n     return true;\n   }\n   return false;\n },\n // devuelve verdadero si la unidad que asalta puede llegar a eliminar a la defensora\n canKillAssaulting: function canKillAssaulting(game,assaulter,target){\n   if (!assaulter.isDead() && !target.isDead() && assaulter.isEnabled && this.bestAttackResultAssaulting(game,assaulter,target)>=100){\n     return true;\n   }\n   return false;\n },\n // devuelve un porcentaje de destruccion de la unidad defensora tras un ataque de la unidad atacante\n // devuelve el mejor porcentaje posible\n bestAttackResult: function bestAttackResult(game,attacker,target){\n   if (!attacker.isDead() && attacker.isEnabled && !target.isDead()){\n     var barShooting = this.bestAttackResultShooting(game,attacker,target);\n     var barAssaulting = this.bestAttackResultAssaulting(game,attacker,target);\n     var bestAttackResult = Math.max(barShooting, barAssaulting);\n     return bestAttackResult;\n   }\n   return 0;\n },\n // devuelve un porcentaje de destruccion de la unidad defensora tras un disparo de la unidad atacante\n // donde el mejor porcentaje posible: cada ataque supera las tiradas de dados, y el defensor falla los bloqueos\n bestAttackResultShooting: function bestAttackResultShooting(game,unitX,unitY){\n   if (!unitX.isDead() && unitX.isEnabled && !unitY.isDead()){\n     var distance = game.terrain.distance(unitX.position, unitY.position);\n     var livingModels = unitX.livingModels();\n     var attackCount = 0;\n   livingModels.forEach(function (model) {\n       model.equipments.forEach(function (eq) {\n         if (eq.range >= distance) {\n           attackCount += eq.attacks;\n         }\n       });\n     });\n     var unitYModelsAlive = unitY.livingModels().length;\n     var bestAttackResult = attackCount*100/unitYModelsAlive;\n     if (bestAttackResult > 100){\n       bestAttackResult = 100;\n     }\n     return bestAttackResult;\n   }\n   return 0;\n },\n // devuelve un porcentaje de destruccion de la unidad defensora tras un asalto de la unidad atacante\n // donde el mejor porcentaje posible: cada ataque supera las tiradas de dados, y el defensor falla los bloqueos\n bestAttackResultAssaulting: function bestAttackResultAssaulting(game,unitX,unitY){\n   if (!unitX.isDead() && unitX.isEnabled && !unitY.isDead()){\n     if (this.canAssault(game,unitX,unitY)){\n       var attackCount = 0;\n       var livingModels = unitX.livingModels();\n       livingModels.forEach(function (model) {\n         model.equipments.forEach(function (eq) {\n           if (eq.range === 0) {\n             attackCount += eq.attacks;\n           }\n         });\n       });\n       var unitYModelsAlive = unitY.livingModels().length;\n       var bestAttackResult = attackCount*100/unitYModelsAlive;\n       if (bestAttackResult > 100){\n         bestAttackResult = 100;\n       }\n       return bestAttackResult;\n     }\n   }\n   return 0;\n },\n\n // devuelve una lista de unidades enemigas que si shooter les dispara las mata\n shootingKillableUnits: function shootingKillableUnits(game,player,shooter){\n   var shootingKillableUnits = [];\n   var enemyUnits = this.shootableUnitsAux(game,player,shooter);\n\n   for (var i=0; i<enemyUnits.length;i++){\n     var target = enemyUnits[i];\n     if (this.willKillShooting(game,shooter,target)){\n       shootingKillableUnits.push(target);\n     }\n   }\n   return shootingKillableUnits;\n },\n // devuelve una lista de las unidades enemigas que aun estan vivas\n livingEnemyUnits: function livingEnemyUnits(game, player){\n   //[playerArmy, playerUnits, enemyArmy, enemyUnits]\n   var enemyArmy = this.armiesAndUnits(game,player)[2];\n   return enemyArmy.livingUnits();\n },\n // devuelve un array que facilita los datos: playerArmy, playerUnits, enemyArmy, enemyUnits\n armiesAndUnits: function armiesAndUnits(game, player){\n   var playerArmy = game.armies[player];\n   var playerUnits = playerArmy.units;\n   var enemy = game.opponent(player);\n   var enemyArmy = game.armies[enemy];\n   var enemyUnits  = enemyArmy.units;\n   return [playerArmy, playerUnits, enemyArmy, enemyUnits];\n },\n // devuelve true si la unidad tiene algun modelo herido\n wounded: function wounded(unit){\n   return unit.livingModels().length < unit.size(); //FIXME no considero tough\n },\n // devuelve true si el porcentaje de daño en el mejor caso de la unidad atacante hacia la defensora es >= 75\n canWoundALot: function canWoundALot(game,attacker,target){\n   if (!attacker.isDead() && attacker.isEnabled && !target.isDead()){\n     return this.bestAttackResult(game,attacker,target)>=75;\n   }\n   return false;\n },\n // devuelve true si el porcentaje de daño en el mejor caso de la unidad atacante hacia la defensora es > 0\n canWound: function canWound(game,attacker,target){\n   if (!attacker.isDead() && attacker.isEnabled && !target.isDead()){\n     return this.bestAttackResult(game,attacker,target)>0;\n   }\n   return false;\n },\n // devuelve el costo de unidad maximo entre la lista de unidades dada\n maxCost: function maxCost(units){\n   return iterable(units).map(function (unit) { unit.cost(); }).max(0);\n },\n// devuelve la unidad con costo mayor dentro de la lista de unidades dada\n mostExpensiveUnit: function mostExpensiveUnit(units){\n   //var meu = iterable(units).greater(function (unit) { return unit.cost(); });\n   var meu;\n   var maxCost=0;\n   for (var i=0;i<units.length;i++){\n     if (units[i].cost()>maxCost){\n       meu=units[i];\n       maxCost=meu.cost();\n     }\n   }\n   return meu;\n },\n // devuelve la unidad con costo menor de la lista de unidades dada\n cheapestUnit: function cheapestUnit(units){\n   //var meu = iterable(units).greater(function (unit) { return unit.cost(); });\n   var chu;\n   var minCost=0;\n   for (var i=0;i<units.length;i++){\n     if (units[i].cost()>minCost){\n       chu=units[i];\n       minCost=chu.cost();\n     }\n   }\n   return chu;\n },\n //devuelve un valor relativo a que tan fuerte es una unidad\n unitForce: function unitForce(unit){\n   var livingModels = unit.livingModels();\n   var attackCount = 0;\n   livingModels.forEach(function (model) {\n       model.equipments.forEach(function (eq) {\n           attackCount += eq.attacks;\n       });\n     });\n     var force = unit.quality*attackCount + unit.defense/2 + unit.cost()/10;\n     return force;\n     /* //FIXME considerar habilidades\n     if (blast(x)){ force+=1*x;}\n     if (deadlly){ force+=3;}\n     if (poison(x)){ force+=1*x;}\n     if (rending){ force+=1;}\n     if (sniper){ force+=2;}\n     if (isMelee(unit)){\n       if (furiuos){ force+= 0.5;}\n       if (impact(x)){ force+= 1*x;}\n     } else {\n       if (linked){ force+=unit.size;}\n     }\n    */\n },\n //devuelve verdadero si la unit es de las mas fuertes de units\n unitIsStrongest: function unitIsStrongest(units,unit){ //TODO\n   var strongest;\n   var maxForce=0;\n   for (var i=0;i<units.length;i++){\n     if (this.unitForce(units[i])>maxForce){\n       strongest=units[i];\n       maxForce=this.unitForce(strongest);\n     }\n   }\n   return this.unitForce(unit)===maxForce;\n   //return unit.cost()===this.mostExpensiveUnit(units).cost();\n },\n classification: function classification(unit){ //FIXME: considerar las habilidades\n   if (unit.quality >=4 && unit.defense<=3){\n     return \"fastAttack\";  // si tienen poca defensa y mucha calidad o scouts, strider, flying, fast\n   }\n   if (unit.defense>=7){\n     return \"heavySupport\"; //tankes o AP(x), regeneration, stealth, tought(x)\n   }\n   if (unit.size()>=5 && unit.cost()<=130){\n     return \"troop\"; //si son varios modelos y el costo es bajo\n   }\n   if (unit.maxRange() >=36){\n     return \"sniper\"; //el maxRange es mayor a 36, o indirect, sniper\n   }\n   return \"\";\n },\n // devuelve true si la unidad es una de las que tiene el mayor rango de una lista de unidades dada\nmaxRangeInUnits: function maxRangeInUnits(units,unit){\n    var maxRange = iterable(units).map(function (unit) {\n      return unit.maxRange();\n    }).max(0);\n    return unit.maxRange() === maxRange;\n  },\n // devuelve true si la unidad es una de las mas faciles de eliminar de una lista de unidades dada\n easiestToKill: function easiestToKill(units,unit){\n   var easeToKill = iterable(units).map(function (u) {\n     return u.livingModels().length * u.defense;\n   }).max(0);\n   return unit.livingModels().length * unit.defense === easeToKill;\n   /* en realidad deberiamos considerar esto tambien:\n   if (regeneration){ easeToKill+=1;}\n   if (tought(x)){ easeToKill+=1.5*x;}\n   if (stealth){ easeToKill+=0.5;}*/\n },\n/*devuelve el porcentaje de modelos destruidos según el resultado esperado\nluego de un ataque de disparo realizado por la shooter a la target*/\n expectedResultShooting: function expectedResultShooting(game,shooter,target){\n if (this.canShoot_(game,shooter,target,true)){\n     var distance = game.terrain.distance(shooter.position, target.position);\n     var livingModels = shooter.livingModels();\n     var attackCount = 0;\n   livingModels.forEach(function (model) {\n       model.equipments.forEach(function (eq) {\n         if (eq.range >= distance) {\n           attackCount += eq.attacks;\n         }\n       });\n     });\n     //se calculan los hits\n     var diceResult = 0;\n     var hits = 0;\n     for (var h=0;h<attackCount;h++){\n       diceResult = Math.floor(3+Math.random()*4); //o 3 o 4\n       if (shooter.quality>diceResult){\n         hits += 1;\n       }\n     }\n     //se calculan los blocks\n     var blocks = 0;\n     for (var b=0;b<hits;b++){\n       diceResult = Math.floor(1+Math.random()*6);\n       if (target.defense>diceResult){\n         blocks += 1;\n       }\n     }\n     //se restan y se calcula el porcentaje\n     var wounds = hits - blocks;\n     var targetModelsAlive = target.livingModels().length;\n     var expectedResult = wounds*100/targetModelsAlive;\n     if (expectedResult > 100){\n       expectedResult = 100;\n     }\n     return expectedResult;\n   }\n   return 0;\n   },\n/*devuelve el porcentaje de modelos que tendra la unidad defensora respecto a su cantidad\ninicial en el juego, luego de un ataque melee realizado por la assaulter a la target*/\n  expectedResultAssaulting: function expectedResultAssaulting(game,assaulter,target){\n     return 0; //TODO\n   },\n  willKillShooting: function willKillShooting(game,shooter,target){\n    return this.expectedResultShooting(game,shooter,target)===100;\n  },\n  willWoundALotShooting: function willWoundALotShooting(game,shooter,target){\n    return this.expectedResultShooting(game,shooter,target)>75;\n  },\n  willWoundHalfShooting: function willWoundHalfShooting(game,shooter,target){\n    return this.expectedResultShooting(game,shooter,target)>=50;\n  },\n  willWoundShooting: function willWoundShooting(game,shooter,target){\n    return this.expectedResultShooting(game,shooter,target)>0;\n  },\n  willKillAssaulting: function willKillAssaulting(game,assaulter,target){\n    return this.expectedResultAssaulting(game,assaulter,target)===100;\n  },\n  willWoundALotAssaulting: function willWoundALotAssaulting(game,assaulter,target){\n    return this.expectedResultAssaulting(game,assaulter,target)>75;\n  },\n  willWoundHalfAssaulting: function willWoundHalfAssaulting(game,assaulter,target){\n    return this.expectedResultAssaulting(game,assaulter,target)>=50;\n  },\n  willWoundAssaulting: function willWoundAssaulting(game,assaulter,target){\n    return this.expectedResultAssaulting(game,assaulter,target)>0;\n  },\n  /*Devuelve verdadero si el jugador va acumulando mas puntos de unidades completamente\n  destruidas que el oponente.*/\n  winning: function winning(game){\n    var activePlayer = game.activePlayer();\n    var enemyPlayer = game.players[0];\n    if (activePlayer === game.players[0]) {\n      enemyPlayer = game.players[1];\n    }\n     return game.scores(activePlayer) > game.scores(enemyPlayer);\n  },\n  /*Devuelve verdadero si tras la eliminación de la unitX el puntaje del jugador pasa a ser\n  menor que el puntaje del oponente.*/\n  losingGameByUnitElimination: function losingGameByUnitElimination(game,unit){\n    var activePlayer = game.activePlayer();\n    var enemyPlayer = game.players[0];\n    if (activePlayer === game.players[0]) {\n      enemyPlayer = game.players[1];\n    }\n    return (game.scores(activePlayer) - unit.cost()) < game.scores(enemyPlayer);\n  },\n  /*Devuelve verdadero si queda al menos una unidad del jugador que no haya sido activada\n  esta ronda que al atacar pueda matar (o dejar pinned) a una unidad con puntaje tal que al\n  eliminarla el jugador pasaria a ganar. */\n  winningActivation: function winningActivation(game,player){\n    if (game.round===4){\n      var activePlayer = game.activePlayer();\n      var enemyPlayer = game.players[0];\n      if (activePlayer === game.players[0]) {\n        enemyPlayer = game.players[1];\n      }\n     var toKillUnits = [];\n     var enemyUnits = this.livingEnemyUnits(game,player);\n     enemyUnits.forEach(function (eu){\n       if(game.scores(activePlayer) > (game.scores(enemyPlayer)-eu.cost())){\n         toKillUnits.push(eu);\n       }\n     });\n     var possibleUnits = this.possibleUnits(game, player);\n     for (i=0; i<possibleUnits.length;i++){\n       var pos = possibleUnits[i];\n       for (j=0; j<toKillUnits.length;j++){\n         var tk = toKillUnits[j];\n         if (this.canKill(game,pos,tk)||this.canPin(game,pos,tk)){\n           return true;\n         }\n       }\n     }\n    }\n    return false;\n },\n //\tdevuelve true si puede dejar pinned a la unidad\n canPin: function canPin(game,assaulter,target){ //FIXME cuando puede dejar a la mitad de los modelos iniciales (si es que ahora tiene mas)\n  if (this.canAssault(game,assaulter,target)){\n    //queda con la mitad o menos de modelos iniciales\n    var attackCount = 0;\n    var livingModels = assaulter.livingModels();\n    livingModels.forEach(function (model) {\n      model.equipments.forEach(function (eq) {\n        if (eq.range === 0) {\n          attackCount += eq.attacks;\n        }\n      });\n    });\n    if (attackCount >= (target.size())/2){\n      return true;\n    }\n  }\n  return false;\n },\n //si tenes armas de cuerpo a cuerpo con mas ataques que 1 o furiuos o impact(x)\n isMelee: function isMelee(unit){\n   var shootRange = 0;\n   var shootAttacks = 0;\n   var livingModels = unit.livingModels();\n   livingModels.forEach(function (model) {\n       model.equipments.forEach(function (eq) {\n         if (eq.range >= shootRange) {\n           shootRange = eq.range;\n           shootAttacks = eq.attacks;\n         }\n       });\n    });\n    if (shootRange === 0){\n      return true;\n    }\n    livingModels.forEach(function (model) {\n       model.equipments.forEach(function (eq) {\n         if (eq.range === 0 && eq.attacks > shootAttacks) {\n           return true;\n         }\n       });\n    });\n    //FIXME considerar las habilidades\n    /*livingModels.forEach(function (model) {\n         model.equipments.forEach(function (eq) {\n           if (eq.range === 0 && eq.attacks > 1) {\n             if (\"furiuos\" in model.specials || \"impact(x)\" in model.specials){\n               return true;\n             }\n           }\n         });\n    });*/\n    return false;\n  },\n\n // ## Rules /////////////////////////////////////////////////////////////////\n//80\n//-------------------------priority 12 ex16-----------------------------------------\n/* si es la ronda final y voy perdiendo, y paso a perder si matan a unitX,\nsi pueden matar a unitX y van a herirla, si unitX va a herir a unitY2,\ny el coste de X es mayor al de Y2, y el coste de unitX2 es mayor que el de unitX,\ny puede asistir a unitX2 entonces asistir*/\nrule_12A: playerRule(12, function rule_12A(game, player){\n    if (game.round === 3 && !this.winning(game)){\n      var possibleUnits = this.playerPossibleUnits;\n      //[playerArmy, playerUnits, enemyArmy, enemyUnits]\n      var units = this.armiesAndUnits(game,player)[1];\n      var enemyUnits = this.livingEnemyUnits(game, player);\n      for (var i = 0; i < possibleUnits.length; i++) {\n        var unitX = possibleUnits[i];\n        var enemyShootableUnits = this.enemyShootableUnits(game, player, unitX);\n        if (this.canBeKilled(game,player,unitX)){\n          for (var j = 0; j < enemyUnits.length; j++) {\n            var unitY = enemyUnits[j];\n            if (this.willWoundShooting(game,unitY,unitX)){\n              for (var j2 = 0; j2 < enemyShootableUnits.length; j2++) {\n                var unitY2 = enemyShootableUnits[j2];\n                if (this.willWoundShooting(game,unitX,unitY2)&&unitX.cost()>unitY2.cost()){\n                  for (var k = 0; k < units.length; k++) {\n                    var unitX2 = units[k];\n                    if (unitX2.cost()>unitX.cost()&&this.canAssist(game,player,unitX,unitX2)){\n                     //console.log(\"rule_12A. assist\");\n                     return this.assist(game,player,unitX,unitX2);\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n return null;\n}),\n/* si es la ronda final y voy perdiendo, y queda activacion ganadora y no paso a perder si matan a unitX,\nsi pueden matar a unitX y van a herirla, si unitX va a herir a unitY2 mas de la mitad asaltando,\ny el coste de X es mayor al de Y2, y unitX no puede escapar, entonces asaltar a unitY2, */\nrule_12B: playerRule(12, function rule_12B(game, player){\n    if (game.round === 3 && !this.winning(game) && this.winningActivation(game,player)){\n      var possibleUnits = this.playerPossibleUnits;\n      //[playerArmy, playerUnits, enemyArmy, enemyUnits]\n      var units = this.armiesAndUnits(game,player)[1];\n      var enemyUnits = this.livingEnemyUnits(game, player);\n      for (var i = 0; i < possibleUnits.length; i++) {\n        var unitX = possibleUnits[i];\n        var enemyAssaultableUnits = this.enemyAssaultableUnits(game, player, unitX);\n        if (this.canBeKilled(game,player,unitX)&&!this.canScape(game,player,unitX)){\n          for (var j = 0; j < enemyUnits.length; j++) {\n            var unitY = enemyUnits[j];\n            if (this.willWoundShooting(game,unitY,unitX)){\n              for (var j2 = 0; j2 < enemyAssaultableUnits.length; j2++) {\n                var unitY2 = enemyAssaultableUnits[j2];\n                if (this.willWoundHalfAssaulting(game,unitX,unitY2)&&unitX.cost()>unitY2.cost()){\n                   //console.log(\"rule_12B. assault\");\n                   return this.assault(unitX,unitY2);\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n return null;\n}),\n/* si es la ronda final y voy perdiendo, y queda activacion ganadora y no paso a perder si matan a unitX,\nsi pueden matar a unitX y van a herirla, si unitX va a herir a unitY2 mas de la mitad asaltando,\ny el coste de X es mayor al de Y2, y unitX puede escapar, entonces escapa,*/\nrule_12C: playerRule(12, function rule_12C(game, player){\n    if (game.round === 3 && !this.winning(game) && this.winningActivation(game,player)){\n      var possibleUnits = this.playerPossibleUnits;\n      //[playerArmy, playerUnits, enemyArmy, enemyUnits]\n      var units = this.armiesAndUnits(game,player)[1];\n      var enemyUnits = this.livingEnemyUnits(game, player);\n      for (var i = 0; i < possibleUnits.length; i++) {\n        var unitX = possibleUnits[i];\n        var enemyAssaultableUnits = this.enemyAssaultableUnits(game, player, unitX);\n        if (this.canBeKilled(game,player,unitX)&&this.canScape(game,player,unitX)){\n          for (var j = 0; j < enemyUnits.length; j++) {\n            var unitY = enemyUnits[j];\n            if (this.willWoundShooting(game,unitY,unitX)){\n              for (var j2 = 0; j2 < enemyAssaultableUnits.length; j2++) {\n                var unitY2 = enemyAssaultableUnits[j2];\n                if (this.willWoundHalfAssaulting(game,unitX,unitY2)&&unitX.cost()>unitY2.cost()){\n                   //console.log(\"rule_12C. scape\");\n                   return this.scape(game,player,unitX);\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n return null;\n}),\n/* si es la ronda final y voy perdiendo, y queda una activacion ganadora\n si pueden matar a unitX y van a herirla, si unitX puede matar y va a herir,\n si el costo de unitX es mayor al del que puede mata,\n y la unitX no puede escapar entonces entonces ataca a unitY2*/\nrule_12D: playerRule(12, function rule_12D(game, player){\n    if (game.round === 3 && !this.winning(game) && this.winningActivation(game,player)){\n      var possibleUnits = this.playerPossibleUnits;\n      //[playerArmy, playerUnits, enemyArmy, enemyUnits]\n      var units = this.armiesAndUnits(game,player)[1];\n      var enemyUnits = this.livingEnemyUnits(game, player);\n      for (var i = 0; i < possibleUnits.length; i++) {\n        var unitX = possibleUnits[i];\n        var enemyShootableUnits = this.enemyShootableUnits(game, player, unitX);\n        if (this.canBeKilled(game,player,unitX)&&!this.canScape(game,player,unitX)){\n          for (var j = 0; j < enemyUnits.length; j++) {\n            var unitY = enemyUnits[j];\n            if (this.willWoundShooting(game,unitY,unitX)){\n              for (var j2 = 0; j2 < enemyShootableUnits.length; j2++) {\n                var unitY2 = enemyShootableUnits[j2];\n                if (this.willWoundShooting(game,unitX,unitY2)&&this.canKill(game,unitX,unitY2)&&unitX.cost()>unitY2.cost()){\n                   //console.log(\"rule_12D. shoot\");\n                   return this.shoot(unitX,unitY2);\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n return null;\n}),\n//-------------------------priority 11 ex15-----------------------------------------\n/* si es la ronda final y voy perdiendo,\nsi pueden matar a unitX y van a herirla, si unitX va a herir a unitY2 mas de la mitad asaltando,\ny el coste de X es mayor al de Y2, y unitX puede escapar, entonces escapa,*/\nrule_11A: playerRule(11, function rule_11A(game, player){\n    if (game.round === 3 && !this.winning(game)){\n      var possibleUnits = this.playerPossibleUnits;\n      //[playerArmy, playerUnits, enemyArmy, enemyUnits]\n      var units = this.armiesAndUnits(game,player)[1];\n      var enemyUnits = this.livingEnemyUnits(game, player);\n      for (var i = 0; i < possibleUnits.length; i++) {\n        var unitX = possibleUnits[i];\n        var enemyAssaultableUnits = this.enemyAssaultableUnits(game, player, unitX);\n        if (this.canBeKilled(game,player,unitX)&&this.canScape(game,player,unitX)){\n          for (var j = 0; j < enemyUnits.length; j++) {\n            var unitY = enemyUnits[j];\n            if (this.willWoundShooting(game,unitY,unitX)){\n              for (var j2 = 0; j2 < enemyAssaultableUnits.length; j2++) {\n                var unitY2 = enemyAssaultableUnits[j2];\n                if (this.willWoundHalfAssaulting(game,unitX,unitY2)&&unitX.cost()>unitY2.cost()){\n                   //console.log(\"rule_11A. scape\");\n                   return this.scape(game,player,unitX);\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n return null;\n}),\n/* si es la ronda final y voy ganando, y queda activacion ganadora,\nsi pueden matar a unitX y van a herirla, si unitX va a herir a unitY2 mas de la mitad asaltando,\ny el coste de X es mayor al de Y2, y unitX puede escapar, entonces escapa,*/\nrule_11B: playerRule(11, function rule_11B(game, player){\n    if (game.round === 3 && this.winning(game) && this.winningActivation(game,player)){\n      var possibleUnits = this.playerPossibleUnits;\n      //[playerArmy, playerUnits, enemyArmy, enemyUnits]\n      var units = this.armiesAndUnits(game,player)[1];\n      var enemyUnits = this.livingEnemyUnits(game, player);\n      for (var i = 0; i < possibleUnits.length; i++) {\n        var unitX = possibleUnits[i];\n        var enemyAssaultableUnits = this.enemyAssaultableUnits(game, player, unitX);\n        if (this.canBeKilled(game,player,unitX)&&this.canScape(game,player,unitX)){\n          for (var j = 0; j < enemyUnits.length; j++) {\n            var unitY = enemyUnits[j];\n            if (this.willWoundShooting(game,unitY,unitX)){\n              for (var j2 = 0; j2 < enemyAssaultableUnits.length; j2++) {\n                var unitY2 = enemyAssaultableUnits[j2];\n                if (this.willWoundHalfAssaulting(game,unitX,unitY2)&&unitX.cost()>unitY2.cost()){\n                   //console.log(\"rule_11B. scape\");\n                   return this.scape(game,player,unitX);\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n return null;\n}),\n/* si es la ronda final y voy ganando, y queda activacion ganadora,\nsi pueden matar a unitX y van a herirla, si unitX va a herir a unitY2 mas de la mitad asaltando,\ny el coste de X es mayor al de Y2, y no unitX puede escapar, entonces asalta a Y2,*/\nrule_11C: playerRule(11, function rule_11C(game, player){\n    if (game.round === 3 && this.winning(game) && this.winningActivation(game,player)){\n      var possibleUnits = this.playerPossibleUnits;\n      //[playerArmy, playerUnits, enemyArmy, enemyUnits]\n      var units = this.armiesAndUnits(game,player)[1];\n      var enemyUnits = this.livingEnemyUnits(game, player);\n      for (var i = 0; i < possibleUnits.length; i++) {\n        var unitX = possibleUnits[i];\n        var enemyAssaultableUnits = this.enemyAssaultableUnits(game, player, unitX);\n        if (this.canBeKilled(game,player,unitX)&&!this.canScape(game,player,unitX)){\n          for (var j = 0; j < enemyUnits.length; j++) {\n            var unitY = enemyUnits[j];\n            if (this.willWoundShooting(game,unitY,unitX)){\n              for (var j2 = 0; j2 < enemyAssaultableUnits.length; j2++) {\n                var unitY2 = enemyAssaultableUnits[j2];\n                if (this.willWoundHalfAssaulting(game,unitX,unitY2)&&unitX.cost()>unitY2.cost()){\n                   //console.log(\"rule_11C. assault\");\n                   return this.assault(unitX,unitY2);\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n return null;\n}),\n/* si es la ronda final y voy perdiendo, y no queda activacion ganadora y no paso a perder si matan a unitX,\nsi pueden matar a unitX y van a herirla, si unitX va a herir a unitY2 mas de la mitad asaltando,\ny el coste de X es mayor al de Y2, entonces asalta,*/\nrule_11D: playerRule(11, function rule_11D(game, player){\n    if (game.round === 3 && this.winning(game) && this.winningActivation(game,player)){\n      var possibleUnits = this.playerPossibleUnits;\n      //[playerArmy, playerUnits, enemyArmy, enemyUnits]\n      var units = this.armiesAndUnits(game,player)[1];\n      var enemyUnits = this.livingEnemyUnits(game, player);\n      for (var i = 0; i < possibleUnits.length; i++) {\n        var unitX = possibleUnits[i];\n        var enemyAssaultableUnits = this.enemyAssaultableUnits(game, player, unitX);\n        if (this.canBeKilled(game,player,unitX)&&!this.losingGameByUnitElimination(game,unitX)){\n          for (var j = 0; j < enemyUnits.length; j++) {\n            var unitY = enemyUnits[j];\n            if (this.willWoundShooting(game,unitY,unitX)){\n              for (var j2 = 0; j2 < enemyAssaultableUnits.length; j2++) {\n                var unitY2 = enemyAssaultableUnits[j2];\n                if (this.willWoundHalfAssaulting(game,unitX,unitY2)&&unitX.cost()>unitY2.cost()){\n                   //console.log(\"rule_11D. assault\");\n                   return this.assault(unitX,unitY2);\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n return null;\n}),\n//-------------------------priority 10 ex12-----------------------------------------\n/*si ronda = 1 y this.unitIsStrongest(enemyUnits,unitY) y this.willWoundHalfAssaulting(game,unitX,unitY)\ny this.isMelee(unitX) entonces this.assault(unitX,unitY)*/\nrule_10A: playerRule(1000000, function rule_10A(game, player){\n  if (game.round === 1){\n    var possibleUnits = this.playerPossibleUnits;\n    for (var i = 0; i < possibleUnits.length; i++) {\n      var unitX = possibleUnits[i];\n      var enemyAssaultableUnits = this.enemyAssaultableUnits(game, player, unitX);\n      if (this.isMelee(unitX)){\n        for (var j=0; j<enemyAssaultableUnits.length; j++){\n          var unitY = enemyAssaultableUnits[j];\n          if (this.unitIsStrongest(enemyAssaultableUnits,unitY)&&this.willWoundHalfAssaulting(game,unitX,unitY)){\n             //console.log(\"rule_10A. assault\");\n             return this.assault(unitX,unitY);\n          }\n        }\n      }\n    }\n  }\n return null;\n}),\n/*si ronda = 2 y this.unitIsStrongest(enemyUnits,unitY) y this.willWoundHalfAssaulting(game,unitX,unitY)\ny this.isMelee(unitX) entonces this.assault(unitX,unitY)*/\nrule_10B: playerRule(10, function rule_10B(game, player){\n  if (game.round === 2){\n    var possibleUnits = this.playerPossibleUnits;\n    for (var i = 0; i < possibleUnits.length; i++) {\n      var unitX = possibleUnits[i];\n      var enemyAssaultableUnits = this.enemyAssaultableUnits(game, player, unitX);\n      if (this.isMelee(unitX)){\n        for (var j=0; j<enemyAssaultableUnits.length; j++){\n          var unitY = enemyAssaultableUnits[j];\n          if (this.unitIsStrongest(enemyAssaultableUnits,unitY)&&this.willWoundHalfAssaulting(game,unitX,unitY)){\n             //console.log(\"rule_10B. assault\");\n             return this.assault(unitX,unitY);\n          }\n        }\n      }\n    }\n  }\n return null;\n}),\n//70\n\n//-------------------------priority 9 ex11-----------------------------------------\n/*si ronda = 2 y this.easiestToKill(enemyUnits,unitY) y\nthis.willWoundHalfAssaulting(game,unitX,unitY)\nentonces this.assault(unitX,unitY)*/\nrule_9A: playerRule(9, function rule_9A(game, player){\n  if (game.round === 2){\n    var possibleUnits = this.playerPossibleUnits;\n    for (var i = 0; i < possibleUnits.length; i++) {\n      var unitX = possibleUnits[i];\n      var enemyAssaultableUnits = this.enemyAssaultableUnits(game, player, unitX);\n      for (var j=0; j<enemyAssaultableUnits.length; j++){\n        var unitY = enemyAssaultableUnits[j];\n        if (this.easiestToKill(enemyAssaultableUnits,unitY)&&this.willWoundHalfAssaulting(game,unitX,unitY)){\n           //console.log(\"rule_11A. assault\");\n           return this.assault(unitX,unitY);\n        }\n      }\n    }\n  }\n return null;\n}),\n/*si ronda = 1 y this.easiestToKill(enemyUnits,unitY) y this.willWoundHalfAssaulting(game,unitX,unitY)\nentonces this.assault(unitX,unitY)*/\nrule_9B: playerRule(9, function rule_9B(game, player){\n  if (game.round === 1){\n    var possibleUnits = this.playerPossibleUnits;\n    for (var i = 0; i < possibleUnits.length; i++) {\n      var unitX = possibleUnits[i];\n      var enemyAssaultableUnits = this.enemyAssaultableUnits(game, player, unitX);\n      for (var j=0; j<enemyAssaultableUnits.length; j++){\n        var unitY = enemyAssaultableUnits[j];\n        if (this.easiestToKill(enemyAssaultableUnits,unitY)&&this.willWoundHalfAssaulting(game,unitX,unitY)){\n           //console.log(\"rule_9B. assault\");\n           return this.assault(unitX,unitY);\n        }\n      }\n    }\n  }\n return null;\n}),\n\n//-------------------------priority 8-----------------------------------------\n/*si ronda = 3 y !this.canBeKilled(game,player,unitX) y this.winning(game) y\nunitX2.cost()>unitX.cost() y !this.canAssist(game,player,unitX,unitX2) y\nthis.willKillShooting(game,unitX,unitY) y unitY.cost() === this.mostExpensiveUnit(enemyUnits).cost()\nentonces this.shoot(unitX,unitY)*/\nrule_8A: playerRule(8, function rule_8A(game, player){\n  if (game.round === 3&&this.winning(game)){\n    var possibleUnits = this.playerPossibleUnits;\n    //[playerArmy, playerUnits, enemyArmy, enemyUnits]\n    var units = this.armiesAndUnits(game,player)[1];\n    for (var i = 0; i < possibleUnits.length; i++) {\n      var unitX = possibleUnits[i];\n      var enemyShootableUnits = this.enemyShootableUnits(game, player, unitX);\n      if (!this.canBeKilled(game,player,unitX)){\n        for (var k=0; k<units.length;k++){\n          var unitX2 = units[k];\n          if (unitX2.cost()>unitX.cost()&&!this.canAssist(game,player,unitX,unitX2)){\n            for (var j=0; j<enemyShootableUnits.length; j++){\n              var unitY = enemyShootableUnits[j];\n              if (this.willKillShooting(game,unitX,unitY)&&unitY.cost()===this.mostExpensiveUnit(enemyShootableUnits).cost()){\n                 //console.log(\"rule_8A. shoot\");\n                 return this.shoot(unitX,unitY);\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n return null;\n}),\n/*si ronda = 3 y this.canKill(game,unitY,unitX) y this.willWoundShooting(game,unitY,unitX) y\nthis.willWoundShooting(game,unitX,unitY2) y unitX.cost()<unitY2.cost() y this.winning(game)\n y entonces this.shoot(unitX,unitY2)*/\nrule_8B: playerRule(8, function rule_8B(game, player){\n  if (game.round === 3 && this.winning(game)){\n    var possibleUnits = this.playerPossibleUnits;\n    //[playerArmy, playerUnits, enemyArmy, enemyUnits]\n    var units = this.armiesAndUnits(game,player)[1];\n    var enemyUnits = this.livingEnemyUnits(game,player);\n    for (var i = 0; i < possibleUnits.length; i++) {\n      var unitX = possibleUnits[i];\n      var enemyShootableUnits = this.enemyShootableUnits(game, player, unitX);\n      if (this.canBeKilled(game,player,unitX)){\n        for (var k=0; k<enemyUnits.length;k++){\n          var unitY2 = enemyUnits[k];\n          if (unitX.cost()<unitY2.cost()&&this.canKill(game,unitX,unitY2)&&this.willWoundShooting(game,unitX,unitY2)){\n            for (var j=0; j<enemyShootableUnits.length; j++){\n              var unitY = enemyShootableUnits[j];\n              if (this.willWoundShooting(game,unitY,unitX)){\n                 //console.log(\"rule_8B. shoot\");\n                 return this.shoot(unitX,unitY2);\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n return null;\n}),\n/*si ronda = 3 y this.canKill(game,unitY,unitX) y this.willWoundShooting(game,unitY,unitX) y\nthis.willWoundShooting(game,unitX,unitY2) y unitX.cost()>unitY2.cost() y unitX.cost()<unitX2.cost()\ny this.canAssist(game,player,unitX,unitX2) entonces this.assist(game,player,unitX,unitX2)*/\nrule_8C: playerRule(8, function rule_8C(game, player){\n  if (game.round === 3&&this.winning(game)){\n    var possibleUnits = this.playerPossibleUnits;\n    //[playerArmy, playerUnits, enemyArmy, enemyUnits]\n    var units = this.armiesAndUnits(game,player)[1];\n    var enemyUnits = this.livingEnemyUnits(game,player);\n    for (var i = 0; i < possibleUnits.length; i++) {\n      var unitX = possibleUnits[i];\n      var enemyShootableUnits = this.enemyShootableUnits(game, player, unitX);\n      if (this.canBeKilled(game,player,unitX)){\n        for (var k=0; k<units.length;k++){\n          var unitX2 = units[k];\n          if (unitX.cost()<unitX2.cost()&&this.canAssist(game,player,unitX,unitX2)){\n            for (var j=0; j<enemyUnits.length; j++){\n              var unitY = enemyUnits[j];\n              if (this.willWoundShooting(game,unitY,unitX)){\n                for (var j2=0; j2<enemyShootableUnits.length; j2++){\n                  var unitY2 = enemyShootableUnits[j2];\n                  if (this.willWoundShooting(game,unitX,unitY2)&&unitX.cost()>unitY2.cost()){\n                    //console.log(\"rule_8C. assist\");\n                    return this.assist(game,player,unitX,unitX2);\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n return null;\n}),\n//-------------------------priority 7-----------------------------------------\n/*si ronda = 3 y !this.canBeKilled(game,player,unitX) y unitX2.cost()>unitX.cost()\ny this.canWound(game,unitX,unitY) y this.easiestToKill(enemyUnits,unitY) entonces this.shoot(unitX,unitY)*/\nrule_7A: playerRule(7, function rule_7A(game, player){\n  if (game.round === 3){\n    var possibleUnits = this.playerPossibleUnits;\n    //[playerArmy, playerUnits, enemyArmy, enemyUnits]\n    var units = this.armiesAndUnits(game,player)[1];\n    for (var i = 0; i < possibleUnits.length; i++) {\n      var unitX = possibleUnits[i];\n      if (!this.canBeKilled(game,player,unitX)){\n        for (var k=0; k<units.length;k++){\n          var unitX2 = units[k];\n          if (unitX2.cost()>unitX.cost()){\n            var enemyShootableUnits = this.enemyShootableUnits(game, player, unitX);\n            for (var j = 0; j < enemyShootableUnits.length; j++) {\n              var unitY = enemyShootableUnits[j];\n              if (this.easiestToKill(enemyShootableUnits,unitY)&&this.canWound(game,unitX,unitY)){\n                 //console.log(\"rule_7A. shoot\");\n                 return this.shoot(unitX,unitY);\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n return null;\n}),\n/*si ronda = 3 y this.canKill(game,unitY,unitX) y this.willWoundShooting(game,unitY,unitX)\ny puntaje(unidadY2) = maxEnemigos y this.canKill(game,unitX,unitY2) y\nthis.willWoundShooting(game,unitX,unitY2) entonces this.shoot(unitX,unitY2)*/\nrule_7B: playerRule(7, function rule_7B(game, player){\n  if (game.round === 3){\n    var possibleUnits = this.playerPossibleUnits;\n    //[playerArmy, playerUnits, enemyArmy, enemyUnits]\n    var units = this.armiesAndUnits(game,player)[1];\n    var enemyUnits = this.livingEnemyUnits(game,player);\n    for (var i = 0; i < possibleUnits.length; i++) {\n      var unitX = possibleUnits[i];\n      if (this.canBeKilled(game,player,unitX)){\n        var enemyShootableUnits = this.enemyShootableUnits(game, player, unitX);\n        for (var k=0; k<enemyShootableUnits.length;k++){\n          var unitY2 = enemyShootableUnits[k];\n          if (unitY2.cost()===this.mostExpensiveUnit(enemyUnits).cost()&&this.canKill(game,unitX,unitY2)&&this.willWoundShooting(game,unitX,unitY2)){\n            for (var j=0; j<enemyUnits.length; j++){\n              var unitY = enemyUnits[j];\n              if (this.willWoundShooting(game,unitY,unitX)){\n                 //console.log(\"rule_7B. shoot\");\n                 return this.shoot(unitX,unitY2);\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n return null;\n}),\n/*si ronda = 3 y this.canKill(game,unitY,unitX) y this.willWoundShooting(game,unitY,unitX) y\nthis.canKill(game,unitX,unitY2) y this.willWoundShooting(game,unitX,unitY2) y unitX.cost()<unitY2.cost()\nentonces this.shoot(unitX,unitY2)*/\nrule_7C: playerRule(7, function rule_7C(game, player){\n  if (game.round === 3){\n    var possibleUnits = this.playerPossibleUnits;\n    //[playerArmy, playerUnits, enemyArmy, enemyUnits]\n    var units = this.armiesAndUnits(game,player)[1];\n    var enemyUnits = this.livingEnemyUnits(game,player);\n    for (var i = 0; i < possibleUnits.length; i++) {\n      var unitX = possibleUnits[i];\n      if (this.canBeKilled(game,player,unitX)){\n        var enemyShootableUnits = this.enemyShootableUnits(game, player, unitX);\n        for (var k=0; k<enemyShootableUnits.length;k++){\n          var unitY2 = enemyShootableUnits[k];\n          if (unitX.cost()<unitY2.cost()&&this.canKill(game,unitX,unitY2)&&this.willWoundShooting(game,unitX,unitY2)){\n            for (var j=0; j<enemyUnits.length; j++){\n              var unitY = enemyUnits[j];\n              if (this.willWoundShooting(game,unitY,unitX)){\n                 //console.log(\"rule_7C. shoot\");\n                 return this.shoot(unitX,unitY2);\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n return null;\n}),\n/*si ronda = 3 y this.canKill(game,unitY,unitX) y this.willWoundShooting(game,unitY,unitX) y\nthis.willWoundShooting(game,unitX,unitY2) y unitX.cost()<unitY2.cost() y !this.winning(game)\nentonces this.shoot(unitX,unitY2)*/\nrule_7D: playerRule(7, function rule_7D(game, player){\n  if (game.round === 3 && !this.winning(game)){\n    var possibleUnits = this.playerPossibleUnits;\n    //[playerArmy, playerUnits, enemyArmy, enemyUnits]\n    var units = this.armiesAndUnits(game,player)[1];\n    var enemyUnits = this.livingEnemyUnits(game,player);\n    for (var i = 0; i < possibleUnits.length; i++) {\n      var unitX = possibleUnits[i];\n      if (this.canBeKilled(game,player,unitX)){\n        for (var k=0; k<enemyUnits.length;k++){\n          var unitY2 = enemyUnits[k];\n          if (unitX.cost()<unitY2.cost()&&this.willWoundShooting(game,unitX,unitY2)){\n            var enemyShootableUnits = this.enemyShootableUnits(game, player, unitX);\n            for (var j = 0; j < enemyShootableUnits.length; j++) {\n              var unitY = enemyShootableUnits[j];\n              if (this.willWoundShooting(game,unitY,unitX)){\n                 //console.log(\"rule_7D. shoot\");\n                 return this.shoot(unitX,unitY2);\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n return null;\n}),\n/*si ronda = 3 y this.canKill(game,unitY,unitX) y this.willWoundShooting(game,unitY,unitX) y\n!this.willWoundShooting(game,unitX,unitY2) y puntaje(unidadX) <puntaje(unidadX2)\ny this.canAssist(game,player,unitX,unitX2) entonces this.assist(game,player,unitX,unitX2)*/\nrule_7E: playerRule(7, function rule_7E(game, player){\n  if (game.round === 3){\n    var possibleUnits = this.playerPossibleUnits;\n    for (var i = 0; i < possibleUnits.length; i++) {\n      var unitX = possibleUnits[i];\n      var enemyShootableUnits = this.enemyShootableUnits(game, player, unitX);\n      if (this.canBeKilled(game,player,unitX)){\n        for (var k=0; k<enemyShootableUnits.length;k++){\n          var unitY2 = enemyShootableUnits[k];\n          if (!this.willWoundShooting(game,unitX,unitY2)){\n            for (var j = 0; j < enemyShootableUnits.length; j++) {\n              var unitY = enemyShootableUnits[j];\n              if (this.willWoundShooting(game,unitY,unitX)){\n                for (var h=0;h<possibleUnits.length;h++){\n                  var unitX2 = possibleUnits[h];\n                  if (unitX.cost()<unitX2.cost()&&this.canAssist(game,player,unitX,unitX2)){\n                    //console.log(\"rule_7E. assist\");\n                    return this.assist(game,player,unitX,unitX2);\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n return null;\n}),\n//60\n/*si ronda = 3 y this.canKill(game,unitY,unitX) y this.willWoundShooting(game,unitY,unitX) y\n!this.willWoundShooting(game,unitX,unitY2) y unitX.cost()<unitX2.cost()\ny !this.canAssist(game,player,unitX,unitX2) y\npuede escapar unitX entonces this.scape(game,player,unitX)*/\nrule_7F: playerRule(7, function rule_7F(game, player){\n  if (game.round === 3){\n    var possibleUnits = this.playerPossibleUnits;\n    for (var i = 0; i < possibleUnits.length; i++) {\n      var unitX = possibleUnits[i];\n      var enemyShootableUnits = this.enemyShootableUnits(game, player, unitX);\n      if (this.canBeKilled(game,player,unitX)&&this.canScape(game,player,unitX)){\n        for (var k=0; k<enemyShootableUnits.length;k++){\n          var unitY2 = enemyShootableUnits[k];\n          if (!this.willWoundShooting(game,unitX,unitY2)){\n            for (var j = 0; j < enemyShootableUnits.length; j++) {\n              var unitY = enemyShootableUnits[j];\n              if (this.willWoundShooting(game,unitY,unitX)){\n                for (var h=0;h<possibleUnits.length;h++){\n                  var unitX2 = possibleUnits[h];\n                  if (unitX.cost()<unitX2.cost()&&!this.canAssist(game,player,unitX,unitX2)){\n                    //console.log(\"rule_7F. scape\");\n                    return this.scape(game,player,unitX);\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n return null;\n}),\n//-------------------------priority 6-----------------------------------------\n/*si ronda = 3 y !this.canBeKilled(game,player,unitX) y\ndentro de las que puede matar, disparar a la mas cara*/\nrule_6A: playerRule(6, function rule_6A(game, player){\n  if (game.round === 3){\n    var possibleUnits = this.playerPossibleUnits;\n    for (var i = 0; i < possibleUnits.length; i++) {\n      var unitX = possibleUnits[i];\n      var enemyUnits = this.shootingKillableUnits(game,player,unitX);\n      if (!this.canBeKilled(game,player,unitX)){\n        for (var j=0; j<enemyUnits.length; j++){\n          var unitY = enemyUnits[j];\n          if (unitY.cost()===this.mostExpensiveUnit(enemyUnits).cost()){\n             //console.log(\"rule_6A. shoot\");\n             return this.shoot(unitX,unitY);\n          }\n        }\n      }\n    }\n  }\n return null;\n}),\n/*si ronda = 3 y pueden matar a unitX y van a herirla, y unitX va a herir,\nsi su costo es menor que el del enemigo, entonces disparale*/\nrule_6B: playerRule(6, function rule_6B(game, player){\n  if (game.round === 3){\n    var possibleUnits = this.playerPossibleUnits;\n    for (var i = 0; i < possibleUnits.length; i++) {\n      var unitX = possibleUnits[i];\n      var shootingKillableUnits = this.shootingKillableUnits(game,player,unitX);\n      if (this.canBeKilled(game,player,unitX)){\n        var enemyShootableUnits = this.enemyShootableUnits(game, player, unitX);\n        for (var j = 0; j < enemyShootableUnits.length; j++) {\n          var unitY = enemyShootableUnits[j];\n          if (this.willWoundShooting(game,unitY,unitX)){\n            for (var k=0; k<shootingKillableUnits.length; k++){\n              var unitY2 = shootingKillableUnits[k];\n              if (unitX.cost()>unitY2.cost()&&this.willWoundShooting(game,unitX,unitY2)){\n                 //console.log(\"rule_6B. shoot\");\n                 return this.shoot(unitX,unitY);\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n return null;\n}),\n/*si ronda = 3 y pueden matar a unitX y van a herirla,\nsi puede escapar, entonces escapar*/\nrule_6C: playerRule(6, function rule_6C(game, player){\n  if (game.round === 3){\n    var possibleUnits = this.playerPossibleUnits;\n    for (var i = 0; i < possibleUnits.length; i++) {\n      var unitX = possibleUnits[i];\n      if (this.canBeKilled(game,player,unitX)){\n        var enemyShootableUnits = this.enemyShootableUnits(game, player, unitX);\n        for (var j = 0; j < enemyShootableUnits.length; j++) {\n          var unitY = enemyShootableUnits[j];\n          if (this.willWoundShooting(game,unitY,unitX)){\n            if (this.canScape(game,player,unitX)){\n               //console.log(\"rule_6C. scape\");\n               return this.scape(game,player,unitX);\n            }\n          }\n        }\n      }\n    }\n  }\n return null;\n}),\n//-------------------------priority 5-----------------------------------------\n//si es la ronda 0 y la unidad puede matar disparando, y va a herir >75%, disparar\nrule_5A: playerRule(5, function rule_5A(game, player){\n  if (game.round === 0){\n    var possibleUnits = this.playerPossibleUnits;\n    for (var i = 0; i < possibleUnits.length; i++) {\n      var unitX = possibleUnits[i];\n      var enemyShootableUnits = this.enemyShootableUnits(game, player, unitX);\n      for (var j = 0; j < enemyShootableUnits.length; j++) {\n        var unitY = enemyShootableUnits[j];\n        if (this.canKillShooting(game,unitX,unitY) && this.willWoundALotShooting(game,unitX,unitY)){\n           //console.log(\"rule_5A. shoot\");\n           return this.shoot(unitX,unitY);\n        }\n      }\n    }\n  }\n return null;\n}),\n//si es la ronda 1 y la unidad puede matar disparando, y va a herir >75%, disparar\nrule_5B: playerRule(5, function rule_5B(game, player){\n  if (game.round === 1){\n    var possibleUnits = this.playerPossibleUnits;\n    for (var i = 0; i < possibleUnits.length; i++) {\n      var unitX = possibleUnits[i];\n      var enemyShootableUnits = this.enemyShootableUnits(game, player, unitX);\n      for (var j = 0; j < enemyShootableUnits.length; j++) {\n        var unitY = enemyShootableUnits[j];\n        if (this.canKillShooting(game,unitX,unitY) && this.willWoundALotShooting(game,unitX,unitY)){\n           //console.log(\"rule_5B. shoot\");\n           return this.shoot(unitX,unitY);\n        }\n      }\n    }\n  }\n return null;\n}),\n//i es la ronda 2 y la unidad puede matar disparando, y va a herir >75%, disparar\nrule_5C: playerRule(5, function rule_5C(game, player){\n  if (game.round === 2){\n    var possibleUnits = this.playerPossibleUnits;\n    for (var i = 0; i < possibleUnits.length; i++) {\n      var unitX = possibleUnits[i];\n      var enemyShootableUnits = this.enemyShootableUnits(game, player, unitX);\n      for (var j = 0; j < enemyShootableUnits.length; j++) {\n        var unitY = enemyShootableUnits[j];\n        if (this.canKillShooting(game,unitX,unitY) && this.willWoundALotShooting(game,unitX,unitY)){\n           //console.log(\"rule_5C. shoot\");\n           return this.shoot(unitX,unitY);\n        }\n      }\n    }\n  }\n return null;\n}),\n/*si es la ronda 1 y la unidad esta herida, la pueden matar\ny va a herirla a la que la puede matar, entonces disparar*/\nrule_5D: playerRule(5, function rule_5D(game, player){\n  if (game.round === 1){\n    var possibleUnits = this.playerPossibleUnits;\n    for (var i = 0; i < possibleUnits.length; i++) {\n      var unitX = possibleUnits[i];\n      var enemyShootableUnits = this.enemyShootableUnits(game, player, unitX);\n      for (var j = 0; j < enemyShootableUnits.length; j++) {\n        var unitY = enemyShootableUnits[j];\n        if (this.canKill(game,unitY,unitX) && this.willWoundShooting(game,unitX,unitY)){\n           //console.log(\"rule_5D. shoot\");\n           return this.shoot(unitX,unitY);\n        }\n      }\n    }\n  }\n return null;\n}),\n/*si es la ronda 2 y la unidad esta herida, la pueden matar\ny va a herirla a la que la puede matar, entonces disparar*/\nrule_5E: playerRule(5, function rule_5E(game, player){\n  if (game.round === 2){\n    var possibleUnits = this.playerPossibleUnits;\n    for (var i = 0; i < possibleUnits.length; i++) {\n      var unitX = possibleUnits[i];\n      var enemyShootableUnits = this.enemyShootableUnits(game, player, unitX);\n      for (var j = 0; j < enemyShootableUnits.length; j++) {\n        var unitY = enemyShootableUnits[j];\n        if (this.canKill(game,unitY,unitX) && this.willWoundShooting(game,unitX,unitY)){\n           //console.log(\"rule_5E. shoot\");\n           return this.shoot(unitX,unitY);\n        }\n      }\n    }\n  }\n return null;\n}),\n//si es la ronda 1 y la unidad esta herida, la pueden matar y puede escapar, entonces escapar\nrule_5F: playerRule(5, function rule_5F(game, player){\n  if (game.round === 1){\n    var possibleUnits = this.playerPossibleUnits;\n    for (var i = 0; i < possibleUnits.length; i++) {\n      var unitX = possibleUnits[i];\n      var enemyShootableUnits = this.enemyShootableUnits(game, player, unitX);\n      for (var j = 0; j < enemyShootableUnits.length; j++) {\n        var unitY = enemyShootableUnits[j];\n        if (this.canKill(game,unitY,unitX) && this.canScape(game,player,unitX)){\n           //console.log(\"rule_5F. scape\");\n           return this.scape(game,player,unitX);\n        }\n      }\n    }\n  }\n return null;\n}),\n//si es la ronda 2 y la unidad esta herida, la pueden matar y puede escapar, entonces escapar\nrule_5G: playerRule(5, function rule_5G(game, player){\n  if (game.round === 2){\n    var possibleUnits = this.playerPossibleUnits;\n    for (var i = 0; i < possibleUnits.length; i++) {\n      var unitX = possibleUnits[i];\n      var enemyShootableUnits = this.enemyShootableUnits(game, player, unitX);\n      for (var j = 0; j < enemyShootableUnits.length; j++) {\n        var unitY = enemyShootableUnits[j];\n        if (this.canKill(game,unitY,unitX) && this.canScape(game,player,unitX)){\n           //console.log(\"rule_5G. scape\");\n           return this.scape(game,player,unitX);\n        }\n      }\n    }\n  }\n return null;\n}),\n\n//50\n\n\n //-------------------------priority 4-----------------------------------------\n //si es la ronda 0 y la unidad puede matar disparando, disparar\n rule_4A: playerRule(4, function rule_4A(game, player){\n   if (game.round === 0){\n     var possibleUnits = this.playerPossibleUnits;\n     for (var i = 0; i < possibleUnits.length; i++) {\n       var unitX = possibleUnits[i];\n       var enemyShootableUnits = this.enemyShootableUnits(game, player, unitX);\n       for (var j = 0; j < enemyShootableUnits.length; j++) {\n         var unitY = enemyShootableUnits[j];\n         if (this.canKillShooting(game,unitX,unitY)){\n            //console.log(\"rule_4A. shoot\");\n            return this.shoot(unitX,unitY);\n         }\n       }\n     }\n   }\n  return null;\n }),\n rule_4B: playerRule(4, function rule_4B(game, player){\n   if (game.round === 1){\n     var possibleUnits = this.playerPossibleUnits;\n     for (var i = 0; i < possibleUnits.length; i++) {\n       var unitX = possibleUnits[i];\n       var enemyShootableUnits = this.enemyShootableUnits(game, player, unitX);\n       for (var j = 0; j < enemyShootableUnits.length; j++) {\n         var unitY = enemyShootableUnits[j];\n         if (this.canKillShooting(game,unitX,unitY)){\n            //console.log(\"rule_4B. shoot\");\n            return this.shoot(unitX,unitY);\n         }\n       }\n     }\n   }\n  return null;\n }),\n rule_4C: playerRule(4, function rule_4C(game, player){\n   if (game.round === 2){\n     var possibleUnits = this.playerPossibleUnits;\n     for (var i = 0; i < possibleUnits.length; i++) {\n       var unitX = possibleUnits[i];\n       var enemyShootableUnits = this.enemyShootableUnits(game, player, unitX);\n       for (var j = 0; j < enemyShootableUnits.length; j++) {\n         var unitY = enemyShootableUnits[j];\n         if (this.canKillShooting(game,unitX,unitY)){\n            //console.log(\"rule_4C. shoot\");\n            return this.shoot(unitX,unitY);\n         }\n       }\n     }\n   }\n  return null;\n }),\n /*si es ultima ronda, va ganando, no pueden matar a unitX, hay una unidad aliada unitX2\n  que cuesta mas que unitX, y unitX puede asistirla, hacerlo*/\n rule_4D: playerRule(4, function rule_4D(game, player){\n     if (game.round === 3 && this.winning(game)){\n       var possibleUnits = this.playerPossibleUnits;\n       //[playerArmy, playerUnits, enemyArmy, enemyUnits]\n       var units = this.armiesAndUnits(game,player)[1];\n       for (var i = 0; i < possibleUnits.length; i++) {\n         var unitX = possibleUnits[i];\n         if (!this.canBeKilled(game,player,unitX)){\n           for (var k = 0; k < units.length; k++) {\n             var unitX2 = units[k];\n             if (unitX2.cost()>unitX.cost()&&this.canAssist(game,player,unitX,unitX2)){\n              //console.log(\"rule_4D. assist\");\n              return this.assist(game,player,unitX,unitX2);\n             }\n           }\n         }\n       }\n     }\n  return null;\n }),\n /*si es ultima ronda, va ganando, no pueden matar a unitX, hay una unidad aliada unitX2\nque cuesta mas, que unitX no puede asistirla, dentro de las unidades heridas enemigas,\ndisparar a la mas facil de matar*/\n rule_4E: playerRule(4, function rule_4E(game, player){\n   if (game.round === 3 && this.winning(game)){\n     var possibleUnits = this.playerPossibleUnits;\n     //[playerArmy, playerUnits, enemyArmy, enemyUnits]\n     var units = this.armiesAndUnits(game,player)[1];\n     for (var i = 0; i < possibleUnits.length; i++) {\n       var unitX = possibleUnits[i];\n       if (!this.canBeKilled(game,player,unitX)){\n         var enemyShootableUnits = this.enemyShootableUnits(game, player, unitX);\n         for (var j = 0; j < enemyShootableUnits.length; j++) {\n           var unitY = enemyShootableUnits[j];\n           if (this.canWound(game,unitX,unitY) && this.easiestToKill(enemyShootableUnits,unitY)){\n             for (var k = 0; k < units.length; k++) {\n               var unitX2 = units[k];\n               if (unitX2.cost()>unitX.cost()&&!this.canAssist(game,player,unitX,unitX2)){\n                  //console.log(\"rule_4E. shoot\");\n                  return this.shoot(unitX,unitY);\n               }\n             }\n           }\n         }\n       }\n     }\n   }\n  return null;\n }),\n\n\n //-------------------------priority 3-----------------------------------------\n   //si es la ronda 0 y la unidad es sniper, disparar a la mas fuerte\n   rule_3A: playerRule(3, function rule_3A(game, player){\n     if (game.round === 0){\n       var possibleUnits = this.playerPossibleUnits;\n       for (var i = 0; i < possibleUnits.length; i++) {\n         var unitX = possibleUnits[i];\n         var enemyShootableUnits = this.enemyShootableUnits(game, player, unitX);\n         for (var j = 0; j < enemyShootableUnits.length; j++) {\n           var unitY = enemyShootableUnits[j];\n           if (this.classification(unitX)===\"sniper\" && this.unitIsStrongest(enemyShootableUnits,unitY)){\n              //console.log(\"rule_3A. shoot\");\n              return this.shoot(unitX,unitY);\n           }\n         }\n       }\n     }\n    return null;\n   }),\n   //si es la ronda 0 y la q tiene mayor rango, disparar a la mas fuerte\n   rule_3B: playerRule(3, function rule_3B(game, player){\n     if (game.round === 0){\n       var possibleUnits = this.playerPossibleUnits;\n       for (var i = 0; i < possibleUnits.length; i++) {\n         var unitX = possibleUnits[i];\n         var enemyShootableUnits = this.enemyShootableUnits(game, player, unitX);\n         for (var j = 0; j < enemyShootableUnits.length; j++) {\n           var unitY = enemyShootableUnits[j];\n           if (this.maxRangeInUnits(possibleUnits,unitX) && this.unitIsStrongest(enemyShootableUnits,unitY)){\n              //console.log(\"rule_3B. shoot\");\n              return this.shoot(unitX,unitY);\n           }\n         }\n       }\n     }\n    return null;\n   }),\n   //si es la ronda 0, si hay una unidad aliada herida y puede asistirla, asistirla\n   rule_3C: playerRule(3, function rule_3C(game, player){\n     if (game.round === 0){\n       var possibleUnits = this.playerPossibleUnits;\n       //[playerArmy, playerUnits, enemyArmy, enemyUnits]\n       var units = this.armiesAndUnits(game,player)[1];\n       for (var i = 0; i < possibleUnits.length; i++) {\n         var unitX = possibleUnits[i];\n         for (var j = 0; j < units.length; j++) {\n           var unitX2 = units[j];\n           if (this.wounded(unitX2) && this.canAssist(game,player,unitX,unitX2)){\n              //console.log(\"rule_3C. assist\");\n              return this.assist(game,player,unitX,unitX2);\n           }\n         }\n       }\n     }\n    return null;\n   }),\n   //si es la ronda 1, si hay una unidad aliada herida y puede asistirla, asistirla\n   rule_3D: playerRule(3, function rule_3D(game, player){\n     if (game.round === 1){\n       var possibleUnits = this.playerPossibleUnits;\n       //[playerArmy, playerUnits, enemyArmy, enemyUnits]\n       var units = this.armiesAndUnits(game,player)[1];\n       for (var i = 0; i < possibleUnits.length; i++) {\n         var unitX = possibleUnits[i];\n         for (var j = 0; j < units.length; j++) {\n           var unitX2 = units[j];\n           if (this.wounded(unitX2) && this.canAssist(game,player,unitX,unitX2)){\n              //console.log(\"rule_3D. assist\");\n              return this.assist(game,player,unitX,unitX2);\n           }\n         }\n       }\n     }\n    return null;\n   }),\n   //si es la ronda 2, si hay una unidad aliada herida y puede asistirla, asistirla\n   rule_3E: playerRule(3, function rule_3E(game, player){\n     if (game.round === 2){\n       var possibleUnits = this.playerPossibleUnits;\n       //[playerArmy, playerUnits, enemyArmy, enemyUnits]\n       var units = this.armiesAndUnits(game,player)[1];\n       for (var i = 0; i < possibleUnits.length; i++) {\n         var unitX = possibleUnits[i];\n         for (var j = 0; j < units.length; j++) {\n           var unitX2 = units[j];\n           if (this.wounded(unitX2) && this.canAssist(game,player,unitX,unitX2)){\n             //console.log(\"rule_3E. assist\");\n              return this.assist(game,player,unitX,unitX2);\n           }\n         }\n       }\n     }\n    return null;\n   }),\n   //40\n/*en la ronda 3, si hay una unidad aliada que cueste mas que unitX y puede asistirla,\n   y no pueden matar a unitX, entonces asistir a la aliada*/\n   rule_3F: playerRule(3, function rule_F(game, player){\n     if (game.round === 3){\n       var possibleUnits = this.playerPossibleUnits;\n       var enemyUnits = this.livingEnemyUnits(game, player);\n       //[playerArmy, playerUnits, enemyArmy, enemyUnits]\n       var units = this.armiesAndUnits(game,player)[1];\n       for (var i = 0; i < possibleUnits.length; i++) {\n         var unitX = possibleUnits[i];\n         for (var j = 0; j < units.length; j++) {\n           var unitX2 = units[j];\n           if (unitX2.cost()>unitX.cost() && this.canAssist(game,player,unitX,unitX2)){\n             for (var k=0; k<enemyUnits.length;k++){\n               var unitY = enemyUnits[k];\n               if(!this.canKill(game,unitY,unitX)){\n                 //console.log(\"rule_3F. assist\");\n                 return this.assist(game,player,unitX,unitX2);\n               }\n             }\n           }\n         }\n       }\n     }\n    return null;\n   }),\n   //si es la ronda 0 y hay al menos 2 unidades enemigas vivas, disparar a la mas cara\n   rule_3G: playerRule(3, function rule_3G(game, player){\n     var possibleUnits = this.playerPossibleUnits;\n     if (game.round === 0){\n       for (var i = 0; i < possibleUnits.length; i++) {\n         var unitX = possibleUnits[i];\n         var enemyShootableUnits = this.enemyShootableUnits(game, player, unitX);\n         if (enemyShootableUnits.length > 1){\n         for (var j = 0; j < enemyShootableUnits.length; j++) {\n           var unitY = enemyShootableUnits[j];\n             if (unitY.cost() === this.mostExpensiveUnit(enemyShootableUnits).cost()){\n               //console.log(\"rule_3G. shoot\");\n               return this.shoot(unitX,unitY);\n             }\n           }\n         }\n       }\n     }\n     return null;\n   }),\n/*si ronda = 2 y cantidad(unitX2) < cantidadInicial(unitX2) y\n   puedeAsistir(unitX a unitX2) entonces asiste(unitX a unitX2)*/\nrule_3H: playerRule(3, function rule_3H(game, player){\n  if (game.round === 2){\n    var possibleUnits = this.playerPossibleUnits;\n    //[playerArmy, playerUnits, enemyArmy, enemyUnits]\n    var units = this.armiesAndUnits(game,player)[1];\n    for (var i = 0; i < possibleUnits.length; i++) {\n      var unitX = possibleUnits[i];\n      for (var j = 0; j < units.length; j++) {\n        var unitX2 = units[j];\n        if (unitX2.livingModels().length<unitX2.size() && this.canAssist(game,player,unitX,unitX2)){\n          //console.log(\"rule_3H. assist\");\n           return this.assist(game,player,unitX,unitX2);\n        }\n      }\n    }\n  }\n return null;\n}),\n/*si ronda = 1 y cantidad(unitX2) < cantidadInicial(unitX2) y\npuedeAsistir(unitX a unitX2) entonces asiste(unitX a unitX2)*/\nrule_3I: playerRule(3, function rule_3I(game, player){\n  if (game.round === 1){\n    var possibleUnits = this.playerPossibleUnits;\n    //[playerArmy, playerUnits, enemyArmy, enemyUnits]\n    var units = this.armiesAndUnits(game,player)[1];\n    for (var i = 0; i < possibleUnits.length; i++) {\n      var unitX = possibleUnits[i];\n      for (var j = 0; j < units.length; j++) {\n        var unitX2 = units[j];\n        if (unitX2.livingModels().length<unitX2.size() && this.canAssist(game,player,unitX,unitX2)){\n           //console.log(\"rule_3I. assist\");\n           return this.assist(game,player,unitX,unitX2);\n        }\n      }\n    }\n  }\n return null;\n}),\n/*si ronda = 0 y cantidad(unitX2) < cantidadInicial(unitX2) y\npuedeAsistir(unitX a unitX2) entonces asiste(unitX a unitX2)*/\nrule_3J: playerRule(3, function rule_3J(game, player){\n  if (game.round === 0){\n    var possibleUnits = this.playerPossibleUnits;\n    //[playerArmy, playerUnits, enemyArmy, enemyUnits]\n    var units = this.armiesAndUnits(game,player)[1];\n    for (var i = 0; i < possibleUnits.length; i++) {\n      var unitX = possibleUnits[i];\n      for (var j = 0; j < units.length; j++) {\n        var unitX2 = units[j];\n        if (unitX2.livingModels().length<unitX2.size() && this.canAssist(game,player,unitX,unitX2)){\n          //console.log(\"rule_3J. assist\");\n          return this.assist(game,player,unitX,unitX2);\n        }\n      }\n    }\n  }\n return null;\n}),\n/*si ronda = 0 y fuerza(unidadY) = maxEnemigos y puedeAtacarSinCaminar(unitX a\nunidadY) entonces dispara(unitX a unidadY)*/\nrule_3K: playerRule(3, function rule_3K(game, player){\n  if (game.round === 0){\n    var possibleUnits = this.playerPossibleUnits;\n    for (var i = 0; i < possibleUnits.length; i++) {\n      var unitX = possibleUnits[i];\n      var enemyShootableUnits = this.enemyShootableUnits(game, player, unitX);\n      for (var j = 0; j < enemyShootableUnits.length; j++) {\n        var unitY = enemyShootableUnits[j];\n          if (this.canShoot_(game,unitX,unitY,false) && this.unitIsStrongest(enemyShootableUnits,unitY)){\n           //console.log(\"rule_3K. shoot\");\n           return this.shoot(unitX,unitY);\n        }\n      }\n    }\n  }\n return null;\n}),\n/*Si es la primer ronda, la unitX va a herir a la unidad más fuerte enemiga si le dispara,\n entonces dispararle.*/\nrule_3L: playerRule(3, function rule_3L(game, player){\n  if (game.round === 0){\n    var possibleUnits = this.playerPossibleUnits;\n    //[playerArmy, playerUnits, enemyArmy, enemyUnits]\n    var units = this.armiesAndUnits(game,player)[1].concat(this.armiesAndUnits(game,player)[3]);\n    for (var i = 0; i < possibleUnits.length; i++) {\n      var unitX = possibleUnits[i];\n      var enemyShootableUnits = this.enemyShootableUnits(game, player, unitX);\n      for (var j = 0; j < enemyShootableUnits.length; j++) {\n        var unitY = enemyShootableUnits[j];\n        if (this.willWoundShooting(game,unitX,unitY) && this.unitIsStrongest(units,unitY)){\n           //console.log(\"rule_3L. shoot\");\n           return this.shoot(unitX,unitY);\n        }\n      }\n    }\n  }\n return null;\n}),\nrule_3M: playerRule(3, function rule_3M(game, player){\n  if (game.round === 1){\n    var possibleUnits = this.playerPossibleUnits;\n    for (var i = 0; i < possibleUnits.length; i++) {\n      var unitX = possibleUnits[i];\n      var enemyShootableUnits = this.enemyShootableUnits(game, player, unitX);\n      for (var j = 0; j < enemyShootableUnits.length; j++) {\n        var unitY = enemyShootableUnits[j];\n        if (this.willWoundShooting(game,unitX,unitY) && this.unitIsStrongest(enemyShootableUnits,unitY)){\n           //console.log(\"rule_3M. shoot\");\n           return this.shoot(unitX,unitY);\n        }\n      }\n    }\n  }\n return null;\n}),\nrule_3N: playerRule(3, function rule_3N(game, player){\n  if (game.round === 1){\n    var possibleUnits = this.playerPossibleUnits;\n    //[playerArmy, playerUnits, enemyArmy, enemyUnits]\n    var units = this.armiesAndUnits(game,player)[1].concat(this.armiesAndUnits(game,player)[3]);\n    for (var i = 0; i < possibleUnits.length; i++) {\n      var unitX = possibleUnits[i];\n      var enemyShootableUnits = this.enemyShootableUnits(game, player, unitX);\n      for (var j = 0; j < enemyShootableUnits.length; j++) {\n        var unitY = enemyShootableUnits[j];\n        if (this.willWoundShooting(game,unitX,unitY) && this.unitIsStrongest(units,unitY)){\n           //console.log(\"rule_3N. shoot\");\n           return this.shoot(unitX,unitY);\n        }\n      }\n    }\n  }\n return null;\n}),\nrule_3O: playerRule(3, function rule_3O(game, player){\n  if (game.round === 2){\n    var possibleUnits = this.playerPossibleUnits;\n    for (var i = 0; i < possibleUnits.length; i++) {\n      var unitX = possibleUnits[i];\n      var enemyShootableUnits = this.enemyShootableUnits(game, player, unitX);\n      for (var j = 0; j < enemyShootableUnits.length; j++) {\n        var unitY = enemyShootableUnits[j];\n        if (this.willWoundShooting(game,unitX,unitY) && this.unitIsStrongest(enemyShootableUnits,unitY)){\n           //console.log(\"rule_3O. shoot\");\n           return this.shoot(unitX,unitY);\n        }\n      }\n    }\n  }\n return null;\n}),\n//30\nrule_3P: playerRule(3, function rule_3P(game, player){\n  if (game.round === 2){\n    var possibleUnits = this.playerPossibleUnits;\n    for (var i = 0; i < possibleUnits.length; i++) {\n      var unitX = possibleUnits[i];\n      var enemyShootableUnits = this.enemyShootableUnits(game, player, unitX);\n      for (var j = 0; j < enemyShootableUnits.length; j++) {\n        var unitY = enemyShootableUnits[j];\n        if (this.willWoundShooting(game,unitX,unitY) && this.easiestToKill(enemyShootableUnits,unitY)){\n           //console.log(\"rule_3P. shoot\");\n           return this.shoot(unitX,unitY);\n        }\n      }\n    }\n  }\n return null;\n}),\nrule_3Q: playerRule(3, function rule_3Q(game, player){\n  if (game.round === 0){\n    var possibleUnits = this.playerPossibleUnits;\n    for (var i = 0; i < possibleUnits.length; i++) {\n      var unitX = possibleUnits[i];\n      if (this.classification(unitX)===\"troop\"){\n        var enemyShootableUnits = this.enemyShootableUnits(game, player, unitX);\n        for (var j = 0; j < enemyShootableUnits.length; j++) {\n          var unitY = enemyShootableUnits[j];\n          if (this.willWoundShooting(game,unitX,unitY)&&this.unitIsStrongest(enemyShootableUnits,unitY)){\n             //console.log(\"rule_3Q. shoot\");\n             return this.shoot(unitX,unitY);\n          }\n        }\n      }\n    }\n  }\n return null;\n}),\nrule_3R: playerRule(3, function rule_3R(game, player){\n  if (game.round === 0){\n    var possibleUnits = this.playerPossibleUnits;\n    //[playerArmy, playerUnits, enemyArmy, enemyUnits]\n    var units = this.armiesAndUnits(game,player)[1];\n    for (var i = 0; i < possibleUnits.length; i++) {\n      var unitX = possibleUnits[i];\n      if (unitX.cost() === this.cheapestUnit(units).cost()){\n        var enemyShootableUnits = this.enemyShootableUnits(game, player, unitX);\n        for (var j = 0; j < enemyShootableUnits.length; j++) {\n          var unitY = enemyShootableUnits[j];\n          if (this.willWoundShooting(game,unitX,unitY)&&this.unitIsStrongest(enemyShootableUnits,unitY)){\n             //console.log(\"rule_3R. shoot\");\n             return this.shoot(unitX,unitY);\n          }\n        }\n      }\n    }\n  }\n return null;\n}),\nrule_3S: playerRule(3, function rule_3S(game, player){\n  if (game.round === 0){\n    var possibleUnits = this.playerPossibleUnits;\n    //[playerArmy, playerUnits, enemyArmy, enemyUnits]\n    var units = this.armiesAndUnits(game,player)[1].concat(this.armiesAndUnits(game,player)[3]);\n    for (var i = 0; i < possibleUnits.length; i++) {\n      var unitX = possibleUnits[i];\n      if (this.classification(unitX)===\"troop\"){\n        var enemyShootableUnits = this.enemyShootableUnits(game, player, unitX);\n        for (var j = 0; j < enemyShootableUnits.length; j++) {\n          var unitY = enemyShootableUnits[j];\n          if (this.willWoundShooting(game,unitX,unitY)&&this.unitIsStrongest(units,unitY)){\n             //console.log(\"rule_3S. shoot\");\n             return this.shoot(unitX,unitY);\n          }\n        }\n      }\n    }\n  }\n return null;\n}),\n/* Si la unitX va a herir a la unidad más fuerte enemiga si le dispara,\ny una unidad aliada está herida entonces asistirla.*/\nrule_3T: playerRule(3, function rule_3T(game, player){\n    var possibleUnits = this.playerPossibleUnits;\n    //[playerArmy, playerUnits, enemyArmy, enemyUnits]\n    var armiesAndUnits = this.armiesAndUnits(game,player);\n    var units = armiesAndUnits[1];\n    var allUnits = units.concat(armiesAndUnits[3]);\n    for (var i = 0; i < possibleUnits.length; i++) {\n      var unitX = possibleUnits[i];\n      for (var k = 0; k < units.length; k++) {\n        var unitX2 = units[k];\n        if (this.wounded(unitX2) && this.canAssist(game,player,unitX,unitX2)){\n          var enemyShootableUnits = this.enemyShootableUnits(game, player, unitX);\n          for (var j = 0; j < enemyShootableUnits.length; j++) {\n            var unitY = enemyShootableUnits[j];\n            if (this.willWoundShooting(game,unitX,unitY) && this.unitIsStrongest(allUnits,unitY)){\n               //console.log(\"rule_3T. assist\");\n               return this.assist(game,player,unitX,unitX2);\n            }\n          }\n        }\n      }\n    }\n return null;\n}),\n\n //-------------------------priority 2-----------------------------------------\n //si es la ronda 0 y el enemigo esta herido, asaltar a ese enemigo\n  rule_2A: playerRule(2, function rule_2A(game, player){\n   if (game.round === 0){\n     var possibleUnits = this.playerPossibleUnits;\n     for (var i = 0; i < possibleUnits.length; i++) {\n       var unitX = possibleUnits[i];\n       var enemyAssaultableUnits = this.enemyAssaultableUnits(game, player, unitX);\n       if (enemyAssaultableUnits.length>0){\n         for (var j = 0; j < enemyAssaultableUnits.length; j++) {\n           var unitY = enemyAssaultableUnits[j];\n            if (this.wounded(unitY)){\n              //console.log(\"rule_2A. assault\");\n              return this.assault(unitX,unitY);\n            }\n         }\n       }\n     }\n   }\n   return null;\n }),\n //si es la ronda 0, y la unidad es fastAttack, disparar a lo que pueda disparar\n rule_2B: playerRule(2, function rule_2B(game, player){\n   if (game.round === 0){\n     var possibleUnits = this.playerPossibleUnits;\n     for (var i = 0; i < possibleUnits.length; i++) {\n       var unitX = possibleUnits[i];\n       if (this.classification(unitX)===\"fastAttack\"){\n         var enemyShootableUnits = this.enemyShootableUnits(game, player, unitX);\n         for (var j = 0; j < enemyShootableUnits.length; j++) {\n           var unitY = enemyShootableUnits[j];\n           //console.log(\"rule_2B. shoot\");\n           return this.shoot(unitX,unitY);\n         }\n       }\n     }\n   }\n  return null;\n }),\n  // si es la ronda 1, y la unidad es fastAttack, disparar a lo que pueda disparar\n rule_2C: playerRule(2, function rule_2C(game, player){\n   if (game.round === 1){\n     var possibleUnits = this.playerPossibleUnits;\n     for (var i = 0; i < possibleUnits.length; i++) {\n       var unitX = possibleUnits[i];\n       if (this.classification(unitX)===\"fastAttack\"){\n         var enemyShootableUnits = this.enemyShootableUnits(game, player, unitX);\n         for (var j = 0; j < enemyShootableUnits.length; j++) {\n           var unitY = enemyShootableUnits[j];\n           //console.log(\"rule_2C. shoot\");\n           return this.shoot(unitX,unitY);\n         }\n       }\n     }\n   }\n  return null;\n }),\n// si es la ronda 2, y la unidad es fastAttack, disparar a lo que pueda disparar\n rule_2D: playerRule(2, function rule_2D(game, player){\n   if (game.round === 2){\n     var possibleUnits = this.playerPossibleUnits;\n     for (var i = 0; i < possibleUnits.length; i++) {\n       var unitX = possibleUnits[i];\n       if (this.classification(unitX)===\"fastAttack\"){\n         var enemyShootableUnits = this.enemyShootableUnits(game, player, unitX);\n         for (var j = 0; j < enemyShootableUnits.length; j++) {\n           var unitY = enemyShootableUnits[j];\n           //console.log(\"rule_2D. shoot\");\n           return this.shoot(unitX,unitY);\n         }\n       }\n     }\n   }\n  return null;\n }),\n // si es la ronda 0, y la unidad es heavySupport, asistir a lo que pueda asistir, que ya haya jugado\n rule_2E: playerRule(2, function rule_2E(game, player){\n   if (game.round === 0){\n     var possibleUnits = this.playerPossibleUnits;\n     //[playerArmy, playerUnits, enemyArmy, enemyUnits]\n     var units = this.armiesAndUnits(game,player)[1];\n     for (var i = 0; i < possibleUnits.length; i++) {\n       var unitX = possibleUnits[i];\n       if (this.classification(unitX)===\"heavySupport\"){\n         for (var j = 0; j < units.length; j++) {\n           var unitX2 = units[j];\n           if (!unitX2.isEnabled && this.canAssist(game,player,unitX,unitX2)){\n             //console.log(\"rule_2E. assist\");\n             return this.assist(game,player,unitX,unitX2);\n           }\n         }\n       }\n     }\n   }\n   return null;\n }),\n //20\n // si es la ronda 0, y la unidad es heavySupport, asistir a lo que pueda asistir\n rule_2F: playerRule(2, function rule_2F(game, player){\n   if (game.round === 0){\n     var possibleUnits = this.playerPossibleUnits;\n     //[playerArmy, playerUnits, enemyArmy, enemyUnits]\n     var units = this.armiesAndUnits(game,player)[1];\n     for (var i = 0; i < possibleUnits.length; i++) {\n       var unitX = possibleUnits[i];\n       if (this.classification(unitX)===\"heavySupport\"){\n         for (var j = 0; j < units.length; j++) {\n           var unitX2 = units[j];\n           if (this.canAssist(game,player,unitX,unitX2)){\n             //console.log(\"rule_2F. assist\");\n             return this.assist(game,player,unitX,unitX2);\n           }\n         }\n       }\n     }\n   }\n   return null;\n }),\n // si es la ronda 1, y la unidad es heavySupport, asistir a lo que pueda asistir, que ya haya jugado\n rule_2G: playerRule(2, function rule_2G(game, player){\n   if (game.round === 1){\n     var possibleUnits = this.playerPossibleUnits;\n     //[playerArmy, playerUnits, enemyArmy, enemyUnits]\n     var units = this.armiesAndUnits(game,player)[1];\n     for (var i = 0; i < possibleUnits.length; i++) {\n       var unitX = possibleUnits[i];\n       if (this.classification(unitX)===\"heavySupport\"){\n         for (var j = 0; j < units.length; j++) {\n           var unitX2 = units[j];\n           if (!unitX2.isEnabled && this.canAssist(game,player,unitX,unitX2)){\n             //console.log(\"rule_2G. assist\");\n             return this.assist(game,player,unitX,unitX2);\n           }\n         }\n       }\n     }\n   }\n   return null;\n }),\n // si es la ronda 1, y la unidad es heavySupport, asistir a lo que pueda asistir\n rule_2H: playerRule(2, function rule_2H(game, player){\n   if (game.round === 1){\n     var possibleUnits = this.playerPossibleUnits;\n     //[playerArmy, playerUnits, enemyArmy, enemyUnits]\n     var units = this.armiesAndUnits(game,player)[1];\n     for (var i = 0; i < possibleUnits.length; i++) {\n       var unitX = possibleUnits[i];\n       if (this.classification(unitX)===\"heavySupport\"){\n         for (var j = 0; j < units.length; j++) {\n           var unitX2 = units[j];\n           if (this.canAssist(game,player,unitX,unitX2)){\n             //console.log(\"rule_2H. assist\");\n             return this.assist(game,player,unitX,unitX2);\n           }\n         }\n       }\n     }\n   }\n   return null;\n }),\n // si es la ronda 2, y la unidad es heavySupport, asistir a lo que pueda asistir, que ya haya jugado\n rule_2I: playerRule(2, function rule_2I(game, player){\n   if (game.round === 2){\n     var possibleUnits = this.playerPossibleUnits;\n     //[playerArmy, playerUnits, enemyArmy, enemyUnits]\n     var units = this.armiesAndUnits(game,player)[1];\n     for (var i = 0; i < possibleUnits.length; i++) {\n       var unitX = possibleUnits[i];\n       if (this.classification(unitX)===\"heavySupport\"){\n         for (var j = 0; j < units.length; j++) {\n           var unitX2 = units[j];\n           if (!unitX2.isEnabled && this.canAssist(game,player,unitX,unitX2)){\n             //console.log(\"rule_2I. assist\");\n             return this.assist(game,player,unitX,unitX2);\n           }\n         }\n       }\n     }\n   }\n   return null;\n }),\n // si es la ronda 2, y la unidad es heavySupport, asistir a lo que pueda asistir\n rule_2J: playerRule(2, function rule_2J(game, player){\n   if (game.round === 2){\n     var possibleUnits = this.playerPossibleUnits;\n     //[playerArmy, playerUnits, enemyArmy, enemyUnits]\n     var units = this.armiesAndUnits(game,player)[1];\n     for (var i = 0; i < possibleUnits.length; i++) {\n       var unitX = possibleUnits[i];\n       if (this.classification(unitX)===\"heavySupport\"){\n         for (var j = 0; j < units.length; j++) {\n           var unitX2 = units[j];\n           if (this.canAssist(game,player,unitX,unitX2)){\n             //console.log(\"rule_2J. assist\");\n             return this.assist(game,player,unitX,unitX2);\n           }\n         }\n       }\n     }\n   }\n   return null;\n }),\n // /si es la ronda 0, y la unidad es troop, asistir a lo que pueda asistir, que ya haya jugado\n rule_2K: playerRule(2, function rule_2K(game, player){\n   if (game.round === 0){\n     var possibleUnits = this.playerPossibleUnits;\n     //[playerArmy, playerUnits, enemyArmy, enemyUnits]\n     var units = this.armiesAndUnits(game,player)[1];\n     for (var i = 0; i < possibleUnits.length; i++) {\n       var unitX = possibleUnits[i];\n       if (this.classification(unitX)===\"troop\"){\n         for (var j = 0; j < units.length; j++) {\n           var unitX2 = units[j];\n           if (!unitX2.isEnabled && this.canAssist(game,player,unitX,unitX2)){\n             //console.log(\"rule_2K. assist\");\n             return this.assist(game,player,unitX,unitX2);\n           }\n         }\n       }\n     }\n   }\n   return null;\n }),\n // si es la ronda 0, y la unidad es troop, asistir a lo que pueda asistir\n rule_2L: playerRule(2, function rule_2L(game, player){\n   if (game.round === 0){\n     var possibleUnits = this.playerPossibleUnits;\n     //[playerArmy, playerUnits, enemyArmy, enemyUnits]\n     var units = this.armiesAndUnits(game,player)[1];\n     for (var i = 0; i < possibleUnits.length; i++) {\n       var unitX = possibleUnits[i];\n       if (this.classification(unitX)===\"troop\"){\n         for (var j = 0; j < units.length; j++) {\n           var unitX2 = units[j];\n           if (this.canAssist(game,player,unitX,unitX2)){\n             //console.log(\"rule_2L. assist\");\n             return this.assist(game,player,unitX,unitX2);\n           }\n         }\n       }\n     }\n   }\n   return null;\n }),\n // si es la ronda 1, y la unidad es troop, asistir a lo que pueda asistir, que ya haya jugado\n rule_2M: playerRule(2, function rule_2M(game, player){\n   if (game.round === 1){\n     var possibleUnits = this.playerPossibleUnits;\n     //[playerArmy, playerUnits, enemyArmy, enemyUnits]\n     var units = this.armiesAndUnits(game,player)[1];\n     for (var i = 0; i < possibleUnits.length; i++) {\n       var unitX = possibleUnits[i];\n       if (this.classification(unitX)===\"troop\"){\n         for (var j = 0; j < units.length; j++) {\n           var unitX2 = units[j];\n           if (!unitX2.isEnabled && this.canAssist(game,player,unitX,unitX2)){\n             //console.log(\"rule_2M. assist\");\n             return this.assist(game,player,unitX,unitX2);\n           }\n         }\n       }\n     }\n   }\n   return null;\n }),\n // si es la ronda 1, y la unidad es troop, asistir a lo que pueda asistir\n rule_2N: playerRule(1, function rule_2N(game, player){\n   if (game.round === 0){\n     var possibleUnits = this.playerPossibleUnits;\n     //[playerArmy, playerUnits, enemyArmy, enemyUnits]\n     var units = this.armiesAndUnits(game,player)[1];\n     for (var i = 0; i < possibleUnits.length; i++) {\n       var unitX = possibleUnits[i];\n       if (this.classification(unitX)===\"troop\"){\n         for (var j = 0; j < units.length; j++) {\n           var unitX2 = units[j];\n           if (this.canAssist(game,player,unitX,unitX2)){\n             //console.log(\"rule_2N. assist\");\n             return this.assist(game,player,unitX,unitX2);\n           }\n         }\n       }\n     }\n   }\n   return null;\n }),\n // si es la ronda 2, y la unidad es troop, asistir a lo que pueda asistir, que ya haya jugado\n rule_2O: playerRule(2, function rule_2O(game, player){\n   if (game.round === 2){\n     var possibleUnits = this.playerPossibleUnits;\n     //[playerArmy, playerUnits, enemyArmy, enemyUnits]\n     var units = this.armiesAndUnits(game,player)[1];\n     for (var i = 0; i < possibleUnits.length; i++) {\n       var unitX = possibleUnits[i];\n       if (this.classification(unitX)===\"troop\"){\n         for (var j = 0; j < units.length; j++) {\n           var unitX2 = units[j];\n           if (!unitX2.isEnabled && this.canAssist(game,player,unitX,unitX2)){\n             //console.log(\"rule_2O. assist\");\n             return this.assist(game,player,unitX,unitX2);\n           }\n         }\n       }\n     }\n   }\n   return null;\n }),\n //10\n // si es la ronda 2, y la unidad es troop, asistir a lo que pueda asistir\n rule_2P: playerRule(2, function rule_2P(game, player){\n   if (game.round === 2){\n     var possibleUnits = this.playerPossibleUnits;\n     //[playerArmy, playerUnits, enemyArmy, enemyUnits]\n     var units = this.armiesAndUnits(game,player)[1];\n     for (var i = 0; i < possibleUnits.length; i++) {\n       var unitX = possibleUnits[i];\n       if (this.classification(unitX)===\"troop\"){\n         for (var j = 0; j < units.length; j++) {\n           var unitX2 = units[j];\n           if (this.canAssist(game,player,unitX,unitX2)){\n             //console.log(\"rule_2P. assist\");\n             return this.assist(game,player,unitX,unitX2);\n           }\n         }\n       }\n     }\n   }\n   return null;\n }),\n\n // si es la ronda 0, y la unidad es sniper, disparar a lo que pueda disparar\n rule_2Q: playerRule(2, function rule_2Q(game, player){\n   if (game.round === 0 ){\n     var possibleUnits = this.playerPossibleUnits;\n     for (var i = 0; i < possibleUnits.length; i++) {\n       var unitX = possibleUnits[i];\n       if (this.classification(unitX)===\"sniper\"){\n         var enemyShootableUnits = this.enemyShootableUnits(game, player, unitX);\n         for (var j = 0; j < enemyShootableUnits.length; j++) {\n           var unitY = enemyShootableUnits[j];\n           //console.log(\"rule_2Q. shoot\");\n           return this.shoot(unitX,unitY);\n         }\n       }\n     }\n   }\n   return null;\n }),\n // si es la ronda 1, y la unidad es sniper, disparar a lo que pueda disparar\n rule_2R: playerRule(2, function rule_2R(game, player){\n   if (game.round === 1 ){\n     var possibleUnits = this.playerPossibleUnits;\n     for (var i = 0; i < possibleUnits.length; i++) {\n       var unitX = possibleUnits[i];\n       if (this.classification(unitX)===\"sniper\"){\n         var enemyShootableUnits = this.enemyShootableUnits(game, player, unitX);\n         for (var j = 0; j < enemyShootableUnits.length; j++) {\n           var unitY = enemyShootableUnits[j];\n           //console.log(\"rule_2R. shoot\");\n           return this.shoot(unitX,unitY);\n         }\n       }\n     }\n   }\n   return null;\n }),\n // si es la ronda 2, y la unidad es sniper, disparar a lo que pueda disparar\n rule_2S: playerRule(2, function rule_2S(game, player){\n   if (game.round === 2 ){\n     var possibleUnits = this.playerPossibleUnits;\n     for (var i = 0; i < possibleUnits.length; i++) {\n       var unitX = possibleUnits[i];\n       if (this.classification(unitX)===\"sniper\"){\n         var enemyShootableUnits = this.enemyShootableUnits(game, player, unitX);\n         for (var j = 0; j < enemyShootableUnits.length; j++) {\n           var unitY = enemyShootableUnits[j];\n           //console.log(\"rule_2S. shoot\");\n           return this.shoot(unitX,unitY);\n         }\n       }\n     }\n   }\n   return null;\n }),\n\n //-------------------------priority 1-----------------------------------------\n //si es la primer ronda y puede escaparse que se escape.\n rule_1A: playerRule(1, function rule_1A(game, player){\n   if (game.round === 0){\n     var possibleUnits = this.playerPossibleUnits;\n     for (var i = 0; i < possibleUnits.length; i++) {\n       var unitX = possibleUnits[i];\n       if (this.canScape(game,player,unitX)){\n           //console.log(\"rule_1A. scape\");\n           return this.scape(game,player,unitX);\n       }\n     }\n   }\n   return null;\n }),\n // si es la segunda ronda y puede escaparse que se escape.\n rule_1B: playerRule(1, function rule_1B(game, player){\n   if (game.round === 1){\n     var possibleUnits = this.playerPossibleUnits;\n     for (var i = 0; i < possibleUnits.length; i++) {\n       var unitX = possibleUnits[i];\n       if (this.canScape(game,player,unitX)){\n         //console.log(\"rule_1B. scape\");\n         return this.scape(game,player,unitX);\n       }\n     }\n   }\n   return null;\n }),\n //si es la tercer ronda y puede disparar que dispare.\n rule_1C: playerRule(1, function rule_1C(game, player){\n   if (game.round === 2){\n     var possibleUnits = this.playerPossibleUnits;\n     for (var i = 0; i < possibleUnits.length; i++) {\n       var unitX = possibleUnits[i];\n       var enemyShootableUnits = this.enemyShootableUnits(game, player, unitX);\n       for (var j = 0; j < enemyShootableUnits.length; j++) {\n         var unitY = enemyShootableUnits[j];\n         //console.log(\"rule_1C. shoot\");\n         return this.shoot(unitX,unitY);\n       }\n     }\n   }\n   return null;\n }),\n //si es la cuarta ronda y puede asaltar que asalte.\n rule_1D: playerRule(1, function rule_1D(game, player){\n  if (game.round === 3){\n     var possibleUnits = this.playerPossibleUnits;\n     for (var i = 0; i < possibleUnits.length; i++) {\n       var unitX = possibleUnits[i];\n       var enemyAssaultableUnits = this.enemyAssaultableUnits(game, player, unitX);\n       for (var j = 0; j < enemyAssaultableUnits.length; j++) {\n         var unitY = enemyAssaultableUnits[j];\n         //console.log(\"rule_1D. assault\");\n         return this.assault(unitX,unitY);\n       }\n     }\n   }\n   return null;\n }),\n\n//si puede disparar que dispare\n rule_1E: playerRule(1, function rule_1E(game, player){\n   var possibleUnits = this.playerPossibleUnits;\n   for (var i = 0; i < possibleUnits.length; i++) {\n     var unitX = possibleUnits[i];\n     var enemyShootableUnits = this.enemyShootableUnits(game, player, unitX);\n     for (var j = 0; j < enemyShootableUnits.length; j++) {\n       var unitY = enemyShootableUnits[j];\n       //console.log(\"rule_1E. shoot\");\n       return this.shoot(unitX,unitY);\n     }\n   }\n   return null;\n }),\n // si no puede disparar que se acerque al enemigo mas facil de matar\n rule_1F: playerRule(1, function rule_1F(game, player){\n   //var enemyUnits = this.livingEnemyUnits(game, player),\n   var possibleUnits = this.playerPossibleUnits;\n   for (var i = 0; i < possibleUnits.length; i++) {\n     var unitX = possibleUnits[i];\n     var enemyShootableUnits = this.enemyShootableUnits(game, player, unitX);\n     if (enemyShootableUnits.length==0){\n       var enemyUnits = this.livingEnemyUnits(game, player);\n       for (var k=0; k<enemyUnits.length;k++){\n         var eu = enemyUnits[k];\n         if (this.easiestToKill(enemyUnits,eu)){\n           //console.log(\"rule_1F. move\");\n           var move = this.getCloseTo(game,unitX,eu);\n           return move;\n         }\n       }\n     }\n   }\n   return null;\n })\n\n}); // declare DynamicScriptingPlayer\n\n\n\n//Reglas para ver q se elija lo de mas prioridad.\n\n /*rule_infinityA: playerRule(8, function rule_infinityA(game, player){\n   var possibleUnits = this.playerPossibleUnits;\n   for (var i = 0; i < possibleUnits.length; i++) {\n     var unitX = possibleUnits[i];\n     if (!unitX.isDead() && !unitX.isActive && unitX.isEnabled){\n       var enemyUnits = this.shootableUnits(game, player, unitX);\n       for (var j = 0; j < enemyUnits.length; j++) {\n         var unitY = enemyUnits[j];\n         return this.shoot(unitX,unitY);\n       }\n     }\n   }\n   return null;\n }),\n rule_infinityB: playerRule(8, function rule_infinityB(game, player){\n   var possibleUnits = this.playerPossibleUnits;\n   for (var i = 0; i < possibleUnits.length; i++) {\n     var unitX = possibleUnits[i];\n     if (!unitX.isDead() && !unitX.isActive && unitX.isEnabled){\n       var enemyUnits = this.shootableUnits(game, player, unitX);\n       for (var j = 0; j < enemyUnits.length; j++) {\n         var unitY = enemyUnits[j];\n         return this.shoot(unitX,unitY);\n       }\n     }\n   }\n   return null;\n }),\n\n // regla solo para que se escapen siempre\n rule_ZA: playerRule(10, function rule_ZA(game, player){\n   var possibleUnits = this.playerPossibleUnits;\n     for (var i = 0; i < possibleUnits.length; i++) {\n       var unitX = possibleUnits[i];\n       var dangerousUnits = this.dangerousUnits(game,player,unitX);\n       if (dangerousUnits.length>0){\n         //console.log(\"rule_ZA\");\n         return this.scape(game,player,unitX);\n       }\n     }\n     return null;\n }),\n */\n","var DynamicScriptingSinPesosPlayer = exports.DynamicScriptingSinPesosPlayer = declare(ludorum.Player, {\n /** The constructor takes the player's `name` and the following:\n  */\n constructor: function DynamicScriptingSinPesosPlayer(params) {\n   ludorum.Player.call(this, params);\n   initialize(this, params)\n    .array('rules', { defaultValue: [] });\n   this.__pendingActions__ = [];\n   this.rules = this.ownRules();\n   this.sortRules();\n   this.playerPossibleUnits = [];\n   this.playerShootableUnits = [];\n   this.playerAssaultableUnits = [];\n },\n\n /** Returns an array with the methods of this object whose name starts with `rule`.\n  */\n ownRules: function ownRules() {\n   var self = this;\n   return Object.keys(Object.getPrototypeOf(this)).map(function (id) {\n     return [self[id], 1];\n   }).filter(function (member) {\n     var f = member[0];\n     return typeof f === 'function' && f.name && f.name.substr(0, 4) === 'rule';\n   });\n },\n\n /** Sorts the rules first by priority (descending),\n  */\n sortRules: function sortRules() {\n   this.rules.sort(function (r1, r2) {\n     return r2[0].priority - r1[0].priority || r2[1] - r1[1];\n   });\n },\n\n //devuelve la lista de reglas de la prioridad indicada\n firstRules: function firstRules(game,player,priority){\n   var rule, actions;\n   var retRules = [];\n   for (var i = 0, len = this.rules.length; i < len; i++) {\n     if (this.rules[i][0].priority==priority){\n       rule = this.rules[i];\n       actions = rule[0].call(this, game, player);\n       if (actions) {\n         retRules.push(rule);\n       }\n     }\n   }\n   return retRules;\n  },\n\n\n /** The player makes a decision by calling the rules' functions in order. The first one to\n return a list of actions is used.\n */\n decision: function decision(game, player) {\n   game.synchronizeMetagame();\n   this.playerPossibleUnits = this.possibleUnits(game, player);\n   this.playerShootableUnits = this.allShootableUnits(game, player);\n   this.playerAssaultableUnits = this.allAssaultableUnits(game, player);\n   var rule, actions;\n   if (this.__pendingActions__.length < 1) {\n      //for (var i = 0, len = this.rules.length; i < len; i++) {\n      var maxPriority = 12; //la mayor prioridad con reglas programadas\n      while (maxPriority >0){\n         //rule = this.rules[i];\n         var firstRules = this.firstRules(game,player,maxPriority);\n         if (firstRules.length>0){\n           rule = firstRules[Math.floor(Math.random()*firstRules.length)];\n           actions = rule[0].call(this, game, player);\n           if (actions) {\n             actions.forEach(function (action) {\n               action.__rule__ = rule;\n             });\n             this.__pendingActions__ = this.__pendingActions__.concat(actions);\n             return this.__pendingActions__.shift();\n           }\n         } else { // no se cumple ninguna regla para la maxima prioridad, bajar de prioridad\n           maxPriority -= 1;\n         }\n       }\n     }\n   raiseIf(this.__pendingActions__.length < 1, 'No rule applied to game!');\n   return this.__pendingActions__.shift();\n },\n\n 'static __SERMAT__': {\n   identifier: 'DynamicScriptingSinPesosPlayer',\n   serializer: function serialize_DynamicScriptingSinPesosPlayer(obj) {\n     return this.serializeAsProperties(obj, ['name', 'rules']); //TODO Check function serialization.\n   }\n },\n\n // ## Helper functions /////////////////////////////////////////////////////////////////////////\n//accion basica shoot\n shoot: function shoot(unitX,unitY){\n   return [new ActivateAction(unitX.id),new ShootAction(unitX.id,unitY.id)];\n },\n//accion basica assault\n assault: function assault(unitX,unitY){\n   return [new ActivateAction(unitX.id),new AssaultAction(unitX.id,unitY.id)];\n },\n//accion basica move. puede solo moverse, o moverse y disparar\n move: function move(unitX,moveAction,shootUnitY){\n   if (shootUnitY){\n     //el shoot ya tiene EndTurnAction incorporado, si solo se mueve hay q agregarlo\n     return [new ActivateAction(unitX.id),moveAction,new ShootAction(unitX.id,shootUnitY.id)];\n   } else {\n     return [new ActivateAction(unitX.id),moveAction,new EndTurnAction(unitX.id)];\n   }\n },\n//metodo auxiliar para la funcion scape\nscapeAux: function scapeAux(game,player,enemyUnits,unitX){\n  for (var i = 0; i < enemyUnits.length; i++) {\n    var eu = enemyUnits[i];\n    var moves = [];\n    if (this.canHide(game,unitX,eu)){\n      var hideMoves = this.hideMoves(game,unitX,eu);\n      for (var j=0; j<hideMoves.length; j++){\n        if (game.terrain.distance(eu.position,hideMoves[j].position)<=eu.maxRange()+6){\n          return this.move(unitX,hideMoves[j]);\n        }\n      }\n      moves = moves.concat(hideMoves);\n    }\n    if (this.canRun(game,unitX,eu)){\n      var runMoves = this.runMoves(game,unitX,eu);\n      for (var k=0; k<runMoves.length; k++){\n        if (game.terrain.distance(eu.position,runMoves[k].position)<=eu.maxRange()+6){\n          return this.move(unitX,runMoves[k]);\n        }\n      }\n      moves = moves.concat(runMoves);\n    }\n    if (moves.length>0){\n      return this.move(unitX,moves[Math.floor(Math.random()*moves.length)]);\n    }\n  }\n},\n//retorna un move, que le sirva a unitX para escapar de los enemigos peligrosos\n scape: function scape(game,player,unitX){\n   var mostDangerousUnits = this.mostDangerousUnits(game,player,unitX);\n   var scapeMdu = this.scapeAux(game,player,mostDangerousUnits,unitX);\n   if (scapeMdu){\n     return scapeMdu;\n   }\n   var dangerousUnits = this.dangerousUnits(game,player,unitX);\n   var scapeDu = this.scapeAux(game,player,mostDangerousUnits,unitX);\n   if (scapeDu){\n     return scapeDu;\n   }\n   console.log(\"no escapa cuando deberia\");\n   var moveActions = unitX.getMoveActions(game);\n   var return_move = this.move(unitX,moveActions[Math.floor(Math.random()*moveActions.length)]);\n   return return_move;\n },\n //metodo auxiliar para la funcion assist\n assistAux: function assistAux(game,player,enemyUnits,unitX,unitX2){\n   for (var i=0;i<enemyUnits.length;i++){\n      var eu = enemyUnits[i];\n      if (this.canAssault(game,unitX,eu)){\n        return this.assault(unitX,eu);\n      }\n      var moveAction;\n      if (this.canBlockSight(game,unitX,unitX2,eu)){\n        var blockSightMovements = this.blockSightMovements(game,unitX,unitX2,eu);\n        moveAction = blockSightMovements[Math.floor(Math.random()*blockSightMovements.length)];\n      }\n      if (this.canShoot_(game,unitX,eu,true)){\n        if (moveAction){\n          return this.move(unitX,moveAction,eu);\n        } else {\n          return this.shoot(unitX,eu);\n        }\n      } else{\n        if (moveAction){\n          return this.move(unitX,moveAction);\n        }\n      }\n    }\n    return null;\n },\n/*al enemigo que pueda atacar a unitX2, intenta asaltarlo, o moverse para bloquear su vista y dispararlo\nempezando por los enemigos mas peligrosos\n*/\n assist: function assist(game,player,unitX,unitX2){\n   var mostDangerousUnits = this.mostDangerousUnits(game,player,unitX2);\n   var assistMdu = this.assistAux(game,player,mostDangerousUnits,unitX,unitX2);\n   if (assistMdu){\n     return assistMdu;\n   }\n   var dangerousUnits = this.dangerousUnits(game,player,unitX2);\n   var assistDu = this.assistAux(game,player,dangerousUnits,unitX,unitX2);\n   if (assistDu){\n     return assistDu;\n   }\n   console.log(\"no asiste cuando deberia\");\n   var moveActions = unitX.getMoveActions(game);\n   var return_move = this.move(unitX,moveActions[Math.floor(Math.random()*moveActions.length)]);\n   return return_move;\n },\n\n getFewMoveActions: function getFewMoveActions(game,unitX){\n   var fewMoveActions = [];\n   var x = unitX.position[0];\n   var y = unitX.position[1];\n   fewMoveActions.push(new MoveAction(unitX.id, [x+1, y+1], false));\n   //return new MoveAction(unitX.id, [+pos[0], +pos[1]], v > 6);\n   return fewMoveActions;\n },\n\n // retorna el move que hace que unitX se acerque lo mas posible a unitZ\n getCloseTo: function getCloseTo(game,unitX,unitZ){\n    //encuentro a linea de posiciones entre unitX y unitZ\n    var interpolatedPos = this.interpolation(unitX.position,unitZ.position);\n    //pongo en una lista todos los movimientos que lleven a la linea\n    var moveActions = unitX.getMoveActions(game);\n    //var moveActions = this.getFewMoveActions(game, unitX);\n    var possibleMoves = [];\n    for (var i=0; i<moveActions.length; i++){\n      var pos = moveActions[i].position;\n      interpolatedPos.forEach(function(elem){\n        if(pos[0]===elem[0]&&pos[1]===elem[1]){\n          possibleMoves.push(moveActions[i]);\n        }\n      });\n    }\n    // recorro la lista para ver cual esta mas cerca a unitZ\n    var closest = unitX.position;\n    var move = moveActions[Math.floor(Math.random()*moveActions.length)];\n    for (var j=0; j<possibleMoves.length;j++){\n      var movePos = possibleMoves[j].position;\n      if (game.terrain.distance(movePos,unitZ.position)<game.terrain.distance(closest,unitZ.position)){\n        closest = movePos;\n        move = possibleMoves[j];\n      }\n    }\n    var return_move = this.move(unitX,move);\n    return return_move;\n},\n// devuelve las unidades que el jugador puede usar en su proxima accion\npossibleUnits: function possibleUnits(game, player){\n  //[playerArmy, playerUnits, enemyArmy, enemyUnits]\n  var playerUnits = this.armiesAndUnits(game,player)[1];\n  var possibleUnits = [];\n  playerUnits.forEach(function (pu) {\n    if ((!pu.isDead()) && (pu.isEnabled) && (!pu.isActive)){\n      possibleUnits.push(pu);\n    }\n  });\n  return possibleUnits;\n},\n// devuelve una lista de unidades enemigas que pueden ser disparadas por la unidad atacante\nshootableUnitsAux: function shootableUnitsAux(game, player, shooter){\n  var shootableUnits = [];\n  var enemyUnits = this.livingEnemyUnits(game,player);\n  var shootActions = shooter.getShootActions(game);\n  shootActions.forEach(function(shootAction){\n    enemyUnits.forEach(function(target){\n      if(shootAction.targetId === target.id){\n        shootableUnits.push(target);\n      }\n    });\n  });\n  return shootableUnits;\n},\n// devuelve una lista de unidades enemigas que pueden ser disparadas por cada unidad aliada\nallShootableUnits: function allShootableUnits(game, player){\n  var allShootableUnits = [];\n  var possibleUnits = this.playerPossibleUnits;\n  for (var i = 0; i < possibleUnits.length; i++) {\n    var shooter = possibleUnits[i];\n    var shooterShootableUnits = [];\n    shooterShootableUnits = this.shootableUnitsAux(game, player, shooter);\n    allShootableUnits[i] = [shooter,shooterShootableUnits];\n  }\n  return allShootableUnits;\n},\nenemyShootableUnits: function enemyShootableUnits(game, player, shooter){\n  var enemyShootableUnits = [];\n  for (var psu=0; psu < this.playerShootableUnits.length; psu++){\n   if(this.playerShootableUnits[psu][0]==shooter){\n     enemyShootableUnits = this.playerShootableUnits[psu][1];\n   }\n  }\n  return enemyShootableUnits;\n},\n\n// devuelve una lista de unidades enemigas que pueden ser asaltadas por la unidad atacante\nassaultableUnits: function assaultableUnits(game, player, assaulter){\n  var assaultableUnits = [];\n  var enemyUnits = this.livingEnemyUnits(game,player);\n  var assaultActions = assaulter.getAssaultActions(game);\n  assaultActions.forEach(function(assaultAction){\n    enemyUnits.forEach(function (target){\n      if(assaultAction.targetId === target.id){\n        assaultableUnits.push(target);\n      }\n    });\n  });\n  return assaultableUnits;\n},\n// devuelve una lista de unidades enemigas que pueden ser asaltadas por cada unidad aliada\nallAssaultableUnits: function allAssaultableUnits(game, player){\n  var allAssaultableUnits = [];\n  var possibleUnits = this.playerPossibleUnits;\n  for (var i = 0; i < possibleUnits.length; i++) {\n    var assaulter = possibleUnits[i];\n    var assaulterAssaultableUnits = [];\n    assaulterAssaultableUnits = this.assaultableUnits(game, player, assaulter);\n    allAssaultableUnits[i] = [assaulter,assaulterAssaultableUnits];\n  }\n  return allAssaultableUnits;\n},\nenemyAssaultableUnits: function enemyAssaultableUnits(game, player, assaulter){\n  var enemyAssaultableUnits = [];\n  for (var pau=0; pau < this.playerAssaultableUnits.length; pau++){\n   if(this.playerAssaultableUnits[pau][0]==assaulter){\n     enemyAssaultableUnits = this.playerAssaultableUnits[pau][1];\n   }\n  }\n  return enemyAssaultableUnits;\n},\n\n//devuelve true si el shooter puede dispararle al target\n canShoot_: function canShoot_(game,shooter,target,walking){\n   if (!shooter.isDead() && shooter.isEnabled && !target.isDead()){\n     if (game.terrain.canShoot(shooter,target) != Infinity){\n       return true;\n     }\n   }\n   return false;\n },\n //devuelve true si el assaulter puede asaltar al target\n canAssault: function canAssault(game,assaulter,target){\n   if (!assaulter.isDead() && assaulter.isEnabled && !target.isDead()){\n     if (game.terrain.canShoot(assaulter,target) <= 12){\n       return true;\n     }\n   }\n   return false;\n },\n /*metodo auxiliar de interpolation\n  para cuando la distancia entre las X es mayor que la distancia entre las Y*/\n interForX: function interForX(xmin,xmax,y_xmin,delta){\n   var interpolatedPos = [];\n   var y=y_xmin;\n   for (var x=xmin+1;x<xmax;x++){\n      interpolatedPos.push([parseInt(x),parseInt(y)]);\n     y += delta;\n   }\n   return interpolatedPos;\n },\n /*metodo auxiliar de interpolation\n  para cuando la distancia entre las Y es mayor que la distancia entre las X*/\n interForY: function interFory(ymin,ymax,x_ymin,delta){\n   var interpolatedPos = [];\n   var x=x_ymin;\n   for (var y=ymin+1;y<ymax;y++){\n      interpolatedPos.push([parseInt(x),parseInt(y)]);\n     x += delta;\n   }\n   return interpolatedPos;\n },\n//genera un array de puntos entre el pointA y el pointB\n interpolation: function interpolation(pointA,pointB){\n   var x=0,\n    y=0,\n    delta=0;\n   var xa = pointA[0],\n    xb = pointB[0],\n    ya = pointA[1],\n    yb = pointB[1];\n   var xmin = Math.min(xa,xb),\n    xmax = Math.max(xa,xb),\n    ymin = Math.min(ya,yb),\n    ymax = Math.max(ya,yb);\n   var x_ymin,\n    y_xmin;\n   if (xmin === xa){\n     y_xmin = ya;\n   }else{\n     y_xmin = yb;\n   }\n   if (ymin === ya){\n     x_ymin = xa;\n   }else{\n     x_ymin = xb;\n   }\n   var interForX;\n   var interForY;\n   if (ya===yb){\n     interForX = this.interForX(xmin,xmax,y_xmin,delta);\n     return interForX;\n   } else {\n     if (xa===xb){\n       interForY = this.interForY(ymin,ymax,x_ymin,delta);\n       return interForY;\n     } else {\n       if (Math.abs(yb-ya) >= Math.abs(xb-xa)){\n         delta = Math.abs(xb-xa) / Math.abs(yb-ya);\n         interForY = this.interForY(ymin,ymax,x_ymin,delta);\n         return interForY;\n       } else {\n         delta = Math.abs(yb-ya) / Math.abs(xb-xa);\n         interForX = this.interForX(xmin,xmax,y_xmin,delta);\n         return interForX;\n       }\n     }\n   }\n },\n /*devuelve las posiciones en que la unitX puede ponerse entre la unitA y la unitB\n de forma tal que quite la linea de vision entre las mismas */\n blockSightMovements: function blockSightMovements(game,unitX,unitA,unitB){\n   //dadas las posiciones de unitA y unitB\n   var posA = unitA.position;\n   var posB = unitB.position;\n   //calcula las posiciones intermedias y las pone en un array\n   var interpolatedPos = this.interpolation(posA,posB);\n   //devuelve la posicion de los moveActions de unitX que coincidan con alguna del array\n   var possibleMoves = [];\n   var moveActions = unitX.getMoveActions(game);\n   for (var i=0; i<moveActions.length; i++){\n     var pos = moveActions[i].position;\n     interpolatedPos.forEach(function(elem){\n       if(pos[0]===elem[0]&&pos[1]===elem[1]){\n         possibleMoves.push(moveActions[i]);\n       }\n     });\n   }\n   return possibleMoves;\n },\n /*devuelve true si la unitX puede ponerse entre la unitA y la unitB\n de forma tal que quite la linea de vision entre las mismas */\n canBlockSight: function canBlockSight(game,unitX,unitA,unitB){\n   return (this.blockSightMovements(game,unitX,unitA,unitB).length>0);\n },\n /*Devuelve true si la unitX puede cubrir a la unitX2\n y/o puedeAtacar a las unidades enemigas no activadas que puedan atacar a la unitX2.*/\n canAssist: function canAssist(game,player,unitX,unitX2){\n  var dangerousUnits = this.dangerousUnits(game,player,unitX2);\n  var canAssist = false;\n  for (var i=0;i<dangerousUnits.length;i++){\n     var du = dangerousUnits[i];\n     if (this.canBlockSight(game,unitX,unitX2,du)||this.canShoot_(game,unitX,du,true)||this.canAssault(game,unitX,du)){\n       canAssist = true;\n     } else {\n       canAssist = false;\n       break;\n     }\n   }\n   //si nadie lo puede atacar, no tiene de que asistir\n   return canAssist;\n},\n //devuelve true si puede correr y alejarse el rango suficiente\n canRun: function canRun(game,runningUnit,enemyUnit){\n   var range = enemyUnit.maxRange()+6;\n   //corre 12 pero el enemigo se acerca 6\n   if (runningUnit.isEnabled && game.terrain.canShoot(enemyUnit,runningUnit)<=range){\n     return false;\n   }\n   return true;\n },\n /*devuelve true si puede cubrirse de las unidades enemigas\n tras otra unidad u terreno que quite linea de vision*/\n canHide: function canHide(game,hidingUnit,enemyUnit){//TODO\n   return false;\n },\n /*Retorna el move que hace que unitX se aleje lo mas posible de unitZ.\n Lo devuelve en una lista*/\n runMoves: function runMoves(game,unitX,unitZ){\n    var zPos = unitZ.position;\n    var farest = unitX.position;\n    var moveActions = unitX.getMoveActions(game);\n    var move = moveActions[Math.floor(Math.random()*moveActions.length)];\n    for (var i=0; i<moveActions.length;i++){\n      var movePos = moveActions[i].position;\n      if (game.terrain.distance(movePos,zPos)>game.terrain.distance(farest,zPos)){\n        farest = movePos;\n        move = moveActions[i];\n      }\n    }\n    if (game.terrain.distance(unitZ.position,farest)<=unitZ.maxRange()+6){\n      console.log(\"run y puede huir\");\n     return [move];\n    }\n    console.log(\"run y huyo lo maximo q pudo pero igual lo alcanzan\");\n    return [move];\n },\n //devuelve la lista de movimientos en los que la hidingUnit puede esconderse  de la enemyUnit\n hideMoves: function hideMoves(game,hidingUnit,enemyUnit){//TODO\n   return [];\n },\n// devuelve true si unitX puede escaparse de las unidades que la pueden matar\n canScape: function canScape(game,player,unitX){\n   var mostDangerousUnits = this.mostDangerousUnits(game,player,unitX);\n   //si nadie lo puede matar, no tiene de quien escapar\n   if (mostDangerousUnits.length === 0){\n     return false;\n   }\n   var canScape = true;\n   for (var i = 0; i < mostDangerousUnits.length; i++) {\n     var mdu = mostDangerousUnits[i];\n     if (!this.canRun(game,unitX,mdu) && !this.canHide(game,unitX,mdu)){\n       canScape = false;\n     }\n   }\n   return canScape;\n },\n // devuelve las unidades enemigas que pueden matar a la unitX\n mostDangerousUnits: function mostDangerousUnits(game,player,unitX){\n   var livingEnemyUnits = this.livingEnemyUnits(game,player),\n    mdu = [];\n   for (var i=0;i<livingEnemyUnits.length;i++){\n     var u = livingEnemyUnits[i];\n     if (this.canKill(game,u,unitX)){\n       mdu.push(u);\n     }\n   }\n   return mdu;\n   //return iterable(livingEnemyUnits).filter(function (u) {\n  //    return this.canKill(game,u,unitX);\n   //});\n },\n // devuelve las unidades enemigas que pueden atacar a la unitX\n dangerousUnits: function dangerousUnits(game,player,unitX){\n   var livingEnemyUnits = this.livingEnemyUnits(game,player),\n     du = [];\n    for (var i=0;i<livingEnemyUnits.length;i++){\n      var eu = livingEnemyUnits[i];\n      if (this.canShoot_(game,eu,unitX,true)||this.canAssault(game,eu,unitX)){\n        du.push(eu);\n      }\n    }\n    return du;\n   //return iterable(livingEnemyUnits).filter(function (eu) {\n     //return this.canShoot_(game,eu,unitX,true)||this.canAssault(game,eu,unitX);\n    //});\n },\n //devuelve verdadero si las unidades enemigas no pueden matar a unit en este turno\n canBeKilled: function canBeKilled(game,player,unit){\n   //[playerArmy, playerUnits, enemyArmy, enemyUnits]\n   var enemyUnits = this.armiesAndUnits(game,player)[3];\n   for (var i = 0; i < enemyUnits.length; i++) {\n     if (this.canKill(game,enemyUnits[i],unit)){\n       return true;\n     }\n   }\n   return false;\n },\n // devuelve verdadero si la unidad atacante puede llegar a eliminar a la defensora\n canKill: function canKill(game,attacker,target){\n   if (!attacker.isDead() && attacker.isEnabled && !target.isDead()){\n     if (this.canKillShooting(game,attacker,target) || this.canKillAssaulting(game,attacker,target)){\n       return true;\n     }\n   }\n   return false;\n },\n // devuelve verdadero si la unidad que dispara puede llegar a eliminar a la defensora\n canKillShooting: function canKillShooting(game,shooter,target){\n   if (!shooter.isDead() && !target.isDead() && shooter.isEnabled && this.bestAttackResultShooting(game,shooter,target)>=100){\n     return true;\n   }\n   return false;\n },\n // devuelve verdadero si la unidad que asalta puede llegar a eliminar a la defensora\n canKillAssaulting: function canKillAssaulting(game,assaulter,target){\n   if (!assaulter.isDead() && !target.isDead() && assaulter.isEnabled && this.bestAttackResultAssaulting(game,assaulter,target)>=100){\n     return true;\n   }\n   return false;\n },\n // devuelve un porcentaje de destruccion de la unidad defensora tras un ataque de la unidad atacante\n // devuelve el mejor porcentaje posible\n bestAttackResult: function bestAttackResult(game,attacker,target){\n   if (!attacker.isDead() && attacker.isEnabled && !target.isDead()){\n     var barShooting = this.bestAttackResultShooting(game,attacker,target);\n     var barAssaulting = this.bestAttackResultAssaulting(game,attacker,target);\n     var bestAttackResult = Math.max(barShooting, barAssaulting);\n     return bestAttackResult;\n   }\n   return 0;\n },\n // devuelve un porcentaje de destruccion de la unidad defensora tras un disparo de la unidad atacante\n // donde el mejor porcentaje posible: cada ataque supera las tiradas de dados, y el defensor falla los bloqueos\n bestAttackResultShooting: function bestAttackResultShooting(game,unitX,unitY){\n   if (!unitX.isDead() && unitX.isEnabled && !unitY.isDead()){\n     var distance = game.terrain.distance(unitX.position, unitY.position);\n     var livingModels = unitX.livingModels();\n     var attackCount = 0;\n   livingModels.forEach(function (model) {\n       model.equipments.forEach(function (eq) {\n         if (eq.range >= distance) {\n           attackCount += eq.attacks;\n         }\n       });\n     });\n     var unitYModelsAlive = unitY.livingModels().length;\n     var bestAttackResult = attackCount*100/unitYModelsAlive;\n     if (bestAttackResult > 100){\n       bestAttackResult = 100;\n     }\n     return bestAttackResult;\n   }\n   return 0;\n },\n // devuelve un porcentaje de destruccion de la unidad defensora tras un asalto de la unidad atacante\n // donde el mejor porcentaje posible: cada ataque supera las tiradas de dados, y el defensor falla los bloqueos\n bestAttackResultAssaulting: function bestAttackResultAssaulting(game,unitX,unitY){\n   if (!unitX.isDead() && unitX.isEnabled && !unitY.isDead()){\n     if (this.canAssault(game,unitX,unitY)){\n       var attackCount = 0;\n       var livingModels = unitX.livingModels();\n       livingModels.forEach(function (model) {\n         model.equipments.forEach(function (eq) {\n           if (eq.range === 0) {\n             attackCount += eq.attacks;\n           }\n         });\n       });\n       var unitYModelsAlive = unitY.livingModels().length;\n       var bestAttackResult = attackCount*100/unitYModelsAlive;\n       if (bestAttackResult > 100){\n         bestAttackResult = 100;\n       }\n       return bestAttackResult;\n     }\n   }\n   return 0;\n },\n\n // devuelve una lista de unidades enemigas que si shooter les dispara las mata\n shootingKillableUnits: function shootingKillableUnits(game,player,shooter){\n   var shootingKillableUnits = [];\n   var enemyUnits = this.shootableUnitsAux(game,player,shooter);\n\n   for (var i=0; i<enemyUnits.length;i++){\n     var target = enemyUnits[i];\n     if (this.willKillShooting(game,shooter,target)){\n       shootingKillableUnits.push(target);\n     }\n   }\n   return shootingKillableUnits;\n },\n // devuelve una lista de las unidades enemigas que aun estan vivas\n livingEnemyUnits: function livingEnemyUnits(game, player){\n   //[playerArmy, playerUnits, enemyArmy, enemyUnits]\n   var enemyArmy = this.armiesAndUnits(game,player)[2];\n   return enemyArmy.livingUnits();\n },\n // devuelve un array que facilita los datos: playerArmy, playerUnits, enemyArmy, enemyUnits\n armiesAndUnits: function armiesAndUnits(game, player){\n   var playerArmy = game.armies[player];\n   var playerUnits = playerArmy.units;\n   var enemy = game.opponent(player);\n   var enemyArmy = game.armies[enemy];\n   var enemyUnits  = enemyArmy.units;\n   return [playerArmy, playerUnits, enemyArmy, enemyUnits];\n },\n // devuelve true si la unidad tiene algun modelo herido\n wounded: function wounded(unit){\n   return unit.livingModels().length < unit.size(); //FIXME no considero tough\n },\n // devuelve true si el porcentaje de daño en el mejor caso de la unidad atacante hacia la defensora es >= 75\n canWoundALot: function canWoundALot(game,attacker,target){\n   if (!attacker.isDead() && attacker.isEnabled && !target.isDead()){\n     return this.bestAttackResult(game,attacker,target)>=75;\n   }\n   return false;\n },\n // devuelve true si el porcentaje de daño en el mejor caso de la unidad atacante hacia la defensora es > 0\n canWound: function canWound(game,attacker,target){\n   if (!attacker.isDead() && attacker.isEnabled && !target.isDead()){\n     return this.bestAttackResult(game,attacker,target)>0;\n   }\n   return false;\n },\n // devuelve el costo de unidad maximo entre la lista de unidades dada\n maxCost: function maxCost(units){\n   return iterable(units).map(function (unit) { unit.cost(); }).max(0);\n },\n// devuelve la unidad con costo mayor dentro de la lista de unidades dada\n mostExpensiveUnit: function mostExpensiveUnit(units){\n   //var meu = iterable(units).greater(function (unit) { return unit.cost(); });\n   var meu;\n   var maxCost=0;\n   for (var i=0;i<units.length;i++){\n     if (units[i].cost()>maxCost){\n       meu=units[i];\n       maxCost=meu.cost();\n     }\n   }\n   return meu;\n },\n // devuelve la unidad con costo menor de la lista de unidades dada\n cheapestUnit: function cheapestUnit(units){\n   //var meu = iterable(units).greater(function (unit) { return unit.cost(); });\n   var chu;\n   var minCost=0;\n   for (var i=0;i<units.length;i++){\n     if (units[i].cost()>minCost){\n       chu=units[i];\n       minCost=chu.cost();\n     }\n   }\n   return chu;\n },\n //devuelve un valor relativo a que tan fuerte es una unidad\n unitForce: function unitForce(unit){\n   var livingModels = unit.livingModels();\n   var attackCount = 0;\n   livingModels.forEach(function (model) {\n       model.equipments.forEach(function (eq) {\n           attackCount += eq.attacks;\n       });\n     });\n     var force = unit.quality*attackCount + unit.defense/2 + unit.cost()/10;\n     return force;\n     /* //FIXME considerar habilidades\n     if (blast(x)){ force+=1*x;}\n     if (deadlly){ force+=3;}\n     if (poison(x)){ force+=1*x;}\n     if (rending){ force+=1;}\n     if (sniper){ force+=2;}\n     if (isMelee(unit)){\n       if (furiuos){ force+= 0.5;}\n       if (impact(x)){ force+= 1*x;}\n     } else {\n       if (linked){ force+=unit.size;}\n     }\n    */\n },\n //devuelve verdadero si la unit es de las mas fuertes de units\n unitIsStrongest: function unitIsStrongest(units,unit){ //TODO\n   var strongest;\n   var maxForce=0;\n   for (var i=0;i<units.length;i++){\n     if (this.unitForce(units[i])>maxForce){\n       strongest=units[i];\n       maxForce=this.unitForce(strongest);\n     }\n   }\n   return this.unitForce(unit)===maxForce;\n   //return unit.cost()===this.mostExpensiveUnit(units).cost();\n },\n classification: function classification(unit){ //FIXME: considerar las habilidades\n   if (unit.quality >=4 && unit.defense<=3){\n     return \"fastAttack\";  // si tienen poca defensa y mucha calidad o scouts, strider, flying, fast\n   }\n   if (unit.defense>=7){\n     return \"heavySupport\"; //tankes o AP(x), regeneration, stealth, tought(x)\n   }\n   if (unit.size()>=5 && unit.cost()<=130){\n     return \"troop\"; //si son varias unidades y el costo es bajo\n   }\n   if (unit.maxRange() >=36){\n     return \"sniper\"; //el maxRange es mayor a 36, o indirect, sniper\n   }\n   return \"\";\n },\n // devuelve true si la unidad es una de las que tiene el mayor rango de una lista de unidades dada\nmaxRangeInUnits: function maxRangeInUnits(units,unit){\n    var maxRange = iterable(units).map(function (unit) {\n      return unit.maxRange();\n    }).max(0);\n    return unit.maxRange() === maxRange;\n  },\n // devuelve true si la unidad es una de las mas faciles de eliminar de una lista de unidades dada\n easiestToKill: function easiestToKill(units,unit){\n   var easeToKill = iterable(units).map(function (u) {\n     return u.livingModels().length * u.defense;\n   }).max(0);\n   return unit.livingModels().length * unit.defense === easeToKill;\n   /* en realidad deberiamos considerar esto tambien:\n   if (regeneration){ easeToKill+=1;}\n   if (tought(x)){ easeToKill+=1.5*x;}\n   if (stealth){ easeToKill+=0.5;}*/\n },\n/*devuelve el porcentaje de modelos destruidos según el resultado esperado\nluego de un ataque de disparo realizado por la shooter a la target*/\n expectedResultShooting: function expectedResultShooting(game,shooter,target){\n if (this.canShoot_(game,shooter,target,true)){\n     var distance = game.terrain.distance(shooter.position, target.position);\n     var livingModels = shooter.livingModels();\n     var attackCount = 0;\n   livingModels.forEach(function (model) {\n       model.equipments.forEach(function (eq) {\n         if (eq.range >= distance) {\n           attackCount += eq.attacks;\n         }\n       });\n     });\n     //se calculan los hits\n     var diceResult = 0;\n     var hits = 0;\n     for (var h=0;h<attackCount;h++){\n       diceResult = Math.floor(3+Math.random()*4); //o 3 o 4\n       if (shooter.quality>diceResult){\n         hits += 1;\n       }\n     }\n     //se calculan los blocks\n     var blocks = 0;\n     for (var b=0;b<hits;b++){\n       diceResult = Math.floor(1+Math.random()*6);\n       if (target.defense>diceResult){\n         blocks += 1;\n       }\n     }\n     //se restan y se calcula el porcentaje\n     var wounds = hits - blocks;\n     var targetModelsAlive = target.livingModels().length;\n     var expectedResult = wounds*100/targetModelsAlive;\n     if (expectedResult > 100){\n       expectedResult = 100;\n     }\n     return expectedResult;\n   }\n   return 0;\n   },\n/*devuelve el porcentaje de modelos que tendra la unidad defensora respecto a su cantidad\ninicial en el juego, luego de un ataque melee realizado por la assaulter a la target*/\n  expectedResultAssaulting: function expectedResultAssaulting(game,assaulter,target){\n     return 0; //TODO\n   },\n  willKillShooting: function willKillShooting(game,shooter,target){\n    return this.expectedResultShooting(game,shooter,target)===100;\n  },\n  willWoundALotShooting: function willWoundALotShooting(game,shooter,target){\n    return this.expectedResultShooting(game,shooter,target)>75;\n  },\n  willWoundHalfShooting: function willWoundHalfShooting(game,shooter,target){\n    return this.expectedResultShooting(game,shooter,target)>=50;\n  },\n  willWoundShooting: function willWoundShooting(game,shooter,target){\n    return this.expectedResultShooting(game,shooter,target)>0;\n  },\n  willKillAssaulting: function willKillAssaulting(game,assaulter,target){\n    return this.expectedResultAssaulting(game,assaulter,target)===100;\n  },\n  willWoundALotAssaulting: function willWoundALotAssaulting(game,assaulter,target){\n    return this.expectedResultAssaulting(game,assaulter,target)>75;\n  },\n  willWoundHalfAssaulting: function willWoundHalfAssaulting(game,assaulter,target){\n    return this.expectedResultAssaulting(game,assaulter,target)>=50;\n  },\n  willWoundAssaulting: function willWoundAssaulting(game,assaulter,target){\n    return this.expectedResultAssaulting(game,assaulter,target)>0;\n  },\n  /*Devuelve verdadero si el jugador va acumulando mas puntos de unidades completamente\n  destruidas que el oponente.*/\n  winning: function winning(game){\n    var activePlayer = game.activePlayer();\n    var enemyPlayer = game.players[0];\n    if (activePlayer === game.players[0]) {\n      enemyPlayer = game.players[1];\n    }\n     return game.scores(activePlayer) > game.scores(enemyPlayer);\n  },\n  /*Devuelve verdadero si tras la eliminación de la unitX el puntaje del jugador pasa a ser\n  menor que el puntaje del oponente.*/\n  losingGameByUnitElimination: function losingGameByUnitElimination(game,unit){\n    var activePlayer = game.activePlayer();\n    var enemyPlayer = game.players[0];\n    if (activePlayer === game.players[0]) {\n      enemyPlayer = game.players[1];\n    }\n    return (game.scores(activePlayer) - unit.cost()) < game.scores(enemyPlayer);\n  },\n  /*Devuelve verdadero si queda al menos una unidad del jugador que no haya sido activada\n  esta ronda que al atacar pueda matar (o dejar pinned) a una unidad con puntaje tal que al\n  eliminarla el jugador pasaria a ganar. */\n  winningActivation: function winningActivation(game,player){\n    if (game.round===4){\n      var activePlayer = game.activePlayer();\n      var enemyPlayer = game.players[0];\n      if (activePlayer === game.players[0]) {\n        enemyPlayer = game.players[1];\n      }\n     var toKillUnits = [];\n     var enemyUnits = this.livingEnemyUnits(game,player);\n     enemyUnits.forEach(function (eu){\n       if(game.scores(activePlayer) > (game.scores(enemyPlayer)-eu.cost())){\n         toKillUnits.push(eu);\n       }\n     });\n     var possibleUnits = this.possibleUnits(game, player);\n     for (i=0; i<possibleUnits.length;i++){\n       var pos = possibleUnits[i];\n       for (j=0; j<toKillUnits.length;j++){\n         var tk = toKillUnits[j];\n         if (this.canKill(game,pos,tk)||this.canPin(game,pos,tk)){\n           return true;\n         }\n       }\n     }\n    }\n    return false;\n },\n //\tdevuelve true si puede dejar pinned a la unidad\n canPin: function canPin(game,assaulter,target){ //FIXME verificar las reglas\n  if (this.canAssault(game,assaulter,target)){\n    //queda con la mitad o menos de modelos iniciales\n    var attackCount = 0;\n    var livingModels = assaulter.livingModels();\n    livingModels.forEach(function (model) {\n      model.equipments.forEach(function (eq) {\n        if (eq.range === 0) {\n          attackCount += eq.attacks;\n        }\n      });\n    });\n    if (attackCount >= (target.size())/2){\n      return true;\n    }\n  }\n  return false;\n },\n //si tenes armas de cuerpo a cuerpo con mas ataques que 1 o furiuos o impact(x)\n isMelee: function isMelee(unit){\n   var shootRange = 0;\n   var shootAttacks = 0;\n   var livingModels = unit.livingModels();\n   livingModels.forEach(function (model) {\n       model.equipments.forEach(function (eq) {\n         if (eq.range >= shootRange) {\n           shootRange = eq.range;\n           shootAttacks = eq.attacks;\n         }\n       });\n    });\n    if (shootRange === 0){\n      return true;\n    }\n    livingModels.forEach(function (model) {\n       model.equipments.forEach(function (eq) {\n         if (eq.range === 0 && eq.attacks > shootAttacks) {\n           return true;\n         }\n       });\n    });\n    //FIXME considerar las habilidades\n    /*livingModels.forEach(function (model) {\n         model.equipments.forEach(function (eq) {\n           if (eq.range === 0 && eq.attacks > 1) {\n             if (\"furiuos\" in model.specials || \"impact(x)\" in model.specials){\n               return true;\n             }\n           }\n         });\n    });*/\n    return false;\n  },\n\n // ## Rules /////////////////////////////////////////////////////////////////\n\n//-------------------------priority 12 ex16-----------------------------------------\n/* si es la ronda final y voy perdiendo, y paso a perder si matan a unitX,\nsi pueden matar a unitX y van a herirla, si unitX va a herir a unitY2,\ny el coste de X es mayor al de Y2, y el coste de unitX2 es mayor que el de unitX,\ny puede asistir a unitX2 entonces asistir*/\nrule_12A: playerRule(12, function rule_12A(game, player){\n    if (game.round === 3 && !this.winning(game)){\n      var possibleUnits = this.playerPossibleUnits;\n      //[playerArmy, playerUnits, enemyArmy, enemyUnits]\n      var units = this.armiesAndUnits(game,player)[1];\n      var enemyUnits = this.livingEnemyUnits(game, player);\n      for (var i = 0; i < possibleUnits.length; i++) {\n        var unitX = possibleUnits[i];\n        var enemyShootableUnits = this.enemyShootableUnits(game, player, unitX);\n        if (this.canBeKilled(game,player,unitX)){\n          for (var j = 0; j < enemyUnits.length; j++) {\n            var unitY = enemyUnits[j];\n            if (this.willWoundShooting(game,unitY,unitX)){\n              for (var j2 = 0; j2 < enemyShootableUnits.length; j2++) {\n                var unitY2 = enemyShootableUnits[j2];\n                if (this.willWoundShooting(game,unitX,unitY2)&&unitX.cost()>unitY2.cost()){\n                  for (var k = 0; k < units.length; k++) {\n                    var unitX2 = units[k];\n                    if (unitX2.cost()>unitX.cost()&&this.canAssist(game,player,unitX,unitX2)){\n                     //console.log(\"rule_12A. assist\");\n                     return this.assist(game,player,unitX,unitX2);\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n return null;\n}),\n/* si es la ronda final y voy perdiendo, y queda activacion ganadora y no paso a perder si matan a unitX,\nsi pueden matar a unitX y van a herirla, si unitX va a herir a unitY2 mas de la mitad asaltando,\ny el coste de X es mayor al de Y2, y unitX no puede escapar, entonces asaltar a unitY2, */\nrule_12B: playerRule(12, function rule_12B(game, player){\n    if (game.round === 3 && !this.winning(game) && this.winningActivation(game,player)){\n      var possibleUnits = this.playerPossibleUnits;\n      //[playerArmy, playerUnits, enemyArmy, enemyUnits]\n      var units = this.armiesAndUnits(game,player)[1];\n      var enemyUnits = this.livingEnemyUnits(game, player);\n      for (var i = 0; i < possibleUnits.length; i++) {\n        var unitX = possibleUnits[i];\n        var enemyAssaultableUnits = this.enemyAssaultableUnits(game, player, unitX);\n        if (this.canBeKilled(game,player,unitX)&&!this.canScape(game,player,unitX)){\n          for (var j = 0; j < enemyUnits.length; j++) {\n            var unitY = enemyUnits[j];\n            if (this.willWoundShooting(game,unitY,unitX)){\n              for (var j2 = 0; j2 < enemyAssaultableUnits.length; j2++) {\n                var unitY2 = enemyAssaultableUnits[j2];\n                if (this.willWoundHalfAssaulting(game,unitX,unitY2)&&unitX.cost()>unitY2.cost()){\n                   //console.log(\"rule_12B. assault\");\n                   return this.assault(unitX,unitY2);\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n return null;\n}),\n/* si es la ronda final y voy perdiendo, y queda activacion ganadora y no paso a perder si matan a unitX,\nsi pueden matar a unitX y van a herirla, si unitX va a herir a unitY2 mas de la mitad asaltando,\ny el coste de X es mayor al de Y2, y unitX puede escapar, entonces escapa,*/\nrule_12C: playerRule(12, function rule_12C(game, player){\n    if (game.round === 3 && !this.winning(game) && this.winningActivation(game,player)){\n      var possibleUnits = this.playerPossibleUnits;\n      //[playerArmy, playerUnits, enemyArmy, enemyUnits]\n      var units = this.armiesAndUnits(game,player)[1];\n      var enemyUnits = this.livingEnemyUnits(game, player);\n      for (var i = 0; i < possibleUnits.length; i++) {\n        var unitX = possibleUnits[i];\n        var enemyAssaultableUnits = this.enemyAssaultableUnits(game, player, unitX);\n        if (this.canBeKilled(game,player,unitX)&&this.canScape(game,player,unitX)){\n          for (var j = 0; j < enemyUnits.length; j++) {\n            var unitY = enemyUnits[j];\n            if (this.willWoundShooting(game,unitY,unitX)){\n              for (var j2 = 0; j2 < enemyAssaultableUnits.length; j2++) {\n                var unitY2 = enemyAssaultableUnits[j2];\n                if (this.willWoundHalfAssaulting(game,unitX,unitY2)&&unitX.cost()>unitY2.cost()){\n                   //console.log(\"rule_12C. scape\");\n                   return this.scape(game,player,unitX);\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n return null;\n}),\n/* si es la ronda final y voy perdiendo, y queda una activacion ganadora\n si pueden matar a unitX y van a herirla, si unitX puede matar y va a herir,\n si el costo de unitX es mayor al del que puede mata,\n y la unitX no puede escapar entonces entonces ataca a unitY2*/\nrule_12D: playerRule(12, function rule_12D(game, player){\n    if (game.round === 3 && !this.winning(game) && this.winningActivation(game,player)){\n      var possibleUnits = this.playerPossibleUnits;\n      //[playerArmy, playerUnits, enemyArmy, enemyUnits]\n      var units = this.armiesAndUnits(game,player)[1];\n      var enemyUnits = this.livingEnemyUnits(game, player);\n      for (var i = 0; i < possibleUnits.length; i++) {\n        var unitX = possibleUnits[i];\n        var enemyShootableUnits = this.enemyShootableUnits(game, player, unitX);\n        if (this.canBeKilled(game,player,unitX)&&!this.canScape(game,player,unitX)){\n          for (var j = 0; j < enemyUnits.length; j++) {\n            var unitY = enemyUnits[j];\n            if (this.willWoundShooting(game,unitY,unitX)){\n              for (var j2 = 0; j2 < enemyShootableUnits.length; j2++) {\n                var unitY2 = enemyShootableUnits[j2];\n                if (this.willWoundShooting(game,unitX,unitY2)&&this.canKill(game,unitX,unitY2)&&unitX.cost()>unitY2.cost()){\n                   //console.log(\"rule_12D. shoot\");\n                   return this.shoot(unitX,unitY2);\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n return null;\n}),\n//-------------------------priority 11 ex15-----------------------------------------\n/* si es la ronda final y voy perdiendo,\nsi pueden matar a unitX y van a herirla, si unitX va a herir a unitY2 mas de la mitad asaltando,\ny el coste de X es mayor al de Y2, y unitX puede escapar, entonces escapa,*/\nrule_11A: playerRule(11, function rule_11A(game, player){\n    if (game.round === 3 && !this.winning(game)){\n      var possibleUnits = this.playerPossibleUnits;\n      //[playerArmy, playerUnits, enemyArmy, enemyUnits]\n      var units = this.armiesAndUnits(game,player)[1];\n      var enemyUnits = this.livingEnemyUnits(game, player);\n      for (var i = 0; i < possibleUnits.length; i++) {\n        var unitX = possibleUnits[i];\n        var enemyAssaultableUnits = this.enemyAssaultableUnits(game, player, unitX);\n        if (this.canBeKilled(game,player,unitX)&&this.canScape(game,player,unitX)){\n          for (var j = 0; j < enemyUnits.length; j++) {\n            var unitY = enemyUnits[j];\n            if (this.willWoundShooting(game,unitY,unitX)){\n              for (var j2 = 0; j2 < enemyAssaultableUnits.length; j2++) {\n                var unitY2 = enemyAssaultableUnits[j2];\n                if (this.willWoundHalfAssaulting(game,unitX,unitY2)&&unitX.cost()>unitY2.cost()){\n                   //console.log(\"rule_11A. scape\");\n                   return this.scape(game,player,unitX);\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n return null;\n}),\n/* si es la ronda final y voy ganando, y queda activacion ganadora,\nsi pueden matar a unitX y van a herirla, si unitX va a herir a unitY2 mas de la mitad asaltando,\ny el coste de X es mayor al de Y2, y unitX puede escapar, entonces escapa,*/\nrule_11B: playerRule(11, function rule_11B(game, player){\n    if (game.round === 3 && this.winning(game) && this.winningActivation(game,player)){\n      var possibleUnits = this.playerPossibleUnits;\n      //[playerArmy, playerUnits, enemyArmy, enemyUnits]\n      var units = this.armiesAndUnits(game,player)[1];\n      var enemyUnits = this.livingEnemyUnits(game, player);\n      for (var i = 0; i < possibleUnits.length; i++) {\n        var unitX = possibleUnits[i];\n        var enemyAssaultableUnits = this.enemyAssaultableUnits(game, player, unitX);\n        if (this.canBeKilled(game,player,unitX)&&this.canScape(game,player,unitX)){\n          for (var j = 0; j < enemyUnits.length; j++) {\n            var unitY = enemyUnits[j];\n            if (this.willWoundShooting(game,unitY,unitX)){\n              for (var j2 = 0; j2 < enemyAssaultableUnits.length; j2++) {\n                var unitY2 = enemyAssaultableUnits[j2];\n                if (this.willWoundHalfAssaulting(game,unitX,unitY2)&&unitX.cost()>unitY2.cost()){\n                   //console.log(\"rule_11B. scape\");\n                   return this.scape(game,player,unitX);\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n return null;\n}),\n/* si es la ronda final y voy ganando, y queda activacion ganadora,\nsi pueden matar a unitX y van a herirla, si unitX va a herir a unitY2 mas de la mitad asaltando,\ny el coste de X es mayor al de Y2, y no unitX puede escapar, entonces asalta a Y2,*/\nrule_11C: playerRule(11, function rule_11C(game, player){\n    if (game.round === 3 && this.winning(game) && this.winningActivation(game,player)){\n      var possibleUnits = this.playerPossibleUnits;\n      //[playerArmy, playerUnits, enemyArmy, enemyUnits]\n      var units = this.armiesAndUnits(game,player)[1];\n      var enemyUnits = this.livingEnemyUnits(game, player);\n      for (var i = 0; i < possibleUnits.length; i++) {\n        var unitX = possibleUnits[i];\n        var enemyAssaultableUnits = this.enemyAssaultableUnits(game, player, unitX);\n        if (this.canBeKilled(game,player,unitX)&&!this.canScape(game,player,unitX)){\n          for (var j = 0; j < enemyUnits.length; j++) {\n            var unitY = enemyUnits[j];\n            if (this.willWoundShooting(game,unitY,unitX)){\n              for (var j2 = 0; j2 < enemyAssaultableUnits.length; j2++) {\n                var unitY2 = enemyAssaultableUnits[j2];\n                if (this.willWoundHalfAssaulting(game,unitX,unitY2)&&unitX.cost()>unitY2.cost()){\n                   //console.log(\"rule_11C. assault\");\n                   return this.assault(unitX,unitY2);\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n return null;\n}),\n/* si es la ronda final y voy perdiendo, y no queda activacion ganadora y no paso a perder si matan a unitX,\nsi pueden matar a unitX y van a herirla, si unitX va a herir a unitY2 mas de la mitad asaltando,\ny el coste de X es mayor al de Y2, entonces asalta,*/\nrule_11D: playerRule(11, function rule_11D(game, player){\n    if (game.round === 3 && this.winning(game) && this.winningActivation(game,player)){\n      var possibleUnits = this.playerPossibleUnits;\n      //[playerArmy, playerUnits, enemyArmy, enemyUnits]\n      var units = this.armiesAndUnits(game,player)[1];\n      var enemyUnits = this.livingEnemyUnits(game, player);\n      for (var i = 0; i < possibleUnits.length; i++) {\n        var unitX = possibleUnits[i];\n        var enemyAssaultableUnits = this.enemyAssaultableUnits(game, player, unitX);\n        if (this.canBeKilled(game,player,unitX)&&!this.losingGameByUnitElimination(game,unitX)){\n          for (var j = 0; j < enemyUnits.length; j++) {\n            var unitY = enemyUnits[j];\n            if (this.willWoundShooting(game,unitY,unitX)){\n              for (var j2 = 0; j2 < enemyAssaultableUnits.length; j2++) {\n                var unitY2 = enemyAssaultableUnits[j2];\n                if (this.willWoundHalfAssaulting(game,unitX,unitY2)&&unitX.cost()>unitY2.cost()){\n                   //console.log(\"rule_11D. assault\");\n                   return this.assault(unitX,unitY2);\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n return null;\n}),\n//-------------------------priority 10 ex12-----------------------------------------\n/*si ronda = 1 y this.unitIsStrongest(enemyUnits,unitY) y this.willWoundHalfAssaulting(game,unitX,unitY)\ny this.isMelee(unitX) entonces this.assault(unitX,unitY)*/\nrule_10A: playerRule(10, function rule_10A(game, player){\n  if (game.round === 1){\n    var possibleUnits = this.playerPossibleUnits;\n    for (var i = 0; i < possibleUnits.length; i++) {\n      var unitX = possibleUnits[i];\n      var enemyAssaultableUnits = this.enemyAssaultableUnits(game, player, unitX);\n      if (this.isMelee(unitX)){\n        for (var j=0; j<enemyAssaultableUnits.length; j++){\n          var unitY = enemyAssaultableUnits[j];\n          if (this.unitIsStrongest(enemyAssaultableUnits,unitY)&&this.willWoundHalfAssaulting(game,unitX,unitY)){\n             //console.log(\"rule_10A. assault\");\n             return this.assault(unitX,unitY);\n          }\n        }\n      }\n    }\n  }\n return null;\n}),\n/*si ronda = 2 y this.unitIsStrongest(enemyUnits,unitY) y this.willWoundHalfAssaulting(game,unitX,unitY)\ny this.isMelee(unitX) entonces this.assault(unitX,unitY)*/\nrule_10B: playerRule(10, function rule_10B(game, player){\n  if (game.round === 2){\n    var possibleUnits = this.playerPossibleUnits;\n    for (var i = 0; i < possibleUnits.length; i++) {\n      var unitX = possibleUnits[i];\n      var enemyAssaultableUnits = this.enemyAssaultableUnits(game, player, unitX);\n      if (this.isMelee(unitX)){\n        for (var j=0; j<enemyAssaultableUnits.length; j++){\n          var unitY = enemyAssaultableUnits[j];\n          if (this.unitIsStrongest(enemyAssaultableUnits,unitY)&&this.willWoundHalfAssaulting(game,unitX,unitY)){\n             //console.log(\"rule_10B. assault\");\n             return this.assault(unitX,unitY);\n          }\n        }\n      }\n    }\n  }\n return null;\n}),\n\n\n//-------------------------priority 9 ex11-----------------------------------------\n/*si ronda = 2 y this.easiestToKill(enemyUnits,unitY) y\nthis.willWoundHalfAssaulting(game,unitX,unitY)\nentonces this.assault(unitX,unitY)*/\nrule_9A: playerRule(9, function rule_9A(game, player){\n  if (game.round === 2){\n    var possibleUnits = this.playerPossibleUnits;\n    for (var i = 0; i < possibleUnits.length; i++) {\n      var unitX = possibleUnits[i];\n      var enemyAssaultableUnits = this.enemyAssaultableUnits(game, player, unitX);\n      for (var j=0; j<enemyAssaultableUnits.length; j++){\n        var unitY = enemyAssaultableUnits[j];\n        if (this.easiestToKill(enemyAssaultableUnits,unitY)&&this.willWoundHalfAssaulting(game,unitX,unitY)){\n           //console.log(\"rule_11A. assault\");\n           return this.assault(unitX,unitY);\n        }\n      }\n    }\n  }\n return null;\n}),\n/*si ronda = 1 y this.easiestToKill(enemyUnits,unitY) y this.willWoundHalfAssaulting(game,unitX,unitY)\nentonces this.assault(unitX,unitY)*/\nrule_9B: playerRule(9, function rule_9B(game, player){\n  if (game.round === 1){\n    var possibleUnits = this.playerPossibleUnits;\n    for (var i = 0; i < possibleUnits.length; i++) {\n      var unitX = possibleUnits[i];\n      var enemyAssaultableUnits = this.enemyAssaultableUnits(game, player, unitX);\n      for (var j=0; j<enemyAssaultableUnits.length; j++){\n        var unitY = enemyAssaultableUnits[j];\n        if (this.easiestToKill(enemyAssaultableUnits,unitY)&&this.willWoundHalfAssaulting(game,unitX,unitY)){\n           //console.log(\"rule_9B. assault\");\n           return this.assault(unitX,unitY);\n        }\n      }\n    }\n  }\n return null;\n}),\n\n//-------------------------priority 8-----------------------------------------\n/*si ronda = 3 y !this.canBeKilled(game,player,unitX) y this.winning(game) y\nunitX2.cost()>unitX.cost() y !this.canAssist(game,player,unitX,unitX2) y\nthis.willKillShooting(game,unitX,unitY) y unitY.cost() === this.mostExpensiveUnit(enemyUnits).cost()\nentonces this.shoot(unitX,unitY)*/\nrule_8A: playerRule(8, function rule_8A(game, player){\n  if (game.round === 3&&this.winning(game)){\n    var possibleUnits = this.playerPossibleUnits;\n    //[playerArmy, playerUnits, enemyArmy, enemyUnits]\n    var units = this.armiesAndUnits(game,player)[1];\n    for (var i = 0; i < possibleUnits.length; i++) {\n      var unitX = possibleUnits[i];\n      var enemyShootableUnits = this.enemyShootableUnits(game, player, unitX);\n      if (!this.canBeKilled(game,player,unitX)){\n        for (var k=0; k<units.length;k++){\n          var unitX2 = units[k];\n          if (unitX2.cost()>unitX.cost()&&!this.canAssist(game,player,unitX,unitX2)){\n            for (var j=0; j<enemyShootableUnits.length; j++){\n              var unitY = enemyShootableUnits[j];\n              if (this.willKillShooting(game,unitX,unitY)&&unitY.cost()===this.mostExpensiveUnit(enemyShootableUnits).cost()){\n                 //console.log(\"rule_8A. shoot\");\n                 return this.shoot(unitX,unitY);\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n return null;\n}),\n/*si ronda = 3 y this.canKill(game,unitY,unitX) y this.willWoundShooting(game,unitY,unitX) y\nthis.willWoundShooting(game,unitX,unitY2) y unitX.cost()<unitY2.cost() y this.winning(game)\n y entonces this.shoot(unitX,unitY2)*/\nrule_8B: playerRule(8, function rule_8B(game, player){\n  if (game.round === 3 && this.winning(game)){\n    var possibleUnits = this.playerPossibleUnits;\n    //[playerArmy, playerUnits, enemyArmy, enemyUnits]\n    var units = this.armiesAndUnits(game,player)[1];\n    var enemyUnits = this.livingEnemyUnits(game,player);\n    for (var i = 0; i < possibleUnits.length; i++) {\n      var unitX = possibleUnits[i];\n      var enemyShootableUnits = this.enemyShootableUnits(game, player, unitX);\n      if (this.canBeKilled(game,player,unitX)){\n        for (var k=0; k<enemyUnits.length;k++){\n          var unitY2 = enemyUnits[k];\n          if (unitX.cost()<unitY2.cost()&&this.canKill(game,unitX,unitY2)&&this.willWoundShooting(game,unitX,unitY2)){\n            for (var j=0; j<enemyShootableUnits.length; j++){\n              var unitY = enemyShootableUnits[j];\n              if (this.willWoundShooting(game,unitY,unitX)){\n                 //console.log(\"rule_8B. shoot\");\n                 return this.shoot(unitX,unitY2);\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n return null;\n}),\n/*si ronda = 3 y this.canKill(game,unitY,unitX) y this.willWoundShooting(game,unitY,unitX) y\nthis.willWoundShooting(game,unitX,unitY2) y unitX.cost()>unitY2.cost() y unitX.cost()<unitX2.cost()\ny this.canAssist(game,player,unitX,unitX2) entonces this.assist(game,player,unitX,unitX2)*/\nrule_8C: playerRule(8, function rule_8C(game, player){\n  if (game.round === 3&&this.winning(game)){\n    var possibleUnits = this.playerPossibleUnits;\n    //[playerArmy, playerUnits, enemyArmy, enemyUnits]\n    var units = this.armiesAndUnits(game,player)[1];\n    var enemyUnits = this.livingEnemyUnits(game,player);\n    for (var i = 0; i < possibleUnits.length; i++) {\n      var unitX = possibleUnits[i];\n      var enemyShootableUnits = this.enemyShootableUnits(game, player, unitX);\n      if (this.canBeKilled(game,player,unitX)){\n        for (var k=0; k<units.length;k++){\n          var unitX2 = units[k];\n          if (unitX.cost()<unitX2.cost()&&this.canAssist(game,player,unitX,unitX2)){\n            for (var j=0; j<enemyUnits.length; j++){\n              var unitY = enemyUnits[j];\n              if (this.willWoundShooting(game,unitY,unitX)){\n                for (var j2=0; j2<enemyShootableUnits.length; j2++){\n                  var unitY2 = enemyShootableUnits[j2];\n                  if (this.willWoundShooting(game,unitX,unitY2)&&unitX.cost()>unitY2.cost()){\n                    //console.log(\"rule_8C. assist\");\n                    return this.assist(game,player,unitX,unitX2);\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n return null;\n}),\n//-------------------------priority 7-----------------------------------------\n/*si ronda = 3 y !this.canBeKilled(game,player,unitX) y unitX2.cost()>unitX.cost()\ny this.canWound(game,unitX,unitY) y this.easiestToKill(enemyUnits,unitY) entonces this.shoot(unitX,unitY)*/\nrule_7A: playerRule(7, function rule_7A(game, player){\n  if (game.round === 3){\n    var possibleUnits = this.playerPossibleUnits;\n    //[playerArmy, playerUnits, enemyArmy, enemyUnits]\n    var units = this.armiesAndUnits(game,player)[1];\n    for (var i = 0; i < possibleUnits.length; i++) {\n      var unitX = possibleUnits[i];\n      if (!this.canBeKilled(game,player,unitX)){\n        for (var k=0; k<units.length;k++){\n          var unitX2 = units[k];\n          if (unitX2.cost()>unitX.cost()){\n            var enemyShootableUnits = this.enemyShootableUnits(game, player, unitX);\n            for (var j = 0; j < enemyShootableUnits.length; j++) {\n              var unitY = enemyShootableUnits[j];\n              if (this.easiestToKill(enemyShootableUnits,unitY)&&this.canWound(game,unitX,unitY)){\n                 //console.log(\"rule_7A. shoot\");\n                 return this.shoot(unitX,unitY);\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n return null;\n}),\n/*si ronda = 3 y this.canKill(game,unitY,unitX) y this.willWoundShooting(game,unitY,unitX)\ny puntaje(unidadY2) = maxEnemigos y this.canKill(game,unitX,unitY2) y\nthis.willWoundShooting(game,unitX,unitY2) entonces this.shoot(unitX,unitY2)*/\nrule_7B: playerRule(7, function rule_7B(game, player){\n  if (game.round === 3){\n    var possibleUnits = this.playerPossibleUnits;\n    //[playerArmy, playerUnits, enemyArmy, enemyUnits]\n    var units = this.armiesAndUnits(game,player)[1];\n    var enemyUnits = this.livingEnemyUnits(game,player);\n    for (var i = 0; i < possibleUnits.length; i++) {\n      var unitX = possibleUnits[i];\n      if (this.canBeKilled(game,player,unitX)){\n        var enemyShootableUnits = this.enemyShootableUnits(game, player, unitX);\n        for (var k=0; k<enemyShootableUnits.length;k++){\n          var unitY2 = enemyShootableUnits[k];\n          if (unitY2.cost()===this.mostExpensiveUnit(enemyUnits).cost()&&this.canKill(game,unitX,unitY2)&&this.willWoundShooting(game,unitX,unitY2)){\n            for (var j=0; j<enemyUnits.length; j++){\n              var unitY = enemyUnits[j];\n              if (this.willWoundShooting(game,unitY,unitX)){\n                 //console.log(\"rule_7B. shoot\");\n                 return this.shoot(unitX,unitY2);\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n return null;\n}),\n/*si ronda = 3 y this.canKill(game,unitY,unitX) y this.willWoundShooting(game,unitY,unitX) y\nthis.canKill(game,unitX,unitY2) y this.willWoundShooting(game,unitX,unitY2) y unitX.cost()<unitY2.cost()\nentonces this.shoot(unitX,unitY2)*/\nrule_7C: playerRule(7, function rule_7C(game, player){\n  if (game.round === 3){\n    var possibleUnits = this.playerPossibleUnits;\n    //[playerArmy, playerUnits, enemyArmy, enemyUnits]\n    var units = this.armiesAndUnits(game,player)[1];\n    var enemyUnits = this.livingEnemyUnits(game,player);\n    for (var i = 0; i < possibleUnits.length; i++) {\n      var unitX = possibleUnits[i];\n      if (this.canBeKilled(game,player,unitX)){\n        var enemyShootableUnits = this.enemyShootableUnits(game, player, unitX);\n        for (var k=0; k<enemyShootableUnits.length;k++){\n          var unitY2 = enemyShootableUnits[k];\n          if (unitX.cost()<unitY2.cost()&&this.canKill(game,unitX,unitY2)&&this.willWoundShooting(game,unitX,unitY2)){\n            for (var j=0; j<enemyUnits.length; j++){\n              var unitY = enemyUnits[j];\n              if (this.willWoundShooting(game,unitY,unitX)){\n                 //console.log(\"rule_7C. shoot\");\n                 return this.shoot(unitX,unitY2);\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n return null;\n}),\n/*si ronda = 3 y this.canKill(game,unitY,unitX) y this.willWoundShooting(game,unitY,unitX) y\nthis.willWoundShooting(game,unitX,unitY2) y unitX.cost()<unitY2.cost() y !this.winning(game)\nentonces this.shoot(unitX,unitY2)*/\nrule_7D: playerRule(7, function rule_7D(game, player){\n  if (game.round === 3 && !this.winning(game)){\n    var possibleUnits = this.playerPossibleUnits;\n    //[playerArmy, playerUnits, enemyArmy, enemyUnits]\n    var units = this.armiesAndUnits(game,player)[1];\n    var enemyUnits = this.livingEnemyUnits(game,player);\n    for (var i = 0; i < possibleUnits.length; i++) {\n      var unitX = possibleUnits[i];\n      if (this.canBeKilled(game,player,unitX)){\n        for (var k=0; k<enemyUnits.length;k++){\n          var unitY2 = enemyUnits[k];\n          if (unitX.cost()<unitY2.cost()&&this.willWoundShooting(game,unitX,unitY2)){\n            var enemyShootableUnits = this.enemyShootableUnits(game, player, unitX);\n            for (var j = 0; j < enemyShootableUnits.length; j++) {\n              var unitY = enemyShootableUnits[j];\n              if (this.willWoundShooting(game,unitY,unitX)){\n                 //console.log(\"rule_7D. shoot\");\n                 return this.shoot(unitX,unitY2);\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n return null;\n}),\n/*si ronda = 3 y this.canKill(game,unitY,unitX) y this.willWoundShooting(game,unitY,unitX) y\n!this.willWoundShooting(game,unitX,unitY2) y puntaje(unidadX) <puntaje(unidadX2)\ny this.canAssist(game,player,unitX,unitX2) entonces this.assist(game,player,unitX,unitX2)*/\nrule_7E: playerRule(7, function rule_7E(game, player){\n  if (game.round === 3){\n    var possibleUnits = this.playerPossibleUnits;\n    for (var i = 0; i < possibleUnits.length; i++) {\n      var unitX = possibleUnits[i];\n      var enemyShootableUnits = this.enemyShootableUnits(game, player, unitX);\n      if (this.canBeKilled(game,player,unitX)){\n        for (var k=0; k<enemyShootableUnits.length;k++){\n          var unitY2 = enemyShootableUnits[k];\n          if (!this.willWoundShooting(game,unitX,unitY2)){\n            for (var j = 0; j < enemyShootableUnits.length; j++) {\n              var unitY = enemyShootableUnits[j];\n              if (this.willWoundShooting(game,unitY,unitX)){\n                for (var h=0;h<possibleUnits.length;h++){\n                  var unitX2 = possibleUnits[h];\n                  if (unitX.cost()<unitX2.cost()&&this.canAssist(game,player,unitX,unitX2)){\n                    //console.log(\"rule_7E. assist\");\n                    return this.assist(game,player,unitX,unitX2);\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n return null;\n}),\n/*si ronda = 3 y this.canKill(game,unitY,unitX) y this.willWoundShooting(game,unitY,unitX) y\n!this.willWoundShooting(game,unitX,unitY2) y unitX.cost()<unitX2.cost()\ny !this.canAssist(game,player,unitX,unitX2) y\npuede escapar unitX entonces this.scape(game,player,unitX)*/\nrule_7F: playerRule(7, function rule_7F(game, player){\n  if (game.round === 3){\n    var possibleUnits = this.playerPossibleUnits;\n    for (var i = 0; i < possibleUnits.length; i++) {\n      var unitX = possibleUnits[i];\n      var enemyShootableUnits = this.enemyShootableUnits(game, player, unitX);\n      if (this.canBeKilled(game,player,unitX)&&this.canScape(game,player,unitX)){\n        for (var k=0; k<enemyShootableUnits.length;k++){\n          var unitY2 = enemyShootableUnits[k];\n          if (!this.willWoundShooting(game,unitX,unitY2)){\n            for (var j = 0; j < enemyShootableUnits.length; j++) {\n              var unitY = enemyShootableUnits[j];\n              if (this.willWoundShooting(game,unitY,unitX)){\n                for (var h=0;h<possibleUnits.length;h++){\n                  var unitX2 = possibleUnits[h];\n                  if (unitX.cost()<unitX2.cost()&&!this.canAssist(game,player,unitX,unitX2)){\n                    //console.log(\"rule_7F. scape\");\n                    return this.scape(game,player,unitX);\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n return null;\n}),\n//-------------------------priority 6-----------------------------------------\n/*si ronda = 3 y !this.canBeKilled(game,player,unitX) y\ndentro de las que puede matar, disparar a la mas cara*/\nrule_6A: playerRule(6, function rule_6A(game, player){\n  if (game.round === 3){\n    var possibleUnits = this.playerPossibleUnits;\n    for (var i = 0; i < possibleUnits.length; i++) {\n      var unitX = possibleUnits[i];\n      var enemyUnits = this.shootingKillableUnits(game,player,unitX);\n      if (!this.canBeKilled(game,player,unitX)){\n        for (var j=0; j<enemyUnits.length; j++){\n          var unitY = enemyUnits[j];\n          if (unitY.cost()===this.mostExpensiveUnit(enemyUnits).cost()){\n             //console.log(\"rule_6A. shoot\");\n             return this.shoot(unitX,unitY);\n          }\n        }\n      }\n    }\n  }\n return null;\n}),\n/*si ronda = 3 y pueden matar a unitX y van a herirla, y unitX va a herir,\nsi su costo es menor que el del enemigo, entonces disparale*/\nrule_6B: playerRule(6, function rule_6B(game, player){\n  if (game.round === 3){\n    var possibleUnits = this.playerPossibleUnits;\n    for (var i = 0; i < possibleUnits.length; i++) {\n      var unitX = possibleUnits[i];\n      var shootingKillableUnits = this.shootingKillableUnits(game,player,unitX);\n      if (this.canBeKilled(game,player,unitX)){\n        var enemyShootableUnits = this.enemyShootableUnits(game, player, unitX);\n        for (var j = 0; j < enemyShootableUnits.length; j++) {\n          var unitY = enemyShootableUnits[j];\n          if (this.willWoundShooting(game,unitY,unitX)){\n            for (var k=0; k<shootingKillableUnits.length; k++){\n              var unitY2 = shootingKillableUnits[k];\n              if (unitX.cost()>unitY2.cost()&&this.willWoundShooting(game,unitX,unitY2)){\n                 //console.log(\"rule_6B. shoot\");\n                 return this.shoot(unitX,unitY);\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n return null;\n}),\n/*si ronda = 3 y pueden matar a unitX y van a herirla,\nsi puede escapar, entonces escapar*/\nrule_6C: playerRule(6, function rule_6C(game, player){\n  if (game.round === 3){\n    var possibleUnits = this.playerPossibleUnits;\n    for (var i = 0; i < possibleUnits.length; i++) {\n      var unitX = possibleUnits[i];\n      if (this.canBeKilled(game,player,unitX)){\n        var enemyShootableUnits = this.enemyShootableUnits(game, player, unitX);\n        for (var j = 0; j < enemyShootableUnits.length; j++) {\n          var unitY = enemyShootableUnits[j];\n          if (this.willWoundShooting(game,unitY,unitX)){\n            if (this.canScape(game,player,unitX)){\n               //console.log(\"rule_6C. scape\");\n               return this.scape(game,player,unitX);\n            }\n          }\n        }\n      }\n    }\n  }\n return null;\n}),\n//-------------------------priority 5-----------------------------------------\n//si es la ronda 0 y la unidad puede matar disparando, y va a herir >75%, disparar\nrule_5A: playerRule(5, function rule_5A(game, player){\n  if (game.round === 0){\n    var possibleUnits = this.playerPossibleUnits;\n    for (var i = 0; i < possibleUnits.length; i++) {\n      var unitX = possibleUnits[i];\n      var enemyShootableUnits = this.enemyShootableUnits(game, player, unitX);\n      for (var j = 0; j < enemyShootableUnits.length; j++) {\n        var unitY = enemyShootableUnits[j];\n        if (this.canKillShooting(game,unitX,unitY) && this.willWoundALotShooting(game,unitX,unitY)){\n           //console.log(\"rule_5A. shoot\");\n           return this.shoot(unitX,unitY);\n        }\n      }\n    }\n  }\n return null;\n}),\n//si es la ronda 1 y la unidad puede matar disparando, y va a herir >75%, disparar\nrule_5B: playerRule(5, function rule_5B(game, player){\n  if (game.round === 1){\n    var possibleUnits = this.playerPossibleUnits;\n    for (var i = 0; i < possibleUnits.length; i++) {\n      var unitX = possibleUnits[i];\n      var enemyShootableUnits = this.enemyShootableUnits(game, player, unitX);\n      for (var j = 0; j < enemyShootableUnits.length; j++) {\n        var unitY = enemyShootableUnits[j];\n        if (this.canKillShooting(game,unitX,unitY) && this.willWoundALotShooting(game,unitX,unitY)){\n           //console.log(\"rule_5B. shoot\");\n           return this.shoot(unitX,unitY);\n        }\n      }\n    }\n  }\n return null;\n}),\n//i es la ronda 2 y la unidad puede matar disparando, y va a herir >75%, disparar\nrule_5C: playerRule(5, function rule_5C(game, player){\n  if (game.round === 2){\n    var possibleUnits = this.playerPossibleUnits;\n    for (var i = 0; i < possibleUnits.length; i++) {\n      var unitX = possibleUnits[i];\n      var enemyShootableUnits = this.enemyShootableUnits(game, player, unitX);\n      for (var j = 0; j < enemyShootableUnits.length; j++) {\n        var unitY = enemyShootableUnits[j];\n        if (this.canKillShooting(game,unitX,unitY) && this.willWoundALotShooting(game,unitX,unitY)){\n           //console.log(\"rule_5C. shoot\");\n           return this.shoot(unitX,unitY);\n        }\n      }\n    }\n  }\n return null;\n}),\n/*si es la ronda 1 y la unidad esta herida, la pueden matar\ny va a herirla a la que la puede matar, entonces disparar*/\nrule_5D: playerRule(5, function rule_5D(game, player){\n  if (game.round === 1){\n    var possibleUnits = this.playerPossibleUnits;\n    for (var i = 0; i < possibleUnits.length; i++) {\n      var unitX = possibleUnits[i];\n      var enemyShootableUnits = this.enemyShootableUnits(game, player, unitX);\n      for (var j = 0; j < enemyShootableUnits.length; j++) {\n        var unitY = enemyShootableUnits[j];\n        if (this.canKill(game,unitY,unitX) && this.willWoundShooting(game,unitX,unitY)){\n           //console.log(\"rule_5D. shoot\");\n           return this.shoot(unitX,unitY);\n        }\n      }\n    }\n  }\n return null;\n}),\n/*si es la ronda 2 y la unidad esta herida, la pueden matar\ny va a herirla a la que la puede matar, entonces disparar*/\nrule_5E: playerRule(5, function rule_5E(game, player){\n  if (game.round === 2){\n    var possibleUnits = this.playerPossibleUnits;\n    for (var i = 0; i < possibleUnits.length; i++) {\n      var unitX = possibleUnits[i];\n      var enemyShootableUnits = this.enemyShootableUnits(game, player, unitX);\n      for (var j = 0; j < enemyShootableUnits.length; j++) {\n        var unitY = enemyShootableUnits[j];\n        if (this.canKill(game,unitY,unitX) && this.willWoundShooting(game,unitX,unitY)){\n           //console.log(\"rule_5E. shoot\");\n           return this.shoot(unitX,unitY);\n        }\n      }\n    }\n  }\n return null;\n}),\n//si es la ronda 1 y la unidad esta herida, la pueden matar y puede escapar, entonces escapar\nrule_5F: playerRule(5, function rule_5F(game, player){\n  if (game.round === 1){\n    var possibleUnits = this.playerPossibleUnits;\n    for (var i = 0; i < possibleUnits.length; i++) {\n      var unitX = possibleUnits[i];\n      var enemyShootableUnits = this.enemyShootableUnits(game, player, unitX);\n      for (var j = 0; j < enemyShootableUnits.length; j++) {\n        var unitY = enemyShootableUnits[j];\n        if (this.canKill(game,unitY,unitX) && this.canScape(game,player,unitX)){\n           //console.log(\"rule_5F. scape\");\n           return this.scape(game,player,unitX);\n        }\n      }\n    }\n  }\n return null;\n}),\n//si es la ronda 2 y la unidad esta herida, la pueden matar y puede escapar, entonces escapar\nrule_5G: playerRule(5, function rule_5G(game, player){\n  if (game.round === 2){\n    var possibleUnits = this.playerPossibleUnits;\n    for (var i = 0; i < possibleUnits.length; i++) {\n      var unitX = possibleUnits[i];\n      var enemyShootableUnits = this.enemyShootableUnits(game, player, unitX);\n      for (var j = 0; j < enemyShootableUnits.length; j++) {\n        var unitY = enemyShootableUnits[j];\n        if (this.canKill(game,unitY,unitX) && this.canScape(game,player,unitX)){\n           //console.log(\"rule_5G. scape\");\n           return this.scape(game,player,unitX);\n        }\n      }\n    }\n  }\n return null;\n}),\n\n\n\n\n //-------------------------priority 4-----------------------------------------\n //si es la ronda 0 y la unidad puede matar disparando, disparar\n rule_4A: playerRule(4, function rule_4A(game, player){\n   if (game.round === 0){\n     var possibleUnits = this.playerPossibleUnits;\n     for (var i = 0; i < possibleUnits.length; i++) {\n       var unitX = possibleUnits[i];\n       var enemyShootableUnits = this.enemyShootableUnits(game, player, unitX);\n       for (var j = 0; j < enemyShootableUnits.length; j++) {\n         var unitY = enemyShootableUnits[j];\n         if (this.canKillShooting(game,unitX,unitY)){\n            //console.log(\"rule_4A. shoot\");\n            return this.shoot(unitX,unitY);\n         }\n       }\n     }\n   }\n  return null;\n }),\n rule_4B: playerRule(4, function rule_4B(game, player){\n   if (game.round === 1){\n     var possibleUnits = this.playerPossibleUnits;\n     for (var i = 0; i < possibleUnits.length; i++) {\n       var unitX = possibleUnits[i];\n       var enemyShootableUnits = this.enemyShootableUnits(game, player, unitX);\n       for (var j = 0; j < enemyShootableUnits.length; j++) {\n         var unitY = enemyShootableUnits[j];\n         if (this.canKillShooting(game,unitX,unitY)){\n            //console.log(\"rule_4B. shoot\");\n            return this.shoot(unitX,unitY);\n         }\n       }\n     }\n   }\n  return null;\n }),\n rule_4C: playerRule(4, function rule_4C(game, player){\n   if (game.round === 2){\n     var possibleUnits = this.playerPossibleUnits;\n     for (var i = 0; i < possibleUnits.length; i++) {\n       var unitX = possibleUnits[i];\n       var enemyShootableUnits = this.enemyShootableUnits(game, player, unitX);\n       for (var j = 0; j < enemyShootableUnits.length; j++) {\n         var unitY = enemyShootableUnits[j];\n         if (this.canKillShooting(game,unitX,unitY)){\n            //console.log(\"rule_4C. shoot\");\n            return this.shoot(unitX,unitY);\n         }\n       }\n     }\n   }\n  return null;\n }),\n /*si es ultima ronda, va ganando, no pueden matar a unitX, hay una unidad aliada unitX2\n  que cuesta mas que unitX, y unitX puede asistirla, hacerlo*/\n rule_4D: playerRule(4, function rule_4D(game, player){\n     if (game.round === 3 && this.winning(game)){\n       var possibleUnits = this.playerPossibleUnits;\n       //[playerArmy, playerUnits, enemyArmy, enemyUnits]\n       var units = this.armiesAndUnits(game,player)[1];\n       for (var i = 0; i < possibleUnits.length; i++) {\n         var unitX = possibleUnits[i];\n         if (!this.canBeKilled(game,player,unitX)){\n           for (var k = 0; k < units.length; k++) {\n             var unitX2 = units[k];\n             if (unitX2.cost()>unitX.cost()&&this.canAssist(game,player,unitX,unitX2)){\n              //console.log(\"rule_4D. assist\");\n              return this.assist(game,player,unitX,unitX2);\n             }\n           }\n         }\n       }\n     }\n  return null;\n }),\n /*si es ultima ronda, va ganando, no pueden matar a unitX, hay una unidad aliada unitX2\nque cuesta mas, que unitX no puede asistirla, dentro de las unidades heridas enemigas,\ndisparar a la mas facil de matar*/\n rule_4E: playerRule(4, function rule_4E(game, player){\n   if (game.round === 3 && this.winning(game)){\n     var possibleUnits = this.playerPossibleUnits;\n     //[playerArmy, playerUnits, enemyArmy, enemyUnits]\n     var units = this.armiesAndUnits(game,player)[1];\n     for (var i = 0; i < possibleUnits.length; i++) {\n       var unitX = possibleUnits[i];\n       if (!this.canBeKilled(game,player,unitX)){\n         var enemyShootableUnits = this.enemyShootableUnits(game, player, unitX);\n         for (var j = 0; j < enemyShootableUnits.length; j++) {\n           var unitY = enemyShootableUnits[j];\n           if (this.canWound(game,unitX,unitY) && this.easiestToKill(enemyShootableUnits,unitY)){\n             for (var k = 0; k < units.length; k++) {\n               var unitX2 = units[k];\n               if (unitX2.cost()>unitX.cost()&&!this.canAssist(game,player,unitX,unitX2)){\n                  //console.log(\"rule_4E. shoot\");\n                  return this.shoot(unitX,unitY);\n               }\n             }\n           }\n         }\n       }\n     }\n   }\n  return null;\n }),\n\n\n //-------------------------priority 3-----------------------------------------\n   //si es la ronda 0 y la unidad es sniper, disparar a la mas fuerte\n   rule_3A: playerRule(3, function rule_3A(game, player){\n     if (game.round === 0){\n       var possibleUnits = this.playerPossibleUnits;\n       for (var i = 0; i < possibleUnits.length; i++) {\n         var unitX = possibleUnits[i];\n         var enemyShootableUnits = this.enemyShootableUnits(game, player, unitX);\n         for (var j = 0; j < enemyShootableUnits.length; j++) {\n           var unitY = enemyShootableUnits[j];\n           if (this.classification(unitX)===\"sniper\" && this.unitIsStrongest(enemyShootableUnits,unitY)){\n              //console.log(\"rule_3A. shoot\");\n              return this.shoot(unitX,unitY);\n           }\n         }\n       }\n     }\n    return null;\n   }),\n   //si es la ronda 0 y la q tiene mayor rango, disparar a la mas fuerte\n   rule_3B: playerRule(3, function rule_3B(game, player){\n     if (game.round === 0){\n       var possibleUnits = this.playerPossibleUnits;\n       for (var i = 0; i < possibleUnits.length; i++) {\n         var unitX = possibleUnits[i];\n         var enemyShootableUnits = this.enemyShootableUnits(game, player, unitX);\n         for (var j = 0; j < enemyShootableUnits.length; j++) {\n           var unitY = enemyShootableUnits[j];\n           if (this.maxRangeInUnits(possibleUnits,unitX) && this.unitIsStrongest(enemyShootableUnits,unitY)){\n              //console.log(\"rule_3B. shoot\");\n              return this.shoot(unitX,unitY);\n           }\n         }\n       }\n     }\n    return null;\n   }),\n   //si es la ronda 0, si hay una unidad aliada herida y puede asistirla, asistirla\n   rule_3C: playerRule(3, function rule_3C(game, player){\n     if (game.round === 0){\n       var possibleUnits = this.playerPossibleUnits;\n       //[playerArmy, playerUnits, enemyArmy, enemyUnits]\n       var units = this.armiesAndUnits(game,player)[1];\n       for (var i = 0; i < possibleUnits.length; i++) {\n         var unitX = possibleUnits[i];\n         for (var j = 0; j < units.length; j++) {\n           var unitX2 = units[j];\n           if (this.wounded(unitX2) && this.canAssist(game,player,unitX,unitX2)){\n              //console.log(\"rule_3C. assist\");\n              return this.assist(game,player,unitX,unitX2);\n           }\n         }\n       }\n     }\n    return null;\n   }),\n   //si es la ronda 1, si hay una unidad aliada herida y puede asistirla, asistirla\n   rule_3D: playerRule(3, function rule_3D(game, player){\n     if (game.round === 1){\n       var possibleUnits = this.playerPossibleUnits;\n       //[playerArmy, playerUnits, enemyArmy, enemyUnits]\n       var units = this.armiesAndUnits(game,player)[1];\n       for (var i = 0; i < possibleUnits.length; i++) {\n         var unitX = possibleUnits[i];\n         for (var j = 0; j < units.length; j++) {\n           var unitX2 = units[j];\n           if (this.wounded(unitX2) && this.canAssist(game,player,unitX,unitX2)){\n              //console.log(\"rule_3D. assist\");\n              return this.assist(game,player,unitX,unitX2);\n           }\n         }\n       }\n     }\n    return null;\n   }),\n   //si es la ronda 2, si hay una unidad aliada herida y puede asistirla, asistirla\n   rule_3E: playerRule(3, function rule_3E(game, player){\n     if (game.round === 2){\n       var possibleUnits = this.playerPossibleUnits;\n       //[playerArmy, playerUnits, enemyArmy, enemyUnits]\n       var units = this.armiesAndUnits(game,player)[1];\n       for (var i = 0; i < possibleUnits.length; i++) {\n         var unitX = possibleUnits[i];\n         for (var j = 0; j < units.length; j++) {\n           var unitX2 = units[j];\n           if (this.wounded(unitX2) && this.canAssist(game,player,unitX,unitX2)){\n             //console.log(\"rule_3E. assist\");\n              return this.assist(game,player,unitX,unitX2);\n           }\n         }\n       }\n     }\n    return null;\n   }),\n/*en la ronda 3, si hay una unidad aliada que cueste mas que unitX y puede asistirla,\n   y no pueden matar a unitX, entonces asistir a la aliada*/\n   rule_3F: playerRule(3, function rule_F(game, player){\n     if (game.round === 3){\n       var possibleUnits = this.playerPossibleUnits;\n       var enemyUnits = this.livingEnemyUnits(game, player);\n       //[playerArmy, playerUnits, enemyArmy, enemyUnits]\n       var units = this.armiesAndUnits(game,player)[1];\n       for (var i = 0; i < possibleUnits.length; i++) {\n         var unitX = possibleUnits[i];\n         for (var j = 0; j < units.length; j++) {\n           var unitX2 = units[j];\n           if (unitX2.cost()>unitX.cost() && this.canAssist(game,player,unitX,unitX2)){\n             for (var k=0; k<enemyUnits.length;k++){\n               var unitY = enemyUnits[k];\n               if(!this.canKill(game,unitY,unitX)){\n                 //console.log(\"rule_3F. assist\");\n                 return this.assist(game,player,unitX,unitX2);\n               }\n             }\n           }\n         }\n       }\n     }\n    return null;\n   }),\n   //si es la ronda 0 y hay al menos 2 unidades enemigas vivas, disparar a la mas cara\n   rule_3G: playerRule(3, function rule_3G(game, player){\n     var possibleUnits = this.playerPossibleUnits;\n     if (game.round === 0){\n       for (var i = 0; i < possibleUnits.length; i++) {\n         var unitX = possibleUnits[i];\n         var enemyShootableUnits = this.enemyShootableUnits(game, player, unitX);\n         if (enemyShootableUnits.length > 1){\n         for (var j = 0; j < enemyShootableUnits.length; j++) {\n           var unitY = enemyShootableUnits[j];\n             if (unitY.cost() === this.mostExpensiveUnit(enemyShootableUnits).cost()){\n               //console.log(\"rule_3G. shoot\");\n               return this.shoot(unitX,unitY);\n             }\n           }\n         }\n       }\n     }\n     return null;\n   }),\n/*si ronda = 2 y cantidad(unitX2) < cantidadInicial(unitX2) y\n   puedeAsistir(unitX a unitX2) entonces asiste(unitX a unitX2)*/\nrule_3H: playerRule(3, function rule_3H(game, player){\n  if (game.round === 2){\n    var possibleUnits = this.playerPossibleUnits;\n    //[playerArmy, playerUnits, enemyArmy, enemyUnits]\n    var units = this.armiesAndUnits(game,player)[1];\n    for (var i = 0; i < possibleUnits.length; i++) {\n      var unitX = possibleUnits[i];\n      for (var j = 0; j < units.length; j++) {\n        var unitX2 = units[j];\n        if (unitX2.livingModels().length<unitX2.size() && this.canAssist(game,player,unitX,unitX2)){\n          //console.log(\"rule_3H. assist\");\n           return this.assist(game,player,unitX,unitX2);\n        }\n      }\n    }\n  }\n return null;\n}),\n/*si ronda = 1 y cantidad(unitX2) < cantidadInicial(unitX2) y\npuedeAsistir(unitX a unitX2) entonces asiste(unitX a unitX2)*/\nrule_3I: playerRule(3, function rule_3I(game, player){\n  if (game.round === 1){\n    var possibleUnits = this.playerPossibleUnits;\n    //[playerArmy, playerUnits, enemyArmy, enemyUnits]\n    var units = this.armiesAndUnits(game,player)[1];\n    for (var i = 0; i < possibleUnits.length; i++) {\n      var unitX = possibleUnits[i];\n      for (var j = 0; j < units.length; j++) {\n        var unitX2 = units[j];\n        if (unitX2.livingModels().length<unitX2.size() && this.canAssist(game,player,unitX,unitX2)){\n           //console.log(\"rule_3I. assist\");\n           return this.assist(game,player,unitX,unitX2);\n        }\n      }\n    }\n  }\n return null;\n}),\n/*si ronda = 0 y cantidad(unitX2) < cantidadInicial(unitX2) y\npuedeAsistir(unitX a unitX2) entonces asiste(unitX a unitX2)*/\nrule_3J: playerRule(3, function rule_3J(game, player){\n  if (game.round === 0){\n    var possibleUnits = this.playerPossibleUnits;\n    //[playerArmy, playerUnits, enemyArmy, enemyUnits]\n    var units = this.armiesAndUnits(game,player)[1];\n    for (var i = 0; i < possibleUnits.length; i++) {\n      var unitX = possibleUnits[i];\n      for (var j = 0; j < units.length; j++) {\n        var unitX2 = units[j];\n        if (unitX2.livingModels().length<unitX2.size() && this.canAssist(game,player,unitX,unitX2)){\n          //console.log(\"rule_3J. assist\");\n          return this.assist(game,player,unitX,unitX2);\n        }\n      }\n    }\n  }\n return null;\n}),\n/*si ronda = 0 y fuerza(unidadY) = maxEnemigos y puedeAtacarSinCaminar(unitX a\nunidadY) entonces dispara(unitX a unidadY)*/\nrule_3K: playerRule(3, function rule_3K(game, player){\n  if (game.round === 0){\n    var possibleUnits = this.playerPossibleUnits;\n    for (var i = 0; i < possibleUnits.length; i++) {\n      var unitX = possibleUnits[i];\n      var enemyShootableUnits = this.enemyShootableUnits(game, player, unitX);\n      for (var j = 0; j < enemyShootableUnits.length; j++) {\n        var unitY = enemyShootableUnits[j];\n          if (this.canShoot_(game,unitX,unitY,false) && this.unitIsStrongest(enemyShootableUnits,unitY)){\n           //console.log(\"rule_3K. shoot\");\n           return this.shoot(unitX,unitY);\n        }\n      }\n    }\n  }\n return null;\n}),\n/*Si es la primer ronda, la unitX va a herir a la unidad más fuerte enemiga si le dispara,\n entonces dispararle.*/\nrule_3L: playerRule(3, function rule_3L(game, player){\n  if (game.round === 0){\n    var possibleUnits = this.playerPossibleUnits;\n    //[playerArmy, playerUnits, enemyArmy, enemyUnits]\n    var units = this.armiesAndUnits(game,player)[1].concat(this.armiesAndUnits(game,player)[3]);\n    for (var i = 0; i < possibleUnits.length; i++) {\n      var unitX = possibleUnits[i];\n      var enemyShootableUnits = this.enemyShootableUnits(game, player, unitX);\n      for (var j = 0; j < enemyShootableUnits.length; j++) {\n        var unitY = enemyShootableUnits[j];\n        if (this.willWoundShooting(game,unitX,unitY) && this.unitIsStrongest(units,unitY)){\n           //console.log(\"rule_3L. shoot\");\n           return this.shoot(unitX,unitY);\n        }\n      }\n    }\n  }\n return null;\n}),\nrule_3M: playerRule(3, function rule_3M(game, player){\n  if (game.round === 1){\n    var possibleUnits = this.playerPossibleUnits;\n    for (var i = 0; i < possibleUnits.length; i++) {\n      var unitX = possibleUnits[i];\n      var enemyShootableUnits = this.enemyShootableUnits(game, player, unitX);\n      for (var j = 0; j < enemyShootableUnits.length; j++) {\n        var unitY = enemyShootableUnits[j];\n        if (this.willWoundShooting(game,unitX,unitY) && this.unitIsStrongest(enemyShootableUnits,unitY)){\n           //console.log(\"rule_3M. shoot\");\n           return this.shoot(unitX,unitY);\n        }\n      }\n    }\n  }\n return null;\n}),\nrule_3N: playerRule(3, function rule_3N(game, player){\n  if (game.round === 1){\n    var possibleUnits = this.playerPossibleUnits;\n    //[playerArmy, playerUnits, enemyArmy, enemyUnits]\n    var units = this.armiesAndUnits(game,player)[1].concat(this.armiesAndUnits(game,player)[3]);\n    for (var i = 0; i < possibleUnits.length; i++) {\n      var unitX = possibleUnits[i];\n      var enemyShootableUnits = this.enemyShootableUnits(game, player, unitX);\n      for (var j = 0; j < enemyShootableUnits.length; j++) {\n        var unitY = enemyShootableUnits[j];\n        if (this.willWoundShooting(game,unitX,unitY) && this.unitIsStrongest(units,unitY)){\n           //console.log(\"rule_3N. shoot\");\n           return this.shoot(unitX,unitY);\n        }\n      }\n    }\n  }\n return null;\n}),\nrule_3O: playerRule(3, function rule_3O(game, player){\n  if (game.round === 2){\n    var possibleUnits = this.playerPossibleUnits;\n    for (var i = 0; i < possibleUnits.length; i++) {\n      var unitX = possibleUnits[i];\n      var enemyShootableUnits = this.enemyShootableUnits(game, player, unitX);\n      for (var j = 0; j < enemyShootableUnits.length; j++) {\n        var unitY = enemyShootableUnits[j];\n        if (this.willWoundShooting(game,unitX,unitY) && this.unitIsStrongest(enemyShootableUnits,unitY)){\n           //console.log(\"rule_3O. shoot\");\n           return this.shoot(unitX,unitY);\n        }\n      }\n    }\n  }\n return null;\n}),\nrule_3P: playerRule(3, function rule_3P(game, player){\n  if (game.round === 2){\n    var possibleUnits = this.playerPossibleUnits;\n    for (var i = 0; i < possibleUnits.length; i++) {\n      var unitX = possibleUnits[i];\n      var enemyShootableUnits = this.enemyShootableUnits(game, player, unitX);\n      for (var j = 0; j < enemyShootableUnits.length; j++) {\n        var unitY = enemyShootableUnits[j];\n        if (this.willWoundShooting(game,unitX,unitY) && this.easiestToKill(enemyShootableUnits,unitY)){\n           //console.log(\"rule_3P. shoot\");\n           return this.shoot(unitX,unitY);\n        }\n      }\n    }\n  }\n return null;\n}),\nrule_3Q: playerRule(3, function rule_3Q(game, player){\n  if (game.round === 0){\n    var possibleUnits = this.playerPossibleUnits;\n    for (var i = 0; i < possibleUnits.length; i++) {\n      var unitX = possibleUnits[i];\n      if (this.classification(unitX)===\"troop\"){\n        var enemyShootableUnits = this.enemyShootableUnits(game, player, unitX);\n        for (var j = 0; j < enemyShootableUnits.length; j++) {\n          var unitY = enemyShootableUnits[j];\n          if (this.willWoundShooting(game,unitX,unitY)&&this.unitIsStrongest(enemyShootableUnits,unitY)){\n             //console.log(\"rule_3Q. shoot\");\n             return this.shoot(unitX,unitY);\n          }\n        }\n      }\n    }\n  }\n return null;\n}),\nrule_3R: playerRule(3, function rule_3R(game, player){\n  if (game.round === 0){\n    var possibleUnits = this.playerPossibleUnits;\n    //[playerArmy, playerUnits, enemyArmy, enemyUnits]\n    var units = this.armiesAndUnits(game,player)[1];\n    for (var i = 0; i < possibleUnits.length; i++) {\n      var unitX = possibleUnits[i];\n      if (unitX.cost() === this.cheapestUnit(units).cost()){\n        var enemyShootableUnits = this.enemyShootableUnits(game, player, unitX);\n        for (var j = 0; j < enemyShootableUnits.length; j++) {\n          var unitY = enemyShootableUnits[j];\n          if (this.willWoundShooting(game,unitX,unitY)&&this.unitIsStrongest(enemyShootableUnits,unitY)){\n             //console.log(\"rule_3R. shoot\");\n             return this.shoot(unitX,unitY);\n          }\n        }\n      }\n    }\n  }\n return null;\n}),\nrule_3S: playerRule(3, function rule_3S(game, player){\n  if (game.round === 0){\n    var possibleUnits = this.playerPossibleUnits;\n    //[playerArmy, playerUnits, enemyArmy, enemyUnits]\n    var units = this.armiesAndUnits(game,player)[1].concat(this.armiesAndUnits(game,player)[3]);\n    for (var i = 0; i < possibleUnits.length; i++) {\n      var unitX = possibleUnits[i];\n      if (this.classification(unitX)===\"troop\"){\n        var enemyShootableUnits = this.enemyShootableUnits(game, player, unitX);\n        for (var j = 0; j < enemyShootableUnits.length; j++) {\n          var unitY = enemyShootableUnits[j];\n          if (this.willWoundShooting(game,unitX,unitY)&&this.unitIsStrongest(units,unitY)){\n             //console.log(\"rule_3S. shoot\");\n             return this.shoot(unitX,unitY);\n          }\n        }\n      }\n    }\n  }\n return null;\n}),\n/* Si la unitX va a herir a la unidad más fuerte enemiga si le dispara,\ny una unidad aliada está herida entonces asistirla.*/\nrule_3T: playerRule(3, function rule_3T(game, player){\n    var possibleUnits = this.playerPossibleUnits;\n    //[playerArmy, playerUnits, enemyArmy, enemyUnits]\n    var armiesAndUnits = this.armiesAndUnits(game,player);\n    var units = armiesAndUnits[1];\n    var allUnits = units.concat(armiesAndUnits[3]);\n    for (var i = 0; i < possibleUnits.length; i++) {\n      var unitX = possibleUnits[i];\n      for (var k = 0; k < units.length; k++) {\n        var unitX2 = units[k];\n        if (this.wounded(unitX2) && this.canAssist(game,player,unitX,unitX2)){\n          var enemyShootableUnits = this.enemyShootableUnits(game, player, unitX);\n          for (var j = 0; j < enemyShootableUnits.length; j++) {\n            var unitY = enemyShootableUnits[j];\n            if (this.willWoundShooting(game,unitX,unitY) && this.unitIsStrongest(allUnits,unitY)){\n               //console.log(\"rule_3T. assist\");\n               return this.assist(game,player,unitX,unitX2);\n            }\n          }\n        }\n      }\n    }\n return null;\n}),\n\n //-------------------------priority 2-----------------------------------------\n //si es la ronda 0 y el enemigo esta herido, asaltar a ese enemigo\n  rule_2A: playerRule(2, function rule_2A(game, player){\n   if (game.round === 0){\n     var possibleUnits = this.playerPossibleUnits;\n     for (var i = 0; i < possibleUnits.length; i++) {\n       var unitX = possibleUnits[i];\n       var enemyAssaultableUnits = this.enemyAssaultableUnits(game, player, unitX);\n       if (enemyAssaultableUnits.length>0){\n         for (var j = 0; j < enemyAssaultableUnits.length; j++) {\n           var unitY = enemyAssaultableUnits[j];\n            if (this.wounded(unitY)){\n              //console.log(\"rule_2A. assault\");\n              return this.assault(unitX,unitY);\n            }\n         }\n       }\n     }\n   }\n   return null;\n }),\n //si es la ronda 0, y la unidad es fastAttack, disparar a lo que pueda disparar\n rule_2B: playerRule(2, function rule_2B(game, player){\n   if (game.round === 0){\n     var possibleUnits = this.playerPossibleUnits;\n     for (var i = 0; i < possibleUnits.length; i++) {\n       var unitX = possibleUnits[i];\n       if (this.classification(unitX)===\"fastAttack\"){\n         var enemyShootableUnits = this.enemyShootableUnits(game, player, unitX);\n         for (var j = 0; j < enemyShootableUnits.length; j++) {\n           var unitY = enemyShootableUnits[j];\n           //console.log(\"rule_2B. shoot\");\n           return this.shoot(unitX,unitY);\n         }\n       }\n     }\n   }\n  return null;\n }),\n  // si es la ronda 1, y la unidad es fastAttack, disparar a lo que pueda disparar\n rule_2C: playerRule(2, function rule_2C(game, player){\n   if (game.round === 1){\n     var possibleUnits = this.playerPossibleUnits;\n     for (var i = 0; i < possibleUnits.length; i++) {\n       var unitX = possibleUnits[i];\n       if (this.classification(unitX)===\"fastAttack\"){\n         var enemyShootableUnits = this.enemyShootableUnits(game, player, unitX);\n         for (var j = 0; j < enemyShootableUnits.length; j++) {\n           var unitY = enemyShootableUnits[j];\n           //console.log(\"rule_2C. shoot\");\n           return this.shoot(unitX,unitY);\n         }\n       }\n     }\n   }\n  return null;\n }),\n// si es la ronda 2, y la unidad es fastAttack, disparar a lo que pueda disparar\n rule_2D: playerRule(2, function rule_2D(game, player){\n   if (game.round === 2){\n     var possibleUnits = this.playerPossibleUnits;\n     for (var i = 0; i < possibleUnits.length; i++) {\n       var unitX = possibleUnits[i];\n       if (this.classification(unitX)===\"fastAttack\"){\n         var enemyShootableUnits = this.enemyShootableUnits(game, player, unitX);\n         for (var j = 0; j < enemyShootableUnits.length; j++) {\n           var unitY = enemyShootableUnits[j];\n           //console.log(\"rule_2D. shoot\");\n           return this.shoot(unitX,unitY);\n         }\n       }\n     }\n   }\n  return null;\n }),\n // si es la ronda 0, y la unidad es heavySupport, asistir a lo que pueda asistir, que ya haya jugado\n rule_2E: playerRule(2, function rule_2E(game, player){\n   if (game.round === 0){\n     var possibleUnits = this.playerPossibleUnits;\n     //[playerArmy, playerUnits, enemyArmy, enemyUnits]\n     var units = this.armiesAndUnits(game,player)[1];\n     for (var i = 0; i < possibleUnits.length; i++) {\n       var unitX = possibleUnits[i];\n       if (this.classification(unitX)===\"heavySupport\"){\n         for (var j = 0; j < units.length; j++) {\n           var unitX2 = units[j];\n           if (!unitX2.isEnabled && this.canAssist(game,player,unitX,unitX2)){\n             //console.log(\"rule_2E. assist\");\n             return this.assist(game,player,unitX,unitX2);\n           }\n         }\n       }\n     }\n   }\n   return null;\n }),\n // si es la ronda 0, y la unidad es heavySupport, asistir a lo que pueda asistir\n rule_2F: playerRule(2, function rule_2F(game, player){\n   if (game.round === 0){\n     var possibleUnits = this.playerPossibleUnits;\n     //[playerArmy, playerUnits, enemyArmy, enemyUnits]\n     var units = this.armiesAndUnits(game,player)[1];\n     for (var i = 0; i < possibleUnits.length; i++) {\n       var unitX = possibleUnits[i];\n       if (this.classification(unitX)===\"heavySupport\"){\n         for (var j = 0; j < units.length; j++) {\n           var unitX2 = units[j];\n           if (this.canAssist(game,player,unitX,unitX2)){\n             //console.log(\"rule_2F. assist\");\n             return this.assist(game,player,unitX,unitX2);\n           }\n         }\n       }\n     }\n   }\n   return null;\n }),\n // si es la ronda 1, y la unidad es heavySupport, asistir a lo que pueda asistir, que ya haya jugado\n rule_2G: playerRule(2, function rule_2G(game, player){\n   if (game.round === 1){\n     var possibleUnits = this.playerPossibleUnits;\n     //[playerArmy, playerUnits, enemyArmy, enemyUnits]\n     var units = this.armiesAndUnits(game,player)[1];\n     for (var i = 0; i < possibleUnits.length; i++) {\n       var unitX = possibleUnits[i];\n       if (this.classification(unitX)===\"heavySupport\"){\n         for (var j = 0; j < units.length; j++) {\n           var unitX2 = units[j];\n           if (!unitX2.isEnabled && this.canAssist(game,player,unitX,unitX2)){\n             //console.log(\"rule_2G. assist\");\n             return this.assist(game,player,unitX,unitX2);\n           }\n         }\n       }\n     }\n   }\n   return null;\n }),\n // si es la ronda 1, y la unidad es heavySupport, asistir a lo que pueda asistir\n rule_2H: playerRule(2, function rule_2H(game, player){\n   if (game.round === 1){\n     var possibleUnits = this.playerPossibleUnits;\n     //[playerArmy, playerUnits, enemyArmy, enemyUnits]\n     var units = this.armiesAndUnits(game,player)[1];\n     for (var i = 0; i < possibleUnits.length; i++) {\n       var unitX = possibleUnits[i];\n       if (this.classification(unitX)===\"heavySupport\"){\n         for (var j = 0; j < units.length; j++) {\n           var unitX2 = units[j];\n           if (this.canAssist(game,player,unitX,unitX2)){\n             //console.log(\"rule_2H. assist\");\n             return this.assist(game,player,unitX,unitX2);\n           }\n         }\n       }\n     }\n   }\n   return null;\n }),\n // si es la ronda 2, y la unidad es heavySupport, asistir a lo que pueda asistir, que ya haya jugado\n rule_2I: playerRule(2, function rule_2I(game, player){\n   if (game.round === 2){\n     var possibleUnits = this.playerPossibleUnits;\n     //[playerArmy, playerUnits, enemyArmy, enemyUnits]\n     var units = this.armiesAndUnits(game,player)[1];\n     for (var i = 0; i < possibleUnits.length; i++) {\n       var unitX = possibleUnits[i];\n       if (this.classification(unitX)===\"heavySupport\"){\n         for (var j = 0; j < units.length; j++) {\n           var unitX2 = units[j];\n           if (!unitX2.isEnabled && this.canAssist(game,player,unitX,unitX2)){\n             //console.log(\"rule_2I. assist\");\n             return this.assist(game,player,unitX,unitX2);\n           }\n         }\n       }\n     }\n   }\n   return null;\n }),\n // si es la ronda 2, y la unidad es heavySupport, asistir a lo que pueda asistir\n rule_2J: playerRule(2, function rule_2J(game, player){\n   if (game.round === 2){\n     var possibleUnits = this.playerPossibleUnits;\n     //[playerArmy, playerUnits, enemyArmy, enemyUnits]\n     var units = this.armiesAndUnits(game,player)[1];\n     for (var i = 0; i < possibleUnits.length; i++) {\n       var unitX = possibleUnits[i];\n       if (this.classification(unitX)===\"heavySupport\"){\n         for (var j = 0; j < units.length; j++) {\n           var unitX2 = units[j];\n           if (this.canAssist(game,player,unitX,unitX2)){\n             //console.log(\"rule_2J. assist\");\n             return this.assist(game,player,unitX,unitX2);\n           }\n         }\n       }\n     }\n   }\n   return null;\n }),\n // /si es la ronda 0, y la unidad es troop, asistir a lo que pueda asistir, que ya haya jugado\n rule_2K: playerRule(2, function rule_2K(game, player){\n   if (game.round === 0){\n     var possibleUnits = this.playerPossibleUnits;\n     //[playerArmy, playerUnits, enemyArmy, enemyUnits]\n     var units = this.armiesAndUnits(game,player)[1];\n     for (var i = 0; i < possibleUnits.length; i++) {\n       var unitX = possibleUnits[i];\n       if (this.classification(unitX)===\"troop\"){\n         for (var j = 0; j < units.length; j++) {\n           var unitX2 = units[j];\n           if (!unitX2.isEnabled && this.canAssist(game,player,unitX,unitX2)){\n             //console.log(\"rule_2K. assist\");\n             return this.assist(game,player,unitX,unitX2);\n           }\n         }\n       }\n     }\n   }\n   return null;\n }),\n // si es la ronda 0, y la unidad es troop, asistir a lo que pueda asistir\n rule_2L: playerRule(2, function rule_2L(game, player){\n   if (game.round === 0){\n     var possibleUnits = this.playerPossibleUnits;\n     //[playerArmy, playerUnits, enemyArmy, enemyUnits]\n     var units = this.armiesAndUnits(game,player)[1];\n     for (var i = 0; i < possibleUnits.length; i++) {\n       var unitX = possibleUnits[i];\n       if (this.classification(unitX)===\"troop\"){\n         for (var j = 0; j < units.length; j++) {\n           var unitX2 = units[j];\n           if (this.canAssist(game,player,unitX,unitX2)){\n             //console.log(\"rule_2L. assist\");\n             return this.assist(game,player,unitX,unitX2);\n           }\n         }\n       }\n     }\n   }\n   return null;\n }),\n // si es la ronda 1, y la unidad es troop, asistir a lo que pueda asistir, que ya haya jugado\n rule_2M: playerRule(2, function rule_2M(game, player){\n   if (game.round === 1){\n     var possibleUnits = this.playerPossibleUnits;\n     //[playerArmy, playerUnits, enemyArmy, enemyUnits]\n     var units = this.armiesAndUnits(game,player)[1];\n     for (var i = 0; i < possibleUnits.length; i++) {\n       var unitX = possibleUnits[i];\n       if (this.classification(unitX)===\"troop\"){\n         for (var j = 0; j < units.length; j++) {\n           var unitX2 = units[j];\n           if (!unitX2.isEnabled && this.canAssist(game,player,unitX,unitX2)){\n             //console.log(\"rule_2M. assist\");\n             return this.assist(game,player,unitX,unitX2);\n           }\n         }\n       }\n     }\n   }\n   return null;\n }),\n // si es la ronda 1, y la unidad es troop, asistir a lo que pueda asistir\n rule_2N: playerRule(1, function rule_2N(game, player){\n   if (game.round === 0){\n     var possibleUnits = this.playerPossibleUnits;\n     //[playerArmy, playerUnits, enemyArmy, enemyUnits]\n     var units = this.armiesAndUnits(game,player)[1];\n     for (var i = 0; i < possibleUnits.length; i++) {\n       var unitX = possibleUnits[i];\n       if (this.classification(unitX)===\"troop\"){\n         for (var j = 0; j < units.length; j++) {\n           var unitX2 = units[j];\n           if (this.canAssist(game,player,unitX,unitX2)){\n             //console.log(\"rule_2N. assist\");\n             return this.assist(game,player,unitX,unitX2);\n           }\n         }\n       }\n     }\n   }\n   return null;\n }),\n // si es la ronda 2, y la unidad es troop, asistir a lo que pueda asistir, que ya haya jugado\n rule_2O: playerRule(2, function rule_2O(game, player){\n   if (game.round === 2){\n     var possibleUnits = this.playerPossibleUnits;\n     //[playerArmy, playerUnits, enemyArmy, enemyUnits]\n     var units = this.armiesAndUnits(game,player)[1];\n     for (var i = 0; i < possibleUnits.length; i++) {\n       var unitX = possibleUnits[i];\n       if (this.classification(unitX)===\"troop\"){\n         for (var j = 0; j < units.length; j++) {\n           var unitX2 = units[j];\n           if (!unitX2.isEnabled && this.canAssist(game,player,unitX,unitX2)){\n             //console.log(\"rule_2O. assist\");\n             return this.assist(game,player,unitX,unitX2);\n           }\n         }\n       }\n     }\n   }\n   return null;\n }),\n // si es la ronda 2, y la unidad es troop, asistir a lo que pueda asistir\n rule_2P: playerRule(2, function rule_2P(game, player){\n   if (game.round === 2){\n     var possibleUnits = this.playerPossibleUnits;\n     //[playerArmy, playerUnits, enemyArmy, enemyUnits]\n     var units = this.armiesAndUnits(game,player)[1];\n     for (var i = 0; i < possibleUnits.length; i++) {\n       var unitX = possibleUnits[i];\n       if (this.classification(unitX)===\"troop\"){\n         for (var j = 0; j < units.length; j++) {\n           var unitX2 = units[j];\n           if (this.canAssist(game,player,unitX,unitX2)){\n             //console.log(\"rule_2P. assist\");\n             return this.assist(game,player,unitX,unitX2);\n           }\n         }\n       }\n     }\n   }\n   return null;\n }),\n\n // si es la ronda 0, y la unidad es sniper, disparar a lo que pueda disparar\n rule_2Q: playerRule(2, function rule_2Q(game, player){\n   if (game.round === 0 ){\n     var possibleUnits = this.playerPossibleUnits;\n     for (var i = 0; i < possibleUnits.length; i++) {\n       var unitX = possibleUnits[i];\n       if (this.classification(unitX)===\"sniper\"){\n         var enemyShootableUnits = this.enemyShootableUnits(game, player, unitX);\n         for (var j = 0; j < enemyShootableUnits.length; j++) {\n           var unitY = enemyShootableUnits[j];\n           //console.log(\"rule_2Q. shoot\");\n           return this.shoot(unitX,unitY);\n         }\n       }\n     }\n   }\n   return null;\n }),\n // si es la ronda 1, y la unidad es sniper, disparar a lo que pueda disparar\n rule_2R: playerRule(2, function rule_2R(game, player){\n   if (game.round === 1 ){\n     var possibleUnits = this.playerPossibleUnits;\n     for (var i = 0; i < possibleUnits.length; i++) {\n       var unitX = possibleUnits[i];\n       if (this.classification(unitX)===\"sniper\"){\n         var enemyShootableUnits = this.enemyShootableUnits(game, player, unitX);\n         for (var j = 0; j < enemyShootableUnits.length; j++) {\n           var unitY = enemyShootableUnits[j];\n           //console.log(\"rule_2R. shoot\");\n           return this.shoot(unitX,unitY);\n         }\n       }\n     }\n   }\n   return null;\n }),\n // si es la ronda 2, y la unidad es sniper, disparar a lo que pueda disparar\n rule_2S: playerRule(2, function rule_2S(game, player){\n   if (game.round === 2 ){\n     var possibleUnits = this.playerPossibleUnits;\n     for (var i = 0; i < possibleUnits.length; i++) {\n       var unitX = possibleUnits[i];\n       if (this.classification(unitX)===\"sniper\"){\n         var enemyShootableUnits = this.enemyShootableUnits(game, player, unitX);\n         for (var j = 0; j < enemyShootableUnits.length; j++) {\n           var unitY = enemyShootableUnits[j];\n           //console.log(\"rule_2S. shoot\");\n           return this.shoot(unitX,unitY);\n         }\n       }\n     }\n   }\n   return null;\n }),\n\n //-------------------------priority 1-----------------------------------------\n //si es la primer ronda y puede escaparse que se escape.\n rule_1A: playerRule(1, function rule_1A(game, player){\n   if (game.round === 0){\n     var possibleUnits = this.playerPossibleUnits;\n     for (var i = 0; i < possibleUnits.length; i++) {\n       var unitX = possibleUnits[i];\n       if (this.canScape(game,player,unitX)){\n           //console.log(\"rule_1A. scape\");\n           return this.scape(game,player,unitX);\n       }\n     }\n   }\n   return null;\n }),\n // si es la segunda ronda y puede escaparse que se escape.\n rule_1B: playerRule(1, function rule_1B(game, player){\n   if (game.round === 1){\n     var possibleUnits = this.playerPossibleUnits;\n     for (var i = 0; i < possibleUnits.length; i++) {\n       var unitX = possibleUnits[i];\n       if (this.canScape(game,player,unitX)){\n         //console.log(\"rule_1B. scape\");\n         return this.scape(game,player,unitX);\n       }\n     }\n   }\n   return null;\n }),\n //si es la tercer ronda y puede disparar que dispare.\n rule_1C: playerRule(1, function rule_1C(game, player){\n   if (game.round === 2){\n     var possibleUnits = this.playerPossibleUnits;\n     for (var i = 0; i < possibleUnits.length; i++) {\n       var unitX = possibleUnits[i];\n       var enemyShootableUnits = this.enemyShootableUnits(game, player, unitX);\n       for (var j = 0; j < enemyShootableUnits.length; j++) {\n         var unitY = enemyShootableUnits[j];\n         //console.log(\"rule_1C. shoot\");\n         return this.shoot(unitX,unitY);\n       }\n     }\n   }\n   return null;\n }),\n //si es la cuarta ronda y puede asaltar que asalte.\n rule_1D: playerRule(1, function rule_1D(game, player){\n  if (game.round === 3){\n     var possibleUnits = this.playerPossibleUnits;\n     for (var i = 0; i < possibleUnits.length; i++) {\n       var unitX = possibleUnits[i];\n       var enemyAssaultableUnits = this.enemyAssaultableUnits(game, player, unitX);\n       for (var j = 0; j < enemyAssaultableUnits.length; j++) {\n         var unitY = enemyAssaultableUnits[j];\n         //console.log(\"rule_1D. assault\");\n         return this.assault(unitX,unitY);\n       }\n     }\n   }\n   return null;\n }),\n\n//si puede disparar que dispare\n rule_1E: playerRule(1, function rule_1E(game, player){\n   var possibleUnits = this.playerPossibleUnits;\n   for (var i = 0; i < possibleUnits.length; i++) {\n     var unitX = possibleUnits[i];\n     var enemyShootableUnits = this.enemyShootableUnits(game, player, unitX);\n     for (var j = 0; j < enemyShootableUnits.length; j++) {\n       var unitY = enemyShootableUnits[j];\n       //console.log(\"rule_1E. shoot\");\n       return this.shoot(unitX,unitY);\n     }\n   }\n   return null;\n }),\n // si no puede disparar que se acerque al enemigo mas facil de matar\n rule_1F: playerRule(1, function rule_1F(game, player){\n   //var enemyUnits = this.livingEnemyUnits(game, player),\n   var possibleUnits = this.playerPossibleUnits;\n   for (var i = 0; i < possibleUnits.length; i++) {\n     var unitX = possibleUnits[i];\n     var enemyShootableUnits = this.enemyShootableUnits(game, player, unitX);\n     if (enemyShootableUnits.length==0){\n       var enemyUnits = this.livingEnemyUnits(game, player);\n       for (var k=0; k<enemyUnits.length;k++){\n         var eu = enemyUnits[k];\n         if (this.easiestToKill(enemyUnits,eu)){\n           //console.log(\"rule_1F. move\");\n           var move = this.getCloseTo(game,unitX,eu);\n           return move;\n         }\n       }\n     }\n   }\n   return null;\n })\n\n}); // declare DynamicScriptingSinPesosPlayer\n","var BasicRulePlayer_shoot = exports.BasicRulePlayer_shoot = declare(ludorum.Player, {\n /** The constructor takes the player's `name` and the following:\n  */\n constructor: function BasicRulePlayer_shoot(params) {\n   ludorum.Player.call(this, params);\n   initialize(this, params)\n    .array('rules', { defaultValue: [] });\n   this.__pendingActions__ = [];\n   this.rules = this.ownRules();\n   this.playerPossibleUnits = [];\n   this.playerShootableUnits = [];\n },\n\n /** Returns an array with the methods of this object whose name starts with `rule`.\n  */\n ownRules: function ownRules() {\n   var self = this;\n   return Object.keys(Object.getPrototypeOf(this)).map(function (id) {\n     return [self[id], 1];\n   }).filter(function (member) {\n     var f = member[0];\n     return typeof f === 'function' && f.name && f.name.substr(0, 4) === 'rule';\n   });\n },\n\n /** The player makes a decision by calling the rules' functions in order. The first one to\n return a list of actions is used.\n */\n decision: function decision(game, player) {\n   game.synchronizeMetagame();\n   this.playerPossibleUnits = this.possibleUnits(game, player);\n   this.playerShootableUnits = this.allShootableUnits(game, player);\n   var rule, actions;\n   if (this.__pendingActions__.length < 1) {\n     for (var i=0; i<this.rules.length; i++){\n       rule = this.rules[i];\n       actions = rule[0].call(this, game, player);\n       if (actions) {\n         actions.forEach(function (action) {\n           action.__rule__ = rule;\n         });\n         this.__pendingActions__ = this.__pendingActions__.concat(actions);\n         return this.__pendingActions__.shift();\n       }\n     }\n   }\n   raiseIf(this.__pendingActions__.length < 1, 'No rule applied to game!');\n   return this.__pendingActions__.shift();\n },\n\n 'static __SERMAT__': {\n   identifier: 'BasicRulePlayer_shoot',\n   serializer: function serialize_BasicRulePlayer_shoot(obj) {\n     return this.serializeAsProperties(obj, ['name', 'rules']); //TODO Check function serialization.\n   }\n },\n\n // ## Helper functions /////////////////////////////////////////////////////////////////////////\n//accion basica shoot\n shoot: function shoot(unitX,unitY){\n   return [new ActivateAction(unitX.id),new ShootAction(unitX.id,unitY.id)];\n },\n//accion basica move. puede solo moverse, o moverse y disparar\n move: function move(unitX,moveAction,shootUnitY){\n   if (shootUnitY){\n     //el shoot ya tiene EndTurnAction incorporado, si solo se mueve hay q agregarlo\n     return [new ActivateAction(unitX.id),moveAction,new ShootAction(unitX.id,shootUnitY.id)];\n   } else {\n     return [new ActivateAction(unitX.id),moveAction,new EndTurnAction(unitX.id)];\n   }\n },\n// devuelve las unidades que el jugador puede usar en su proxima accion\npossibleUnits: function possibleUnits(game, player){\n  //[playerArmy, playerUnits, enemyArmy, enemyUnits]\n  var playerUnits = this.armiesAndUnits(game,player)[1];\n  var possibleUnits = [];\n  playerUnits.forEach(function (pu) {\n    if ((!pu.isDead()) && (pu.isEnabled) && (!pu.isActive)){\n      possibleUnits.push(pu);\n    }\n  });\n  return possibleUnits;\n},\n// devuelve una lista de unidades enemigas que pueden ser disparadas por la unidad atacante\nshootableUnitsAux: function shootableUnitsAux(game, player, shooter){\n  var shootableUnits = [];\n  var enemyUnits = this.livingEnemyUnits(game,player);\n  var shootActions = shooter.getShootActions(game);\n  shootActions.forEach(function(shootAction){\n    enemyUnits.forEach(function(target){\n      if(shootAction.targetId === target.id){\n        shootableUnits.push(target);\n      }\n    });\n  });\n  return shootableUnits;\n},\n// devuelve una lista de unidades enemigas que pueden ser disparadas por cada unidad aliada\nallShootableUnits: function allShootableUnits(game, player){\n  var allShootableUnits = [];\n  var possibleUnits = this.playerPossibleUnits;\n  for (var i = 0; i < possibleUnits.length; i++) {\n    var shooter = possibleUnits[i];\n    var shooterShootableUnits = [];\n    shooterShootableUnits = this.shootableUnitsAux(game, player, shooter);\n    allShootableUnits[i] = [shooter,shooterShootableUnits];\n  }\n  return allShootableUnits;\n},\nenemyShootableUnits: function enemyShootableUnits(game, player, shooter){\n  var enemyShootableUnits = [];\n  for (var psu=0; psu < this.playerShootableUnits.length; psu++){\n   if(this.playerShootableUnits[psu][0]==shooter){\n     enemyShootableUnits = this.playerShootableUnits[psu][1];\n   }\n  }\n  return enemyShootableUnits;\n},\n\n//devuelve true si el shooter puede dispararle al target\n canShoot_: function canShoot_(game,shooter,target,walking){\n   if (!shooter.isDead() && shooter.isEnabled && !target.isDead()){\n     if (game.terrain.canShoot(shooter,target) != Infinity){\n       return true;\n     }\n   }\n   return false;\n },\n // devuelve una lista de las unidades enemigas que aun estan vivas\n livingEnemyUnits: function livingEnemyUnits(game, player){\n   //[playerArmy, playerUnits, enemyArmy, enemyUnits]\n   var enemyArmy = this.armiesAndUnits(game,player)[2];\n   return enemyArmy.livingUnits();\n },\n // devuelve un array que facilita los datos: playerArmy, playerUnits, enemyArmy, enemyUnits\n armiesAndUnits: function armiesAndUnits(game, player){\n   var playerArmy = game.armies[player];\n   var playerUnits = playerArmy.units;\n   var enemy = game.opponent(player);\n   var enemyArmy = game.armies[enemy];\n   var enemyUnits  = enemyArmy.units;\n   return [playerArmy, playerUnits, enemyArmy, enemyUnits];\n },\n // devuelve true si la unidad es una de las mas faciles de eliminar de una lista de unidades dada\n easiestToKill: function easiestToKill(units,unit){\n   var easeToKill = iterable(units).map(function (u) {\n     return u.livingModels().length * u.defense;\n   }).max(0);\n   return unit.livingModels().length * unit.defense === easeToKill;\n   /* en realidad deberiamos considerar esto tambien:\n   if (regeneration){ easeToKill+=1;}\n   if (tought(x)){ easeToKill+=1.5*x;}\n   if (stealth){ easeToKill+=0.5;}*/\n },\n\n /*metodo auxiliar de interpolation\n  para cuando la distancia entre las X es mayor que la distancia entre las Y*/\n interForX: function interForX(xmin,xmax,y_xmin,delta){\n   var interpolatedPos = [];\n   var y=y_xmin;\n   for (var x=xmin+1;x<xmax;x++){\n      interpolatedPos.push([parseInt(x),parseInt(y)]);\n     y += delta;\n   }\n   return interpolatedPos;\n },\n /*metodo auxiliar de interpolation\n  para cuando la distancia entre las Y es mayor que la distancia entre las X*/\n interForY: function interFory(ymin,ymax,x_ymin,delta){\n   var interpolatedPos = [];\n   var x=x_ymin;\n   for (var y=ymin+1;y<ymax;y++){\n      interpolatedPos.push([parseInt(x),parseInt(y)]);\n     x += delta;\n   }\n   return interpolatedPos;\n },\n//genera un array de puntos entre el pointA y el pointB\n interpolation: function interpolation(pointA,pointB){\n   var x=0,\n    y=0,\n    delta=0;\n   var xa = pointA[0],\n    xb = pointB[0],\n    ya = pointA[1],\n    yb = pointB[1];\n   var xmin = Math.min(xa,xb),\n    xmax = Math.max(xa,xb),\n    ymin = Math.min(ya,yb),\n    ymax = Math.max(ya,yb);\n   var x_ymin,\n    y_xmin;\n   if (xmin === xa){\n     y_xmin = ya;\n   }else{\n     y_xmin = yb;\n   }\n   if (ymin === ya){\n     x_ymin = xa;\n   }else{\n     x_ymin = xb;\n   }\n   var interForX;\n   var interForY;\n   if (ya===yb){\n     interForX = this.interForX(xmin,xmax,y_xmin,delta);\n     return interForX;\n   } else {\n     if (xa===xb){\n       interForY = this.interForY(ymin,ymax,x_ymin,delta);\n       return interForY;\n     } else {\n       if (Math.abs(yb-ya) >= Math.abs(xb-xa)){\n         delta = Math.abs(xb-xa) / Math.abs(yb-ya);\n         interForY = this.interForY(ymin,ymax,x_ymin,delta);\n         return interForY;\n       } else {\n         delta = Math.abs(yb-ya) / Math.abs(xb-xa);\n         interForX = this.interForX(xmin,xmax,y_xmin,delta);\n         return interForX;\n       }\n     }\n   }\n },\n // retorna el move que hace que unitX se acerque lo mas posible a unitZ\n getCloseTo: function getCloseTo(game,unitX,unitZ){\n    //encuentro a linea de posiciones entre unitX y unitZ\n    var interpolatedPos = this.interpolation(unitX.position,unitZ.position);\n    //pongo en una lista todos los movimientos que lleven a la linea\n    var moveActions = unitX.getMoveActions(game);\n    //var moveActions = this.getFewMoveActions(game, unitX);\n    var possibleMoves = [];\n    for (var i=0; i<moveActions.length; i++){\n      var pos = moveActions[i].position;\n      interpolatedPos.forEach(function(elem){\n        if(pos[0]===elem[0]&&pos[1]===elem[1]){\n          possibleMoves.push(moveActions[i]);\n        }\n      });\n    }\n    // recorro la lista para ver cual esta mas cerca a unitZ\n    var closest = unitX.position;\n    var move = moveActions[Math.floor(Math.random()*moveActions.length)];\n    for (var j=0; j<possibleMoves.length;j++){\n      var movePos = possibleMoves[j].position;\n      if (game.terrain.distance(movePos,unitZ.position)<game.terrain.distance(closest,unitZ.position)){\n        closest = movePos;\n        move = possibleMoves[j];\n      }\n    }\n    var return_move = this.move(unitX,move);\n    return return_move;\n},\n\n // ## Rules /////////////////////////////////////////////////////////////////\n\n//si puede disparar que dispare\n rule_100: playerRule(100, function rule_100(game, player){\n   var possibleUnits = this.playerPossibleUnits;\n   for (var i = 0; i < possibleUnits.length; i++) {\n     var unitX = possibleUnits[i];\n     var enemyShootableUnits = this.enemyShootableUnits(game, player, unitX);\n     for (var j = 0; j < enemyShootableUnits.length; j++) {\n       var unitY = enemyShootableUnits[j];\n       //console.log(\"rule_100. shoot\");\n       return this.shoot(unitX,unitY);\n     }\n   }\n   return null;\n }),\n // si no puede disparar que se acerque al enemigo mas facil de matar\n rule_1F: playerRule(1, function rule_1F(game, player){\n   //var enemyUnits = this.livingEnemyUnits(game, player),\n   var possibleUnits = this.playerPossibleUnits;\n   for (var i = 0; i < possibleUnits.length; i++) {\n     var unitX = possibleUnits[i];\n     var enemyShootableUnits = this.enemyShootableUnits(game, player, unitX);\n     if (enemyShootableUnits.length==0){\n       var enemyUnits = this.livingEnemyUnits(game, player);\n       for (var k=0; k<enemyUnits.length;k++){\n         var eu = enemyUnits[k];\n         if (this.easiestToKill(enemyUnits,eu)){\n           //console.log(\"rule_1F. move\");\n           var move = this.getCloseTo(game,unitX,eu);\n           return move;\n         }\n       }\n     }\n   }\n   return null;\n })\n\n}); // declare BasicRulePlayer_shoot\n","var BasicRulePlayer_assault = exports.BasicRulePlayer_assault = declare(ludorum.Player, {\n /** The constructor takes the player's `name` and the following:\n  */\n constructor: function BasicRulePlayer_assault(params) {\n   ludorum.Player.call(this, params);\n   initialize(this, params)\n    .array('rules', { defaultValue: [] });\n   this.__pendingActions__ = [];\n   this.rules = this.ownRules();\n   this.playerPossibleUnits = [];\n   this.playerAssaultableUnits = [];\n },\n\n /** Returns an array with the methods of this object whose name starts with `rule`.\n  */\n ownRules: function ownRules() {\n   var self = this;\n   return Object.keys(Object.getPrototypeOf(this)).map(function (id) {\n     return [self[id], 1];\n   }).filter(function (member) {\n     var f = member[0];\n     return typeof f === 'function' && f.name && f.name.substr(0, 4) === 'rule';\n   });\n },\n\n /** The player makes a decision by calling the rules' functions in order. The first one to\n return a list of actions is used.\n */\n decision: function decision(game, player) {\n   game.synchronizeMetagame();\n   this.playerPossibleUnits = this.possibleUnits(game, player);\n   this.playerAssaultableUnits = this.allAssaultableUnits(game, player);\n   var rule, actions;\n   if (this.__pendingActions__.length < 1) {\n     for (var i=0; i<this.rules.length; i++){\n       rule = this.rules[i];\n       actions = rule[0].call(this, game, player);\n       if (actions) {\n         actions.forEach(function (action) {\n           action.__rule__ = rule;\n         });\n         this.__pendingActions__ = this.__pendingActions__.concat(actions);\n         return this.__pendingActions__.shift();\n       }\n     }\n   }\n   raiseIf(this.__pendingActions__.length < 1, 'No rule applied to game!');\n   return this.__pendingActions__.shift();\n },\n\n 'static __SERMAT__': {\n   identifier: 'BasicRulePlayer_assault',\n   serializer: function serialize_BasicRulePlayer_assault(obj) {\n     return this.serializeAsProperties(obj, ['name', 'rules']); //TODO Check function serialization.\n   }\n },\n\n // ## Helper functions /////////////////////////////////////////////////////////////////////////\n\n//accion basica assault\n assault: function assault(unitX,unitY){\n   return [new ActivateAction(unitX.id),new AssaultAction(unitX.id,unitY.id)];\n },\n//accion basica move. puede solo moverse, o moverse y disparar\n move: function move(unitX,moveAction,shootUnitY){\n   if (shootUnitY){\n     //el shoot ya tiene EndTurnAction incorporado, si solo se mueve hay q agregarlo\n     return [new ActivateAction(unitX.id),moveAction,new ShootAction(unitX.id,shootUnitY.id)];\n   } else {\n     return [new ActivateAction(unitX.id),moveAction,new EndTurnAction(unitX.id)];\n   }\n },\n\n// devuelve las unidades que el jugador puede usar en su proxima accion\npossibleUnits: function possibleUnits(game, player){\n  //[playerArmy, playerUnits, enemyArmy, enemyUnits]\n  var playerUnits = this.armiesAndUnits(game,player)[1];\n  var possibleUnits = [];\n  playerUnits.forEach(function (pu) {\n    if ((!pu.isDead()) && (pu.isEnabled) && (!pu.isActive)){\n      possibleUnits.push(pu);\n    }\n  });\n  return possibleUnits;\n},\n\n\n// devuelve una lista de unidades enemigas que pueden ser asaltadas por la unidad atacante\nassaultableUnits: function assaultableUnits(game, player, assaulter){\n  var assaultableUnits = [];\n  var enemyUnits = this.livingEnemyUnits(game,player);\n  var assaultActions = assaulter.getAssaultActions(game);\n  assaultActions.forEach(function(assaultAction){\n    enemyUnits.forEach(function (target){\n      if(assaultAction.targetId === target.id){\n        assaultableUnits.push(target);\n      }\n    });\n  });\n  return assaultableUnits;\n},\n// devuelve una lista de unidades enemigas que pueden ser asaltadas por cada unidad aliada\nallAssaultableUnits: function allAssaultableUnits(game, player){\n  var allAssaultableUnits = [];\n  var possibleUnits = this.playerPossibleUnits;\n  for (var i = 0; i < possibleUnits.length; i++) {\n    var assaulter = possibleUnits[i];\n    var assaulterAssaultableUnits = [];\n    assaulterAssaultableUnits = this.assaultableUnits(game, player, assaulter);\n    allAssaultableUnits[i] = [assaulter,assaulterAssaultableUnits];\n  }\n  return allAssaultableUnits;\n},\nenemyAssaultableUnits: function enemyAssaultableUnits(game, player, assaulter){\n  var enemyAssaultableUnits = [];\n  for (var pau=0; pau < this.playerAssaultableUnits.length; pau++){\n   if(this.playerAssaultableUnits[pau][0]==assaulter){\n     enemyAssaultableUnits = this.playerAssaultableUnits[pau][1];\n   }\n  }\n  return enemyAssaultableUnits;\n},\n\n //devuelve true si el assaulter puede asaltar al target\n canAssault: function canAssault(game,assaulter,target){\n   if (!assaulter.isDead() && assaulter.isEnabled && !target.isDead()){\n     if (game.terrain.canShoot(assaulter,target) <= 12){\n       return true;\n     }\n   }\n   return false;\n },\n\n // devuelve una lista de las unidades enemigas que aun estan vivas\n livingEnemyUnits: function livingEnemyUnits(game, player){\n   //[playerArmy, playerUnits, enemyArmy, enemyUnits]\n   var enemyArmy = this.armiesAndUnits(game,player)[2];\n   return enemyArmy.livingUnits();\n },\n // devuelve un array que facilita los datos: playerArmy, playerUnits, enemyArmy, enemyUnits\n armiesAndUnits: function armiesAndUnits(game, player){\n   var playerArmy = game.armies[player];\n   var playerUnits = playerArmy.units;\n   var enemy = game.opponent(player);\n   var enemyArmy = game.armies[enemy];\n   var enemyUnits  = enemyArmy.units;\n   return [playerArmy, playerUnits, enemyArmy, enemyUnits];\n },\n\n\n // ## Rules /////////////////////////////////////////////////////////////////\n\n //si puede asaltar que asalte.\n rule_100: playerRule(100, function rule_100(game, player){\n     var possibleUnits = this.playerPossibleUnits;\n     for (var i = 0; i < possibleUnits.length; i++) {\n       var unitX = possibleUnits[i];\n       var enemyAssaultableUnits = this.enemyAssaultableUnits(game, player, unitX);\n       for (var j = 0; j < enemyAssaultableUnits.length; j++) {\n         var unitY = enemyAssaultableUnits[j];\n         //console.log(\"rule_100. assault\");\n         return this.assault(unitX,unitY);\n       }\n     }\n   return null;\n }),\n\n // si no puede asaltar entonces se movera\n rule_1: playerRule(1, function rule_1(game, player){\n   //var enemyUnits = this.livingEnemyUnits(game, player),\n   var possibleUnits = this.playerPossibleUnits;\n   for (var i = 0; i < possibleUnits.length; i++) {\n     var unitX = possibleUnits[i];\n     var moveActions = unitX.getMoveActions(game);\n     var return_move = this.move(unitX,moveActions[Math.floor(Math.random()*moveActions.length)]);\n     //console.log(\"rule_1. move\");\n     return return_move;\n   }\n   return null;\n })\n\n}); // declare BasicRulePlayer_assault\n","var BasicRulePlayer_assist = exports.BasicRulePlayer_assist = declare(ludorum.Player, {\n /** The constructor takes the player's `name` and the following:\n  */\n constructor: function BasicRulePlayer_assist(params) {\n   ludorum.Player.call(this, params);\n   initialize(this, params)\n    .array('rules', { defaultValue: [] });\n   this.__pendingActions__ = [];\n   this.rules = this.ownRules();\n   this.playerPossibleUnits = [];\n   this.playerShootableUnits = [];\n   this.playerAssaultableUnits = [];\n },\n\n /** Returns an array with the methods of this object whose name starts with `rule`.\n  */\n ownRules: function ownRules() {\n   var self = this;\n   return Object.keys(Object.getPrototypeOf(this)).map(function (id) {\n     return [self[id], 1];\n   }).filter(function (member) {\n     var f = member[0];\n     return typeof f === 'function' && f.name && f.name.substr(0, 4) === 'rule';\n   });\n },\n\n /** The player makes a decision by calling the rules' functions in order. The first one to\n return a list of actions is used.\n */\n decision: function decision(game, player) {\n   game.synchronizeMetagame();\n   this.playerPossibleUnits = this.possibleUnits(game, player);\n   this.playerShootableUnits = this.allShootableUnits(game, player);\n   this.playerAssaultableUnits = this.allAssaultableUnits(game, player);\n   var rule, actions;\n   if (this.__pendingActions__.length < 1) {\n     for (var i=0; i<this.rules.length; i++){\n       rule = this.rules[i];\n       actions = rule[0].call(this, game, player);\n       if (actions) {\n         actions.forEach(function (action) {\n           action.__rule__ = rule;\n         });\n         this.__pendingActions__ = this.__pendingActions__.concat(actions);\n         return this.__pendingActions__.shift();\n       }\n     }\n   }\n   raiseIf(this.__pendingActions__.length < 1, 'No rule applied to game!');\n   return this.__pendingActions__.shift();\n },\n\n 'static __SERMAT__': {\n   identifier: 'BasicRulePlayer_assist',\n   serializer: function serialize_BasicRulePlayer_assist(obj) {\n     return this.serializeAsProperties(obj, ['name', 'rules']); //TODO Check function serialization.\n   }\n },\n\n // ## Helper functions /////////////////////////////////////////////////////////////////////////\n//accion basica shoot\n shoot: function shoot(unitX,unitY){\n   return [new ActivateAction(unitX.id),new ShootAction(unitX.id,unitY.id)];\n },\n//accion basica assault\n assault: function assault(unitX,unitY){\n   return [new ActivateAction(unitX.id),new AssaultAction(unitX.id,unitY.id)];\n },\n//accion basica move. puede solo moverse, o moverse y disparar\n move: function move(unitX,moveAction,shootUnitY){\n   if (shootUnitY){\n     //el shoot ya tiene EndTurnAction incorporado, si solo se mueve hay q agregarlo\n     return [new ActivateAction(unitX.id),moveAction,new ShootAction(unitX.id,shootUnitY.id)];\n   } else {\n     return [new ActivateAction(unitX.id),moveAction,new EndTurnAction(unitX.id)];\n   }\n },\n //metodo auxiliar para la funcion assist\n assistAux: function assistAux(game,player,enemyUnits,unitX,unitX2){\n   for (var i=0;i<enemyUnits.length;i++){\n      var eu = enemyUnits[i];\n      if (this.canAssault(game,unitX,eu)){\n        return this.assault(unitX,eu);\n      }\n      var moveAction;\n      if (this.canBlockSight(game,unitX,unitX2,eu)){\n        var blockSightMovements = this.blockSightMovements(game,unitX,unitX2,eu);\n        moveAction = blockSightMovements[Math.floor(Math.random()*blockSightMovements.length)];\n      }\n      if (this.canShoot_(game,unitX,eu,true)){\n        if (moveAction){\n          return this.move(unitX,moveAction,eu);\n        } else {\n          return this.shoot(unitX,eu);\n        }\n      } else{\n        if (moveAction){\n          return this.move(unitX,moveAction);\n        }\n      }\n    }\n    return null;\n },\n/*al enemigo que pueda atacar a unitX2, intenta asaltarlo, o moverse para bloquear su vista y dispararlo\nempezando por los enemigos mas peligrosos\n*/\n assist: function assist(game,player,unitX,unitX2){\n   var mostDangerousUnits = this.mostDangerousUnits(game,player,unitX2);\n   var assistMdu = this.assistAux(game,player,mostDangerousUnits,unitX,unitX2);\n   if (assistMdu){\n     return assistMdu;\n   }\n   var dangerousUnits = this.dangerousUnits(game,player,unitX2);\n   var assistDu = this.assistAux(game,player,dangerousUnits,unitX,unitX2);\n   if (assistDu){\n     return assistDu;\n   }\n   console.log(\"no asiste cuando deberia\");\n   var moveActions = unitX.getMoveActions(game);\n   var return_move = this.move(unitX,moveActions[Math.floor(Math.random()*moveActions.length)]);\n   return return_move;\n },\n\n// devuelve las unidades que el jugador puede usar en su proxima accion\npossibleUnits: function possibleUnits(game, player){\n  //[playerArmy, playerUnits, enemyArmy, enemyUnits]\n  var playerUnits = this.armiesAndUnits(game,player)[1];\n  var possibleUnits = [];\n  playerUnits.forEach(function (pu) {\n    if ((!pu.isDead()) && (pu.isEnabled) && (!pu.isActive)){\n      possibleUnits.push(pu);\n    }\n  });\n  return possibleUnits;\n},\n// devuelve una lista de unidades enemigas que pueden ser disparadas por la unidad atacante\nshootableUnitsAux: function shootableUnitsAux(game, player, shooter){\n  var shootableUnits = [];\n  var enemyUnits = this.livingEnemyUnits(game,player);\n  var shootActions = shooter.getShootActions(game);\n  shootActions.forEach(function(shootAction){\n    enemyUnits.forEach(function(target){\n      if(shootAction.targetId === target.id){\n        shootableUnits.push(target);\n      }\n    });\n  });\n  return shootableUnits;\n},\n// devuelve una lista de unidades enemigas que pueden ser disparadas por cada unidad aliada\nallShootableUnits: function allShootableUnits(game, player){\n  var allShootableUnits = [];\n  var possibleUnits = this.playerPossibleUnits;\n  for (var i = 0; i < possibleUnits.length; i++) {\n    var shooter = possibleUnits[i];\n    var shooterShootableUnits = [];\n    shooterShootableUnits = this.shootableUnitsAux(game, player, shooter);\n    allShootableUnits[i] = [shooter,shooterShootableUnits];\n  }\n  return allShootableUnits;\n},\nenemyShootableUnits: function enemyShootableUnits(game, player, shooter){\n  var enemyShootableUnits = [];\n  for (var psu=0; psu < this.playerShootableUnits.length; psu++){\n   if(this.playerShootableUnits[psu][0]==shooter){\n     enemyShootableUnits = this.playerShootableUnits[psu][1];\n   }\n  }\n  return enemyShootableUnits;\n},\n\n// devuelve una lista de unidades enemigas que pueden ser asaltadas por la unidad atacante\nassaultableUnits: function assaultableUnits(game, player, assaulter){\n  var assaultableUnits = [];\n  var enemyUnits = this.livingEnemyUnits(game,player);\n  var assaultActions = assaulter.getAssaultActions(game);\n  assaultActions.forEach(function(assaultAction){\n    enemyUnits.forEach(function (target){\n      if(assaultAction.targetId === target.id){\n        assaultableUnits.push(target);\n      }\n    });\n  });\n  return assaultableUnits;\n},\n// devuelve una lista de unidades enemigas que pueden ser asaltadas por cada unidad aliada\nallAssaultableUnits: function allAssaultableUnits(game, player){\n  var allAssaultableUnits = [];\n  var possibleUnits = this.playerPossibleUnits;\n  for (var i = 0; i < possibleUnits.length; i++) {\n    var assaulter = possibleUnits[i];\n    var assaulterAssaultableUnits = [];\n    assaulterAssaultableUnits = this.assaultableUnits(game, player, assaulter);\n    allAssaultableUnits[i] = [assaulter,assaulterAssaultableUnits];\n  }\n  return allAssaultableUnits;\n},\nenemyAssaultableUnits: function enemyAssaultableUnits(game, player, assaulter){\n  var enemyAssaultableUnits = [];\n  for (var pau=0; pau < this.playerAssaultableUnits.length; pau++){\n   if(this.playerAssaultableUnits[pau][0]==assaulter){\n     enemyAssaultableUnits = this.playerAssaultableUnits[pau][1];\n   }\n  }\n  return enemyAssaultableUnits;\n},\n\n//devuelve true si el shooter puede dispararle al target\n canShoot_: function canShoot_(game,shooter,target,walking){\n   if (!shooter.isDead() && shooter.isEnabled && !target.isDead()){\n     if (game.terrain.canShoot(shooter,target) != Infinity){\n       return true;\n     }\n   }\n   return false;\n },\n //devuelve true si el assaulter puede asaltar al target\n canAssault: function canAssault(game,assaulter,target){\n   if (!assaulter.isDead() && assaulter.isEnabled && !target.isDead()){\n     if (game.terrain.canShoot(assaulter,target) <= 12){\n       return true;\n     }\n   }\n   return false;\n },\n /*metodo auxiliar de interpolation\n  para cuando la distancia entre las X es mayor que la distancia entre las Y*/\n interForX: function interForX(xmin,xmax,y_xmin,delta){\n   var interpolatedPos = [];\n   var y=y_xmin;\n   for (var x=xmin+1;x<xmax;x++){\n      interpolatedPos.push([parseInt(x),parseInt(y)]);\n     y += delta;\n   }\n   return interpolatedPos;\n },\n /*metodo auxiliar de interpolation\n  para cuando la distancia entre las Y es mayor que la distancia entre las X*/\n interForY: function interFory(ymin,ymax,x_ymin,delta){\n   var interpolatedPos = [];\n   var x=x_ymin;\n   for (var y=ymin+1;y<ymax;y++){\n      interpolatedPos.push([parseInt(x),parseInt(y)]);\n     x += delta;\n   }\n   return interpolatedPos;\n },\n//genera un array de puntos entre el pointA y el pointB\n interpolation: function interpolation(pointA,pointB){\n   var x=0,\n    y=0,\n    delta=0;\n   var xa = pointA[0],\n    xb = pointB[0],\n    ya = pointA[1],\n    yb = pointB[1];\n   var xmin = Math.min(xa,xb),\n    xmax = Math.max(xa,xb),\n    ymin = Math.min(ya,yb),\n    ymax = Math.max(ya,yb);\n   var x_ymin,\n    y_xmin;\n   if (xmin === xa){\n     y_xmin = ya;\n   }else{\n     y_xmin = yb;\n   }\n   if (ymin === ya){\n     x_ymin = xa;\n   }else{\n     x_ymin = xb;\n   }\n   var interForX;\n   var interForY;\n   if (ya===yb){\n     interForX = this.interForX(xmin,xmax,y_xmin,delta);\n     return interForX;\n   } else {\n     if (xa===xb){\n       interForY = this.interForY(ymin,ymax,x_ymin,delta);\n       return interForY;\n     } else {\n       if (Math.abs(yb-ya) >= Math.abs(xb-xa)){\n         delta = Math.abs(xb-xa) / Math.abs(yb-ya);\n         interForY = this.interForY(ymin,ymax,x_ymin,delta);\n         return interForY;\n       } else {\n         delta = Math.abs(yb-ya) / Math.abs(xb-xa);\n         interForX = this.interForX(xmin,xmax,y_xmin,delta);\n         return interForX;\n       }\n     }\n   }\n },\n /*devuelve las posiciones en que la unitX puede ponerse entre la unitA y la unitB\n de forma tal que quite la linea de vision entre las mismas */\n blockSightMovements: function blockSightMovements(game,unitX,unitA,unitB){\n   //dadas las posiciones de unitA y unitB\n   var posA = unitA.position;\n   var posB = unitB.position;\n   //calcula las posiciones intermedias y las pone en un array\n   var interpolatedPos = this.interpolation(posA,posB);\n   //devuelve la posicion de los moveActions de unitX que coincidan con alguna del array\n   var possibleMoves = [];\n   var moveActions = unitX.getMoveActions(game);\n   for (var i=0; i<moveActions.length; i++){\n     var pos = moveActions[i].position;\n     interpolatedPos.forEach(function(elem){\n       if(pos[0]===elem[0]&&pos[1]===elem[1]){\n         possibleMoves.push(moveActions[i]);\n       }\n     });\n   }\n   return possibleMoves;\n },\n /*devuelve true si la unitX puede ponerse entre la unitA y la unitB\n de forma tal que quite la linea de vision entre las mismas */\n canBlockSight: function canBlockSight(game,unitX,unitA,unitB){\n   return (this.blockSightMovements(game,unitX,unitA,unitB).length>0);\n },\n /*Devuelve true si la unitX puede cubrir a la unitX2\n y/o puedeAtacar a las unidades enemigas no activadas que puedan atacar a la unitX2.*/\n canAssist: function canAssist(game,player,unitX,unitX2){\n  var dangerousUnits = this.dangerousUnits(game,player,unitX2);\n  var canAssist = false;\n  for (var i=0;i<dangerousUnits.length;i++){\n     var du = dangerousUnits[i];\n     if (this.canBlockSight(game,unitX,unitX2,du)||this.canShoot_(game,unitX,du,true)||this.canAssault(game,unitX,du)){\n       canAssist = true;\n     } else {\n       canAssist = false;\n       break;\n     }\n   }\n   //si nadie lo puede atacar, no tiene de que asistir\n   return canAssist;\n},\n\n // devuelve las unidades enemigas que pueden matar a la unitX\n mostDangerousUnits: function mostDangerousUnits(game,player,unitX){\n   var livingEnemyUnits = this.livingEnemyUnits(game,player),\n    mdu = [];\n   for (var i=0;i<livingEnemyUnits.length;i++){\n     var u = livingEnemyUnits[i];\n     if (this.canKill(game,u,unitX)){\n       mdu.push(u);\n     }\n   }\n   return mdu;\n   //return iterable(livingEnemyUnits).filter(function (u) {\n  //    return this.canKill(game,u,unitX);\n   //});\n },\n // devuelve las unidades enemigas que pueden atacar a la unitX\n dangerousUnits: function dangerousUnits(game,player,unitX){\n   var livingEnemyUnits = this.livingEnemyUnits(game,player),\n     du = [];\n    for (var i=0;i<livingEnemyUnits.length;i++){\n      var eu = livingEnemyUnits[i];\n      if (this.canShoot_(game,eu,unitX,true)||this.canAssault(game,eu,unitX)){\n        du.push(eu);\n      }\n    }\n    return du;\n   //return iterable(livingEnemyUnits).filter(function (eu) {\n     //return this.canShoot_(game,eu,unitX,true)||this.canAssault(game,eu,unitX);\n    //});\n },\n //devuelve verdadero si las unidades enemigas no pueden matar a unit en este turno\n canBeKilled: function canBeKilled(game,player,unit){\n   //[playerArmy, playerUnits, enemyArmy, enemyUnits]\n   var enemyUnits = this.armiesAndUnits(game,player)[3];\n   for (var i = 0; i < enemyUnits.length; i++) {\n     if (this.canKill(game,enemyUnits[i],unit)){\n       return true;\n     }\n   }\n   return false;\n },\n // devuelve verdadero si la unidad atacante puede llegar a eliminar a la defensora\n canKill: function canKill(game,attacker,target){\n   if (!attacker.isDead() && attacker.isEnabled && !target.isDead()){\n     if (this.canKillShooting(game,attacker,target) || this.canKillAssaulting(game,attacker,target)){\n       return true;\n     }\n   }\n   return false;\n },\n // devuelve verdadero si la unidad que dispara puede llegar a eliminar a la defensora\n canKillShooting: function canKillShooting(game,shooter,target){\n   if (!shooter.isDead() && !target.isDead() && shooter.isEnabled && this.bestAttackResultShooting(game,shooter,target)>=100){\n     return true;\n   }\n   return false;\n },\n // devuelve verdadero si la unidad que asalta puede llegar a eliminar a la defensora\n canKillAssaulting: function canKillAssaulting(game,assaulter,target){\n   if (!assaulter.isDead() && !target.isDead() && assaulter.isEnabled && this.bestAttackResultAssaulting(game,assaulter,target)>=100){\n     return true;\n   }\n   return false;\n },\n // devuelve un porcentaje de destruccion de la unidad defensora tras un ataque de la unidad atacante\n // devuelve el mejor porcentaje posible\n bestAttackResult: function bestAttackResult(game,attacker,target){\n   if (!attacker.isDead() && attacker.isEnabled && !target.isDead()){\n     var barShooting = this.bestAttackResultShooting(game,attacker,target);\n     var barAssaulting = this.bestAttackResultAssaulting(game,attacker,target);\n     var bestAttackResult = Math.max(barShooting, barAssaulting);\n     return bestAttackResult;\n   }\n   return 0;\n },\n // devuelve un porcentaje de destruccion de la unidad defensora tras un disparo de la unidad atacante\n // donde el mejor porcentaje posible: cada ataque supera las tiradas de dados, y el defensor falla los bloqueos\n bestAttackResultShooting: function bestAttackResultShooting(game,unitX,unitY){\n   if (!unitX.isDead() && unitX.isEnabled && !unitY.isDead()){\n     var distance = game.terrain.distance(unitX.position, unitY.position);\n     var livingModels = unitX.livingModels();\n     var attackCount = 0;\n   livingModels.forEach(function (model) {\n       model.equipments.forEach(function (eq) {\n         if (eq.range >= distance) {\n           attackCount += eq.attacks;\n         }\n       });\n     });\n     var unitYModelsAlive = unitY.livingModels().length;\n     var bestAttackResult = attackCount*100/unitYModelsAlive;\n     if (bestAttackResult > 100){\n       bestAttackResult = 100;\n     }\n     return bestAttackResult;\n   }\n   return 0;\n },\n // devuelve un porcentaje de destruccion de la unidad defensora tras un asalto de la unidad atacante\n // donde el mejor porcentaje posible: cada ataque supera las tiradas de dados, y el defensor falla los bloqueos\n bestAttackResultAssaulting: function bestAttackResultAssaulting(game,unitX,unitY){\n   if (!unitX.isDead() && unitX.isEnabled && !unitY.isDead()){\n     if (this.canAssault(game,unitX,unitY)){\n       var attackCount = 0;\n       var livingModels = unitX.livingModels();\n       livingModels.forEach(function (model) {\n         model.equipments.forEach(function (eq) {\n           if (eq.range === 0) {\n             attackCount += eq.attacks;\n           }\n         });\n       });\n       var unitYModelsAlive = unitY.livingModels().length;\n       var bestAttackResult = attackCount*100/unitYModelsAlive;\n       if (bestAttackResult > 100){\n         bestAttackResult = 100;\n       }\n       return bestAttackResult;\n     }\n   }\n   return 0;\n },\n\n // devuelve una lista de unidades enemigas que si shooter les dispara las mata\n shootingKillableUnits: function shootingKillableUnits(game,player,shooter){\n   var shootingKillableUnits = [];\n   var enemyUnits = this.shootableUnitsAux(game,player,shooter);\n\n   for (var i=0; i<enemyUnits.length;i++){\n     var target = enemyUnits[i];\n     if (this.willKillShooting(game,shooter,target)){\n       shootingKillableUnits.push(target);\n     }\n   }\n   return shootingKillableUnits;\n },\n // devuelve una lista de las unidades enemigas que aun estan vivas\n livingEnemyUnits: function livingEnemyUnits(game, player){\n   //[playerArmy, playerUnits, enemyArmy, enemyUnits]\n   var enemyArmy = this.armiesAndUnits(game,player)[2];\n   return enemyArmy.livingUnits();\n },\n // devuelve un array que facilita los datos: playerArmy, playerUnits, enemyArmy, enemyUnits\n armiesAndUnits: function armiesAndUnits(game, player){\n   var playerArmy = game.armies[player];\n   var playerUnits = playerArmy.units;\n   var enemy = game.opponent(player);\n   var enemyArmy = game.armies[enemy];\n   var enemyUnits  = enemyArmy.units;\n   return [playerArmy, playerUnits, enemyArmy, enemyUnits];\n },\n\n\n // ## Rules /////////////////////////////////////////////////////////////////\n // si puede asistit, que asista\n rule_100: playerRule(100, function rule_100(game, player){\n   var possibleUnits = this.playerPossibleUnits;\n   //[playerArmy, playerUnits, enemyArmy, enemyUnits]\n   var units = this.armiesAndUnits(game,player)[1];\n   for (var i = 0; i < possibleUnits.length; i++) {\n     var unitX = possibleUnits[i];\n     for (var j = 0; j < units.length; j++) {\n       var unitX2 = units[j];\n       if (this.canAssist(game,player,unitX,unitX2)){\n         //console.log(\"rule_100. assist\");\n         return this.assist(game,player,unitX,unitX2);\n       }\n     }\n   }\n   return null;\n }),\n\n // si no puede asaltar entonces se movera\n rule_1: playerRule(1, function rule_1(game, player){\n   //var enemyUnits = this.livingEnemyUnits(game, player),\n   var possibleUnits = this.playerPossibleUnits;\n   for (var i = 0; i < possibleUnits.length; i++) {\n     var unitX = possibleUnits[i];\n     var moveActions = unitX.getMoveActions(game);\n     var return_move = this.move(unitX,moveActions[Math.floor(Math.random()*moveActions.length)]);\n     //console.log(\"rule_1. move\");\n     return return_move;\n   }\n   return null;\n })\n\n}); // declare BasicRulePlayer_assist\n","var BasicRulePlayer_scape_then_shoot = exports.BasicRulePlayer_scape_then_shoot = declare(ludorum.Player, {\n /** The constructor takes the player's `name` and the following:\n  */\n constructor: function BasicRulePlayer_scape_then_shoot(params) {\n   ludorum.Player.call(this, params);\n   initialize(this, params)\n    .array('rules', { defaultValue: [] });\n   this.__pendingActions__ = [];\n   this.rules = this.ownRules();\n   this.playerPossibleUnits = [];\n   this.playerShootableUnits = [];\n },\n\n /** Returns an array with the methods of this object whose name starts with `rule`.\n  */\n ownRules: function ownRules() {\n   var self = this;\n   return Object.keys(Object.getPrototypeOf(this)).map(function (id) {\n     return [self[id], 1];\n   }).filter(function (member) {\n     var f = member[0];\n     return typeof f === 'function' && f.name && f.name.substr(0, 4) === 'rule';\n   });\n },\n\n /** The player makes a decision by calling the rules' functions in order. The first one to\n return a list of actions is used.\n */\n decision: function decision(game, player) {\n   game.synchronizeMetagame();\n   this.playerPossibleUnits = this.possibleUnits(game, player);\n   this.playerShootableUnits = this.allShootableUnits(game, player);\n   var rule, actions;\n   if (this.__pendingActions__.length < 1) {\n     for (var i=0; i<this.rules.length; i++){\n       rule = this.rules[i];\n       actions = rule[0].call(this, game, player);\n       if (actions) {\n         actions.forEach(function (action) {\n           action.__rule__ = rule;\n         });\n         this.__pendingActions__ = this.__pendingActions__.concat(actions);\n         return this.__pendingActions__.shift();\n       }\n     }\n   }\n   raiseIf(this.__pendingActions__.length < 1, 'No rule applied to game!');\n   return this.__pendingActions__.shift();\n },\n\n 'static __SERMAT__': {\n   identifier: 'BasicRulePlayer_scape_then_shoot',\n   serializer: function serialize_BasicRulePlayer_scape_then_shoot(obj) {\n     return this.serializeAsProperties(obj, ['name', 'rules']); //TODO Check function serialization.\n   }\n },\n\n // ## Helper functions /////////////////////////////////////////////////////////////////////////\n//accion basica shoot\n shoot: function shoot(unitX,unitY){\n   return [new ActivateAction(unitX.id),new ShootAction(unitX.id,unitY.id)];\n },\n//accion basica move. puede solo moverse, o moverse y disparar\n move: function move(unitX,moveAction,shootUnitY){\n   if (shootUnitY){\n     //el shoot ya tiene EndTurnAction incorporado, si solo se mueve hay q agregarlo\n     return [new ActivateAction(unitX.id),moveAction,new ShootAction(unitX.id,shootUnitY.id)];\n   } else {\n     return [new ActivateAction(unitX.id),moveAction,new EndTurnAction(unitX.id)];\n   }\n },\n//metodo auxiliar para la funcion scape\nscapeAux: function scapeAux(game,player,enemyUnits,unitX){\n  for (var i = 0; i < enemyUnits.length; i++) {\n    var eu = enemyUnits[i];\n    var moves = [];\n    if (this.canHide(game,unitX,eu)){\n      var hideMoves = this.hideMoves(game,unitX,eu);\n      for (var j=0; j<hideMoves.length; j++){\n        if (game.terrain.distance(eu.position,hideMoves[j].position)<=eu.maxRange()+6){\n          return this.move(unitX,hideMoves[j]);\n        }\n      }\n      moves = moves.concat(hideMoves);\n    }\n    if (this.canRun(game,unitX,eu)){\n      var runMoves = this.runMoves(game,unitX,eu);\n      for (var k=0; k<runMoves.length; k++){\n        if (game.terrain.distance(eu.position,runMoves[k].position)<=eu.maxRange()+6){\n          return this.move(unitX,runMoves[k]);\n        }\n      }\n      moves = moves.concat(runMoves);\n    }\n    if (moves.length>0){\n      return this.move(unitX,moves[Math.floor(Math.random()*moves.length)]);\n    }\n  }\n},\n//retorna un move, que le sirva a unitX para escapar de los enemigos peligrosos\n scape: function scape(game,player,unitX){\n   var mostDangerousUnits = this.mostDangerousUnits(game,player,unitX);\n   var scapeMdu = this.scapeAux(game,player,mostDangerousUnits,unitX);\n   if (scapeMdu){\n     return scapeMdu;\n   }\n   var dangerousUnits = this.dangerousUnits(game,player,unitX);\n   var scapeDu = this.scapeAux(game,player,mostDangerousUnits,unitX);\n   if (scapeDu){\n     return scapeDu;\n   }\n   console.log(\"no escapa cuando deberia\");\n   var moveActions = unitX.getMoveActions(game);\n   var return_move = this.move(unitX,moveActions[Math.floor(Math.random()*moveActions.length)]);\n   return return_move;\n },\n\n// devuelve las unidades que el jugador puede usar en su proxima accion\npossibleUnits: function possibleUnits(game, player){\n  //[playerArmy, playerUnits, enemyArmy, enemyUnits]\n  var playerUnits = this.armiesAndUnits(game,player)[1];\n  var possibleUnits = [];\n  playerUnits.forEach(function (pu) {\n    if ((!pu.isDead()) && (pu.isEnabled) && (!pu.isActive)){\n      possibleUnits.push(pu);\n    }\n  });\n  return possibleUnits;\n},\n// devuelve una lista de unidades enemigas que pueden ser disparadas por la unidad atacante\nshootableUnitsAux: function shootableUnitsAux(game, player, shooter){\n  var shootableUnits = [];\n  var enemyUnits = this.livingEnemyUnits(game,player);\n  var shootActions = shooter.getShootActions(game);\n  shootActions.forEach(function(shootAction){\n    enemyUnits.forEach(function(target){\n      if(shootAction.targetId === target.id){\n        shootableUnits.push(target);\n      }\n    });\n  });\n  return shootableUnits;\n},\n// devuelve una lista de unidades enemigas que pueden ser disparadas por cada unidad aliada\nallShootableUnits: function allShootableUnits(game, player){\n  var allShootableUnits = [];\n  var possibleUnits = this.playerPossibleUnits;\n  for (var i = 0; i < possibleUnits.length; i++) {\n    var shooter = possibleUnits[i];\n    var shooterShootableUnits = [];\n    shooterShootableUnits = this.shootableUnitsAux(game, player, shooter);\n    allShootableUnits[i] = [shooter,shooterShootableUnits];\n  }\n  return allShootableUnits;\n},\nenemyShootableUnits: function enemyShootableUnits(game, player, shooter){\n  var enemyShootableUnits = [];\n  for (var psu=0; psu < this.playerShootableUnits.length; psu++){\n   if(this.playerShootableUnits[psu][0]==shooter){\n     enemyShootableUnits = this.playerShootableUnits[psu][1];\n   }\n  }\n  return enemyShootableUnits;\n},\n\n//devuelve true si el shooter puede dispararle al target\n canShoot_: function canShoot_(game,shooter,target,walking){\n   if (!shooter.isDead() && shooter.isEnabled && !target.isDead()){\n     if (game.terrain.canShoot(shooter,target) != Infinity){\n       return true;\n     }\n   }\n   return false;\n },\n\n //devuelve true si puede correr y alejarse el rango suficiente\n canRun: function canRun(game,runningUnit,enemyUnit){\n   var range = enemyUnit.maxRange()+6;\n   //corre 12 pero el enemigo se acerca 6\n   if (runningUnit.isEnabled && game.terrain.canShoot(enemyUnit,runningUnit)<=range){\n     return false;\n   }\n   return true;\n },\n /*devuelve true si puede cubrirse de las unidades enemigas\n tras otra unidad u terreno que quite linea de vision*/\n canHide: function canHide(game,hidingUnit,enemyUnit){//TODO\n   return false;\n },\n /*Retorna el move que hace que unitX se aleje lo mas posible de unitZ.\n Lo devuelve en una lista*/\n runMoves: function runMoves(game,unitX,unitZ){\n    var zPos = unitZ.position;\n    var farest = unitX.position;\n    var moveActions = unitX.getMoveActions(game);\n    var move = moveActions[Math.floor(Math.random()*moveActions.length)];\n    for (var i=0; i<moveActions.length;i++){\n      var movePos = moveActions[i].position;\n      if (game.terrain.distance(movePos,zPos)>game.terrain.distance(farest,zPos)){\n        farest = movePos;\n        move = moveActions[i];\n      }\n    }\n    if (game.terrain.distance(unitZ.position,farest)<=unitZ.maxRange()+6){\n      console.log(\"run y puede huir\");\n     return [move];\n    }\n    console.log(\"run y huyo lo maximo q pudo pero igual lo alcanzan\");\n    return [move];\n },\n //devuelve la lista de movimientos en los que la hidingUnit puede esconderse  de la enemyUnit\n hideMoves: function hideMoves(game,hidingUnit,enemyUnit){//TODO\n   return [];\n },\n// devuelve true si unitX puede escaparse de las unidades que la pueden matar\n canScape: function canScape(game,player,unitX){\n   var mostDangerousUnits = this.mostDangerousUnits(game,player,unitX);\n   //si nadie lo puede matar, no tiene de quien escapar\n   if (mostDangerousUnits.length === 0){\n     return false;\n   }\n   var canScape = true;\n   for (var i = 0; i < mostDangerousUnits.length; i++) {\n     var mdu = mostDangerousUnits[i];\n     if (!this.canRun(game,unitX,mdu) && !this.canHide(game,unitX,mdu)){\n       canScape = false;\n     }\n   }\n   return canScape;\n },\n // devuelve las unidades enemigas que pueden matar a la unitX\n mostDangerousUnits: function mostDangerousUnits(game,player,unitX){\n   var livingEnemyUnits = this.livingEnemyUnits(game,player),\n    mdu = [];\n   for (var i=0;i<livingEnemyUnits.length;i++){\n     var u = livingEnemyUnits[i];\n     if (this.canKill(game,u,unitX)){\n       mdu.push(u);\n     }\n   }\n   return mdu;\n   //return iterable(livingEnemyUnits).filter(function (u) {\n  //    return this.canKill(game,u,unitX);\n   //});\n },\n // devuelve las unidades enemigas que pueden atacar a la unitX\n dangerousUnits: function dangerousUnits(game,player,unitX){\n   var livingEnemyUnits = this.livingEnemyUnits(game,player),\n     du = [];\n    for (var i=0;i<livingEnemyUnits.length;i++){\n      var eu = livingEnemyUnits[i];\n      if (this.canShoot_(game,eu,unitX,true)||this.canAssault(game,eu,unitX)){\n        du.push(eu);\n      }\n    }\n    return du;\n   //return iterable(livingEnemyUnits).filter(function (eu) {\n     //return this.canShoot_(game,eu,unitX,true)||this.canAssault(game,eu,unitX);\n    //});\n },\n //devuelve verdadero si las unidades enemigas no pueden matar a unit en este turno\n canBeKilled: function canBeKilled(game,player,unit){\n   //[playerArmy, playerUnits, enemyArmy, enemyUnits]\n   var enemyUnits = this.armiesAndUnits(game,player)[3];\n   for (var i = 0; i < enemyUnits.length; i++) {\n     if (this.canKill(game,enemyUnits[i],unit)){\n       return true;\n     }\n   }\n   return false;\n },\n // devuelve verdadero si la unidad atacante puede llegar a eliminar a la defensora\n canKill: function canKill(game,attacker,target){\n   if (!attacker.isDead() && attacker.isEnabled && !target.isDead()){\n     if (this.canKillShooting(game,attacker,target) || this.canKillAssaulting(game,attacker,target)){\n       return true;\n     }\n   }\n   return false;\n },\n // devuelve verdadero si la unidad que dispara puede llegar a eliminar a la defensora\n canKillShooting: function canKillShooting(game,shooter,target){\n   if (!shooter.isDead() && !target.isDead() && shooter.isEnabled && this.bestAttackResultShooting(game,shooter,target)>=100){\n     return true;\n   }\n   return false;\n },\n // devuelve verdadero si la unidad que asalta puede llegar a eliminar a la defensora\n canKillAssaulting: function canKillAssaulting(game,assaulter,target){\n   if (!assaulter.isDead() && !target.isDead() && assaulter.isEnabled && this.bestAttackResultAssaulting(game,assaulter,target)>=100){\n     return true;\n   }\n   return false;\n },\n // devuelve un porcentaje de destruccion de la unidad defensora tras un ataque de la unidad atacante\n // devuelve el mejor porcentaje posible\n bestAttackResult: function bestAttackResult(game,attacker,target){\n   if (!attacker.isDead() && attacker.isEnabled && !target.isDead()){\n     var barShooting = this.bestAttackResultShooting(game,attacker,target);\n     var barAssaulting = this.bestAttackResultAssaulting(game,attacker,target);\n     var bestAttackResult = Math.max(barShooting, barAssaulting);\n     return bestAttackResult;\n   }\n   return 0;\n },\n // devuelve un porcentaje de destruccion de la unidad defensora tras un disparo de la unidad atacante\n // donde el mejor porcentaje posible: cada ataque supera las tiradas de dados, y el defensor falla los bloqueos\n bestAttackResultShooting: function bestAttackResultShooting(game,unitX,unitY){\n   if (!unitX.isDead() && unitX.isEnabled && !unitY.isDead()){\n     var distance = game.terrain.distance(unitX.position, unitY.position);\n     var livingModels = unitX.livingModels();\n     var attackCount = 0;\n   livingModels.forEach(function (model) {\n       model.equipments.forEach(function (eq) {\n         if (eq.range >= distance) {\n           attackCount += eq.attacks;\n         }\n       });\n     });\n     var unitYModelsAlive = unitY.livingModels().length;\n     var bestAttackResult = attackCount*100/unitYModelsAlive;\n     if (bestAttackResult > 100){\n       bestAttackResult = 100;\n     }\n     return bestAttackResult;\n   }\n   return 0;\n },\n //devuelve true si el assaulter puede asaltar al target\ncanAssault: function canAssault(game,assaulter,target){\n  if (!assaulter.isDead() && assaulter.isEnabled && !target.isDead()){\n    if (game.terrain.canShoot(assaulter,target) <= 12){\n      return true;\n    }\n  }\n  return false;\n},\n // devuelve un porcentaje de destruccion de la unidad defensora tras un asalto de la unidad atacante\n // donde el mejor porcentaje posible: cada ataque supera las tiradas de dados, y el defensor falla los bloqueos\n bestAttackResultAssaulting: function bestAttackResultAssaulting(game,unitX,unitY){\n   if (!unitX.isDead() && unitX.isEnabled && !unitY.isDead()){\n     if (this.canAssault(game,unitX,unitY)){\n       var attackCount = 0;\n       var livingModels = unitX.livingModels();\n       livingModels.forEach(function (model) {\n         model.equipments.forEach(function (eq) {\n           if (eq.range === 0) {\n             attackCount += eq.attacks;\n           }\n         });\n       });\n       var unitYModelsAlive = unitY.livingModels().length;\n       var bestAttackResult = attackCount*100/unitYModelsAlive;\n       if (bestAttackResult > 100){\n         bestAttackResult = 100;\n       }\n       return bestAttackResult;\n     }\n   }\n   return 0;\n },\n\n // devuelve una lista de las unidades enemigas que aun estan vivas\n livingEnemyUnits: function livingEnemyUnits(game, player){\n   //[playerArmy, playerUnits, enemyArmy, enemyUnits]\n   var enemyArmy = this.armiesAndUnits(game,player)[2];\n   return enemyArmy.livingUnits();\n },\n // devuelve un array que facilita los datos: playerArmy, playerUnits, enemyArmy, enemyUnits\n armiesAndUnits: function armiesAndUnits(game, player){\n   var playerArmy = game.armies[player];\n   var playerUnits = playerArmy.units;\n   var enemy = game.opponent(player);\n   var enemyArmy = game.armies[enemy];\n   var enemyUnits  = enemyArmy.units;\n   return [playerArmy, playerUnits, enemyArmy, enemyUnits];\n },\n  // ## Rules /////////////////////////////////////////////////////////////////\n\n //si puede escaparse que se escape.\n rule_100: playerRule(100, function rule_100(game, player){\n   var possibleUnits = this.playerPossibleUnits;\n   for (var i = 0; i < possibleUnits.length; i++) {\n     var unitX = possibleUnits[i];\n     if (this.canScape(game,player,unitX)){\n         //console.log(\"rule_100. scape\");\n         return this.scape(game,player,unitX);\n     }\n   }\n   return null;\n }),\n\n//si puede disparar que dispare\n rule_2: playerRule(2, function rule_2(game, player){\n   var possibleUnits = this.playerPossibleUnits;\n   for (var i = 0; i < possibleUnits.length; i++) {\n     var unitX = possibleUnits[i];\n     var enemyShootableUnits = this.enemyShootableUnits(game, player, unitX);\n     for (var j = 0; j < enemyShootableUnits.length; j++) {\n       var unitY = enemyShootableUnits[j];\n       //console.log(\"rule_2. shoot\");\n       return this.shoot(unitX,unitY);\n     }\n   }\n   return null;\n }),\n // si no puede asaltar entonces se movera\n rule_1: playerRule(1, function rule_1(game, player){\n   //var enemyUnits = this.livingEnemyUnits(game, player),\n   var possibleUnits = this.playerPossibleUnits;\n   for (var i = 0; i < possibleUnits.length; i++) {\n     var unitX = possibleUnits[i];\n     var moveActions = unitX.getMoveActions(game);\n     var return_move = this.move(unitX,moveActions[Math.floor(Math.random()*moveActions.length)]);\n     //console.log(\"rule_1. move\");\n     return return_move;\n   }\n   return null;\n })\n\n}); // declare BasicRulePlayer_scape_then_shoot\n","exports.Renderer = declare({\n\tconstructor: function Renderer(canvas) {\n\t\tcanvas = this.canvas = canvas || document.getElementById('wargame-canvas');\n\t\tvar ctx = this.ctx = canvas.getContext('2d');\n\t\tctx.fillStyle = 'white';\n\t},\n\n\trenderScope: function renderScope(width, height, block) {\n\t\tvar canvas = this.canvas,\n\t\t\tctx = this.ctx;\n\t\tctx.save();\n\t\tctx.scale(canvas.width / width, canvas.height / height);\n\t\ttry {\n\t\t\tblock.call(this, ctx);\n\t\t} finally {\n\t\t\tctx.restore();\n\t\t}\n\t},\n\n\trender: function render(wargame) {\n\t\tvar terrain = wargame.terrain;\n\t\tthis.renderScope(terrain.width, terrain.height, function (ctx) {\n\t\t\tctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n\t\t\tfor (var x = 0, width = terrain.width; x < width; x++) {\n\t\t\t\tfor (var y = 0, height = terrain.height; y < height; y++) {\n\t\t\t\t\tif (!terrain.isPassable([x, y])) {\n\t\t\t\t\t\tthis.drawSquare(x, y, 1, 1, \"black\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.drawSquare(x, y, 1, 1, \"#CCCCCC\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tvar renderer = this,\n\t\t\t\tarmies = wargame.armies;\n\t\t\tctx.strokeStyle = 'black';\n\t\t\tctx.font = \"1px Arial\";\n\t\t\tfor (var team in armies) {\n\t\t\t\tarmies[team].units.forEach(function (unit) {\n\t\t\t\t\tif (!unit.isDead()){\n\t\t\t\t\t\trenderer.drawSquare(unit.position[0], unit.position[1], 1, 1, unit.army.player);\n\t\t\t\t\t\tctx.fillStyle = 'black';\n\t\t\t\t\t\tctx.fillText(unit.id, unit.position[0], unit.position[1]);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t},\n\trenderPath: function renderPath(wargame,path,color) {\n\t\tvar terrain = wargame.terrain;\n\t\tthis.renderScope(terrain.width, terrain.height, function (ctx) {\n\t\t\tctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n\t\t\tfor (var x = 0, width = terrain.width; x < width; x++) {\n\t\t\t\tfor (var y = 0, height = terrain.height; y < height; y++) {\n\t\t\t\t\tif (!terrain.isPassable([x, y])) {\n\t\t\t\t\t\tthis.drawSquare(x, y, 1, 1, \"black\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.drawSquare(x, y, 1, 1, \"#CCCCCC\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tvar renderer = this,\n\t\t\t\tarmies = wargame.armies;\n\t\t\tctx.strokeStyle = 'black';\n\t\t\tctx.font = \"1px Arial\";\n\t\t\tfor (var team in armies) {\n\t\t\t\tarmies[team].units.forEach(function (unit) {\n\t\t\t\t\tif (!unit.isDead()){\n\t\t\t\t\t\trenderer.drawSquare(unit.position[0], unit.position[1], 1, 1, unit.army.player);\n\t\t\t\t\t\tctx.fillStyle = 'black';\n\t\t\t\t\t\tctx.fillText(unit.id, unit.position[0], unit.position[1]);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t\tfor (var move in path) {\n\t\t\t\n\t\t\t\trenderer.drawSquare(path[move].x, path[move].y, 1, 1, color || 'red');\n\t\t\t\t\n\t\t\t}\n\t\t});\n\t},\n\n\trenderSight: function renderSight(wargame, unit) {\n\t\tunit = unit || wargame.__activeUnit__;\n\t\tif (unit) {\n\t\t\tvar terrain = wargame.terrain;\n\t\t\tthis.renderScope(terrain.width, terrain.height, function (ctx) {\n\t\t\t\tvar range = unit.maxRange(),\n\t\t\t\t \tsight = terrain.areaOfSight(unit, range),\n\t\t\t\t\talpha, pos;\n\t\t\t\tfor (var p in sight) {\n\t\t\t\t\talpha = (1 - sight[p] / range) * 0.8 + 0.2;\n\t\t\t\t\tpos = p.split(',');\n\t\t\t\t\tthis.drawSquare(+pos[0], +pos[1], 1, 1, 'rgba(255,255,0,'+ alpha +')');\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t},\n\trenderMoves : function renderMoves(wargame,moves){\n\t\t\n\t\t\t\tvar renderer = this,\n\t\t\t\t\tcanvas = this.canvas,\n\t\t\t\t\tctx = this.ctx,\n\t\t\t\t\tterrain = wargame.terrain,\n\t\t\t\t\tworld = terrain.world;\n\t\t\t\tthis.render(wargame);\n\t\t\t\tctx.save();\n\t\t\t\tctx.scale(canvas.width / terrain.WorldWidth, canvas.height / terrain.WorldHeight);\n\t\t\n\t\t\t\tfor (var army in moves){\n\t\t\t\t\tmoves[army].forEach(function (move){\n\t\t\t\t\t\tif (move.constructor==MoveAction){\n\t\t\t\t\t\t\tctx.save();\n\t\t\t\t\t\t\tctx.fillStyle = '#32CD32';\n\t\t\t\t\t\t\tctx.beginPath();\n\t\t\t\t\t\t\tctx.arc(move.position[0], move.position[1],1, 0, 2 * Math.PI);\n\t\t\t\t\t\t\tctx.fill();\n\t\t\t\t\t\t\tctx.restore();\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tctx.restore();\n\t\t},\n\n\tdrawSquare: function drawSquare(x, y, height, width, color){\n\t\tvar ctx = this.ctx;\n\t\tctx.fillStyle = color;\n\t\tctx.fillRect(x, y, 1, 1);\n\t},\n\trenderInfluence: function renderInfluence(wargame,grid){\n\t\t\n\t\tvar terrain = wargame.terrain;\n\t\tthis.renderScope(terrain.width, terrain.height, function (ctx) {\n\t\t\tvar w=grid.length,\n\t\t\th=grid[0].length,\n\t\t\trenderer = this,\n\t\t\tcanvas = this.canvas,\n\t\t\tterrain = wargame.terrain,\n\t\t\tworld = terrain.world,\n\t\t\tvalue,\n\t\t\tmin=Number.POSITIVE_INFINITY,\n\t\t\tmax=Number.NEGATIVE_INFINITY,\n\t\t\tabsMax,\n\t\t\topacity,x,y,\n\t\t\twidth = terrain.width,\n\t\t\theight = terrain.height;\n\t\t\tctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n\t\t\tfor ( x = 0, width; x < width; x++) {\n\t\t\t\tfor ( y = 0, height; y < height; y++) {\n\t\t\t\t\tif (!terrain.isPassable([x, y])) {\n\t\t\t\t\t\tthis.drawSquare(x, y, 1, 1, \"black\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.drawSquare(x, y, 1, 1, \"#CCCCCC\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor ( x=0; x<w;x++){\n\t\t\t\tfor ( y=0; y<h;y++){\n\t\t\t\t\tif (!isNaN(grid[x][y])){\n\t\t\t\t\t\tmax= Math.max(max,grid[x][y]);\n\t\t\t\t\t\tmin= Math.min(min,grid[x][y]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\tabsMax= Math.max(max,Math.abs(min));\n\t\t\tfor ( x=0; x<w;x++){\n\t\t\t\tfor ( y=0; y<h;y++){\n\t\t\t\t\tvalue=grid[x][y];\n\t\t\t\t\tif (value ==\"t\" ){\n\t\t\t\t\t\tthis.drawSquare(x,y,1,1,\"black\");\n\t\t\t\t\t}\n\t\t\t\t\telse if (value >0 ){\n\t\t\t\t\t\topacity = value / absMax;\n\t\t\t\t\t\tthis.drawSquare(x,y,1,1,\"rgba(255,0,0,\"+opacity+\")\" );\n\t\t\t\t\t}\n\t\t\t\t\telse if (value <0 ){\n\t\t\t\t\t\topacity = -value / absMax;\n\t\t\t\t\t\tthis.drawSquare(x,y,1,1,\"rgba(0,0,255,\"+opacity+\")\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t},\n\n////////////////////////////////////////////////////////////////////////////////////////////////////\n/*\n\trender2: function render2(wargame) {\n\t\tvar renderer = this,\n\t\t\tcanvas = this.canvas,\n\t\t\tctx = this.ctx,\n\t\t\tterrain = wargame.terrain,\n\t\t\tworld = terrain.world;\n\t\tterrain.addArmiesToWorld(wargame);\n\t\tctx.save();\n\t\tctx.scale(canvas.width / terrain.WorldWidth, canvas.height / terrain.WorldHeight);\n\t\tctx.clearRect(0, 0, canvas.width, canvas.height);\n\t\tworld.bodies.forEach(function (body) {\n\t\t\tswitch (body.shapes[0].type){\n\t\t\t\tcase 1:\n\t\t\t\t\trenderer.drawCircle(body);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 8:\n\t\t\t\t\trenderer.drawBox(body);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t});\n\t\tctx.restore();\n\t},\n\trenderMoves : function renderrenderMoves(wargame,moves){\n\n\t\tvar renderer = this,\n\t\t\tcanvas = this.canvas,\n\t\t\tctx = this.ctx,\n\t\t\tterrain = wargame.terrain,\n\t\t\tworld = terrain.world;\n\t\tthis.renderGrid(wargame.terrain.terrain);\n\t\tctx.save();\n\t\tctx.scale(canvas.width / terrain.WorldWidth, canvas.height / terrain.WorldHeight);\n\n\t\tfor (var army in moves){\n\t\t\tmoves[army].forEach(function (move){\n\t\t\t\tif (move.constructor==MoveAction){\n\t\t\t\t\tctx.save();\n\t\t\t\t\tctx.fillStyle = '#32CD32';\n\t\t\t\t\tctx.beginPath();\n\t\t\t\t\tctx.arc(move.position[0], move.position[1],1, 0, 2 * Math.PI);\n\t\t\t\t\tctx.fill();\n\t\t\t\t\tctx.restore();\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\tctx.restore();\n\t},\n\tdrawCircle: function drawCircle(body) {\n\t\tvar ctx = this.ctx;\n\t\tctx.beginPath();\n\t\tvar x = body.position[0],\n\t\t\ty = body.position[1];\n\t\tctx.save();\n\t\tctx.translate(x, y);\n\t\tctx.rotate(body.interpolatedAngle);//FIXME\n\t\tctx.fillStyle = {\n\t\t\tBlue: 'blue', Red: 'red', Terrain: 'black'\n\t\t}[body.team];\n\t\tctx.arc(0, 0, body.shapes[0].radius, 0, 2 * Math.PI);\n\t\tctx.fill();\n\t\tctx.restore();\n\t},\n\tdrawBox:function drawBox(boxBody){\n\t\tvar renderer = this,\n\t\t\tcanvas = this.canvas,\n\t\t\tctx = this.ctx,\n\t\t\tboxShape=boxBody.shapes[0],\n\t\t\tx = boxBody.position[0],\n\t\t\ty = boxBody.position[1];\n\t\t\t\tctx.save();\n\t\t\tctx.beginPath();\n\n\t\t//\tctx.translate(x, y);        // Translate to the center of the box\n\t\t\tctx.rotate(boxBody.interpolatedAngle);  // Rotate to the box body frame\n\t\t\tctx.rect(x - boxShape.width/2, y - boxShape.height/2, boxShape.width, boxShape.height);\n\t\t\tctx.stroke();\n\t\t\tctx.fill();\n\t\t\tctx.restore();\n\t},\n\n\trenderGrid:function renderGrid(grid){\n\t\tvar canvas = this.canvas,\n\t\t\tctx = this.ctx,x,y,value,w=grid.length,\n\t\t\th=grid[0].length;\n\t\t\t\t\tctx.save();\n\n\t\tctx.scale(canvas.width / 48, canvas.height / 48);\n\t\tctx.clearRect(0, 0, canvas.width, canvas.height);\n\t\tctx.strokeStyle = 'black';\n\t\tctx.fillStyle = 'black';\n\t\tctx.font = \"1px Arial\";\n\n\t\tfor ( x=0; x<w;x++){\n\t\t\tfor ( y=0; y<h;y++){\n\t\t\t\tvalue=grid[x][y];\n\t\t\t\tif (value ==\"t\"){\n\t\t\t\t\tthis.drawSquare(x,y,1,1,\"black\");\n\t\t\t\t}else if(value.army){\n\t\t\t\t\tthis.drawSquare(value.position[0],value.position[1],1,1,value.army.player);\n\n\t\t\t\t\tctx.fillStyle = 'black';\n\t\t\t\t\tctx.font = \"2px Arial\";\n\t\t\t\t\tctx.fillText(value.id,value.position[0],value.position[1]);\n\t\t\t\t\tctx.font = \"1px Arial\";\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\tctx.fillText(value,x-0.5, y+0.5);\n\t\t\t\t}\n\n\t\t\t}\n\t\t}\n\t\tctx.restore();\n\n\t},\n\trenderGridSight:function renderGridSight(grid){\n\t\tvar canvas = this.canvas,\n\t\t\tctx = this.ctx,x,y,value;\n\t\t\t\t\tctx.save();\n\n\t\tctx.scale(canvas.width / 48, canvas.height / 48);\n\t\tctx.strokeStyle = 'black';\n\t\tctx.fillStyle = 'black';\n\t\tctx.font = \"1px Arial\";\n\n\t\tfor (var a in grid){\n\t\t\t x=a.split(\",\")[0];\n\t\t\t y=a.split(\",\")[1];\n\t\t\tthis.drawSquare(x,y,1,1, \"rgba(0, 255, 0, 0.7)\");\n\n\t\t}\n\t\tctx.restore();\n\n\t},\n\t*/\n}); //declare Renderer.\n\n/*\n\n\n\n\n// Interpolates two [r,g,b] colors and returns an [r,g,b] of the result\n// Taken from the awesome ROT.js roguelike dev library at\n// https://github.com/ondras/rot.js\nvar _interpolateColor = function(color1, color2, factor) {\n  if (arguments.length < 3) { factor = 0.5; }\n  var result = color1.slice();\n  for (var i=0;i<3;i++) {\n    result[i] = Math.round(result[i] + factor*(color2[i]-color1[i]));\n  }\n  return result;\n};\n*/\n","\n\n/** # AbstractedWargame\n\nAn astracted wargame provides a strategic level by hiding part of the complexity of the wargame. The\nplayers' actions are simplified, and the number of plies is reduced. One ply of the abstracted\nwargame may include many plies of the concrete game.\n */\nvar StrategicAttackAction = exports.StrategicAttackAction = declare(GameAction, {\n\tconstructor: function StrategicAttackAction(unitId, targetId) {\n\t\tthis.unitId = unitId;\n\t\tthis.targetId = targetId;\n\t},\n\n\texecuteMovement: function executeMovement(game, moves, update) {\n\t\tvar activePlayer = game.activePlayer(),\n\t\t\tattacker = this.unitById(game, this.unitId),\n\t\t\ttarget = this.unitById(game, this.targetId),\n\t\t\tcanShootThisTurn=moves.shootPositions,\n\t\t\tcanAssaultThisTurn =moves.assaultPositions,\n\t\t\tcanMoveThisTurn =moves.movePositions;\n\n\t\tif (canShootThisTurn.length > 0) {\n\t\t\tcanShootThisTurn.sort(function (m1, m2) {//Sort por influencia tambien\n\t\t\t\treturn m2.influence - m1.influence;\n\t\t\t});\n\t\t\t\n\t\t\tgame=game.next(obj(activePlayer,new MoveAction(attacker.id, canShootThisTurn[0].position,false)), null, update);\n\t\t\tgame=game.next(obj(activePlayer, new ShootAction(attacker.id, target.id)));\n\t\t\tif (game.isContingent) {\n\t\t\t\tgame = game.randomNext();\n\t\t\t}\t\n\t\t}else {\n\t\t\tgame=game.next(obj(activePlayer, new MoveAction(attacker.id, canMoveThisTurn[canMoveThisTurn.length-1].position,true)), null, update);\n\t\t}\n\t\tif (game.__activeUnit__ && g.__activeUnit__.id === attack.unitId) {\n\t\t\tgame = game.next(obj(activePlayer, new EndTurnAction(attacker.id)), null, update);\n\t\t}\n\t\treturn game;\n\t},\n\tsynchronizeMetagame: function synchronizeMetagame() {\n\t\tthis.terrain.resetTerrain(this);\n\t},\n\n\n\tstrategicPositions:function strategicPositions(abstractedGame,influenceMap){\n\t\t\n\t\tvar g = abstractedGame,\n\t\t\tattacker = this.unitById(g, this.unitId),\n\t\t\ttarget = this.unitById(g, this.targetId),\n\t\t\tmoves,\n\t\t\trole=g.activePlayer(),\n\t\t\tposibleActions={movePositions:[],shootPositions:[],assaultPositions:[]};\n\t\tif (influenceMap){\n\t\t\tmoves= g.terrain.canReachAStarInf({target:target,attacker:attacker,influenceMap:influenceMap,role:role});\n\t\t\t\n\t\t\tRENDERER.renderInfluence(g,influenceMap);\n\t\t\t//RENDERER.renderPath(g,moves);\n\n\t\t\t//moves= g.terrain.canReachAStarInf({target:target,attacker:attacker,exitCondition,influenceMap:influenceMap});\n\t\t}else{\n\t\t\tmoves =g.terrain.canReachAStar({target:target,attacker:attacker});\n\t\t}\n\t\tmoves.unshift({x:attacker.position[0],y:attacker.position[1]});\n\t\t\n\t\tfor (var i =0; i<moves.length;i++) {\n\n\n\t\t\tvar pos=moves[i],\n\t\t\t\tcanShootPos= g.terrain.canShootPos([pos.x,pos.y], target.position, this.unitId,this.targetId,attacker.maxRange()),\n\t\t\t\tshootDistance= canShootPos!==Infinity? canShootPos: undefined,\n\t\t\t\tinfluence=this.getInf([pos.x,pos.y],role,influenceMap),\n\t\t\t\tcanShootThisTurn= i<=6 && shootDistance!==undefined,\n\t\t\t\tcanAssaultThisTurn = shootDistance<=2,\n\t\t\t\tcanMoveThisTurn = i <=12;\n\t\t\tif ((target.position[0]==pos.x && target.position[1]==pos.y)){\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (canShootThisTurn){ //CanShootThisTurn\n\t\t\t\tposibleActions.shootPositions.push({position:[pos.x,pos.y],influence:influence,shootDistance:shootDistance});\n\t\t\t}else if (canMoveThisTurn){\n\t\t\t\tposibleActions.movePositions.push({position:[pos.x,pos.y],influence:influence,shootDistance:shootDistance});\t\n\t\t\t}else if (canAssaultThisTurn){\n\t\t\t\tposibleActions.assaultPositions.push({position:[pos.x,pos.y],influence:influence,shootDistance:shootDistance});\t\n\t\t\t}\n\t\t}\n\t\treturn posibleActions;\n\t\t\n\n\t},\n\tgetInf:function getInf(pos,role,grid){\n\t\tvar x=pos[0],\n\t\t\ty=pos[1];\n\t\tif (role==\"Red\")\n\t\t\treturn grid[x][y];\n\t\treturn -grid[x][y];\n\n\t},\n\n\texecute: function execute(abstractedGame, update) {\n\t\tabstractedGame.concreteGame.synchronizeMetagame();\n\t\tvar g = abstractedGame.concreteGame,\n\t\t\tattacker = this.unitById(g, this.unitId),\n\t\t\ttarget = this.unitById(g, this.targetId),\n\t\t\tactivePlayer = g.activePlayer(),\n\t\t\tattack=this,\n\t\t//\tareaOfSight=g.terrain.areaOfSight(target, attacker.maxRange()),\n\t\t\tposibleActions=this.strategicPositions(g,abstractedGame.concreteInfluence);\n\t\t\n\n\t\tif (g.result()){\n\t\t\treturn null;\n\n\t\t}\n\t\t// First activate the abstract action's unit.\n\t\tg = g.next(obj(activePlayer, new ActivateAction(this.unitId)), null, update);\n\t\tvar actions = g.moves()[activePlayer],\n\t\t\tcanShoot = g.terrain.canShoot(attacker, target),\n\t\t\tshots = this.getShots(g, actions);\n\t\tif (!canShoot) {\n\t\t\t//FIXME Do not use generated moves, generate them.\n\t\t\tg = this.executeMovement(g, actions, update);\n\t\t\tif (g.__activeUnit__ && g.__activeUnit__.id === attack.unitId) {\n\t\t\t\tcanShoot = g.terrain.canShoot(shooter, target);\n\t\t\t}\n\t\t}\n\t\tif (canShoot) {\n\t\t\tg = g.next(obj(activePlayer, new ShootAction(attacker.id, target.id)));\n\t\t\tif (g.isContingent) {\n\t\t\t\tg = g.randomNext();\n\t\t\t}\n\t\t}\n\t\tif (g.__activeUnit__ && g.__activeUnit__.id === attack.unitId) {\n\t\t\tg = g.next(obj(activePlayer, new EndTurnAction(attacker.id)), null, update);\n\t\t}\n\t\traiseIf(!(g instanceof Wargame), \"Executing action \", this,\n\t\t\t\" did not yield a Wargame instance!\");\n\t\tabstractedGame.concreteGame = g;\n\t\treturn abstractedGame;\n\t},\n\n\t'static __SERMAT__': {\n\t\tidentifier: 'StrategicAttackAction',\n\t\tserializer: function serialize_StrategicAttackAction(obj) {\n\t\t\treturn [obj.unitId, obj.targetId];\n\t\t}\n\t},\n\n\ttoString: function toString() {\n\t\treturn Sermat.ser(this);\n\t}\n}); // declare StrategicAttackAction\n\n/**TODO\n*/\nvar AbstractedWargame = exports.AbstractedWargame = declare(ludorum.Game, {\n\n\t/**\n\t*/\n\tconstructor: function AbstractedWargame(wargame) {\n\t\traiseIf(!(wargame instanceof Wargame), \"Invalid concrete wargame \", wargame, \"!\");\n\t\tthis.players = wargame.players;\n\t\tludorum.Game.call(this, wargame.activePlayer());\n\t\tthis.concreteGame = wargame;\n\t\tthis.influenceMap =new InfluenceMap(wargame);\n\t\tthis.concreteInfluence=this.influenceMap.update(wargame);\n\n\t},\n\n\t/**\n\t*/\n\tresult: function result() {\n\t\treturn this.concreteGame.result();\n\t},\n\n\t/**\n\t*/\n\tmoves: function moves() {\n\t\tif (this.result()) {\n\t\t\treturn null;\n\t\t}\n\t\tvar game = this.concreteGame,\n\t\t\tactivePlayer = this.activePlayer(),\n\t\t\tr = {};\n\t\tr[activePlayer] = Iterable.product(\n\t\t\tgame.armies[activePlayer].units.filter(function (unit) {\n\t\t\t\treturn !unit.isDead(game) && unit.isEnabled;\n\t\t\t}),\n\t\t\tgame.armies[game.opponent()].units.filter(function (unit) {\n\t\t\t\treturn !unit.isDead();\n\t\t\t})\n\t\t).mapApply(function (attacker, target) {\n\t\t\treturn new StrategicAttackAction(attacker.id, target.id);\n\t\t}).toArray();\n\t\treturn r;\n\t},\n\n\t/**\n\t*/\n\tnext: function next(actions, haps, update) {\n\t\tvar nextGame = update ? this : this.clone(),\n\t\t\tactivePlayer = this.activePlayer(),\n\t\t\taction = actions[activePlayer];\n\t\tif (action instanceof StrategicAttackAction) {\n\t\t\taction.execute(nextGame, update); //FIXME Haps.\n\t\t} else {\n\t\t\tnextGame.concreteGame = nextGame.concreteGame.next(actions, haps, true);\n\t\t\tif (nextGame.concreteGame.isContingent) {\n\t\t\t\tnextGame.concreteGame = nextGame.concreteGame.randomNext();\n\t\t\t}\n\t\t}\n\t\tnextGame.activePlayers = nextGame.concreteGame.activePlayers;\n\t\tnextGame.concreteInfluence=nextGame.influenceMap.update(nextGame.concreteGame,1);\n\t\treturn nextGame;\n\t},\n\n\tclone: function clone() { \n\t\treturn new this.constructor(this.concreteGame.clone()); \n\t},\n\n\t'static __SERMAT__': {\n\t\tidentifier: 'AbstractedWargame',\n\t\tserializer: function serialize_AbstractedWargame(obj) {\n\t\t\treturn [obj.concreteGame];\n\t\t}\n\t}\n}); // declare AbstractedWargame\n\n/** Random player to use with AbstractedWargame using the concrete game actions. \n*/\nvar ConcreteRandomPlayer = exports.ConcreteRandomPlayer = declare(ludorum.players.RandomPlayer, {\n\tdecision: function decision(game, player) {\n\t\tif (game instanceof StrategicAttackAction) {\n\t\t\tgame = game.concreteGame;\n\t\t}\n\t\treturn ludorum.players.RandomPlayer.prototype.decision.call(this, game, player);\n\t}\n});","\n\n\n\n/**\n \nvar graph = new LW.Graph([\n\t\t[0,0,0,1],\n\t\t[1,0,0,1],\n\t\t[1,1,0,0]\n\t]);\n\tvar start = graph.grid[0][0];\n\tvar end = graph.grid[1][2];\n\tvar result = graph.astar.search(graph, start, end);\n  \n */\n\nvar astar = exports.astar = declare({\n  pathTo:function pathTo(node) {\n    var curr = node,\n        path = [];\n    while (curr.parent) {\n      path.unshift(curr);\n      curr = curr.parent;\n    }\n    return path;\n  },\n  getHeap: function getHeap() {\n    return new BinaryHeap(function(node) {\n      return node.f;\n    });\n  },\n  /**\n  * Perform an A* Search on a graph given a start and end node.\n  * @param {Graph} graph\n  * @param {GridNode} start\n  * @param {GridNode} end\n  * @param {Object} [options]\n  * @param {bool} [options.closest] Specifies whether to return the\n             path to the closest node if the target is unreachable.\n  * @param {Function} [options.heuristic] Heuristic function (see\n  *          astar.heuristics).\n  */\n  search: function(graph, start, end, options) {\n    graph.cleanDirty();\n    options = options || {};\n    \n    var heuristic = options.heuristic || this.heuristics.manhattan,\n        closest = options.closest || false,\n        openHeap = this.getHeap(),\n        exitCondition=options.exitCondition,\n        closestNode = start; // set the start node to be the closest if required\n\n    start.h = heuristic(start, end,options.influenceMap,options.role);\n    graph.markDirty(start);\n\n    openHeap.push(start);\n\n    while (openHeap.size() > 0) {\n\n      // Grab the lowest f(x) to process next.  Heap keeps this sorted for us.\n      var currentNode = openHeap.pop();\n\n      // End case -- result has been found, return the traced path.\n      if (currentNode === end  ||  (exitCondition && exitCondition[currentNode.x+\",\"+currentNode.y])) {\n        return this.pathTo(currentNode);\n      }\n      // Normal case -- move currentNode from open to closed, process each of its neighbors.\n      currentNode.closed = true;\n\n      // Find all neighbors for the current node.\n      var neighbors = graph.neighbors(currentNode);\n\n      for (var i = 0, il = neighbors.length; i < il; ++i) {\n        var neighbor = neighbors[i];\n\n        if (neighbor.closed || neighbor.isWall()) {\n          // Not a valid node to process, skip to next neighbor.\n          continue;\n        }\n\n        // The g score is the shortest distance from start to current node.\n        // We need to check if the path we have arrived at this neighbor is the shortest one we have seen yet.\n        var gScore = currentNode.g + neighbor.getCost(currentNode);\n        var beenVisited = neighbor.visited;\n\n        if (!beenVisited || gScore < neighbor.g) {\n\n          // Found an optimal (so far) path to this node.  Take score for node to see how good it is.\n          neighbor.visited = true;\n          neighbor.parent = currentNode;\n          neighbor.h = neighbor.h || heuristic(neighbor, end,options.influenceMap);\n          neighbor.g = gScore;\n          neighbor.f = neighbor.g + neighbor.h;\n          graph.markDirty(neighbor);\n          if (closest) {\n            // If the neighbour is closer than the current closestNode or if it's equally close but has\n            // a cheaper path than the current closest node then it becomes the closest node\n            if (neighbor.h < closestNode.h || (neighbor.h === closestNode.h && neighbor.g < closestNode.g)) {\n              closestNode = neighbor;\n            }\n          }\n\n          if (!beenVisited) {\n            // Pushing to heap will put it in proper place based on the 'f' value.\n            openHeap.push(neighbor);\n          } else {\n            // Already seen the node, but since it has been rescored we need to reorder it in the heap\n            openHeap.rescoreElement(neighbor);\n          }\n        }\n      }\n    }\n\n    if (closest) {\n      return this.pathTo(closestNode);\n    }\n\n    // No result was found - empty array signifies failure to find path.\n    return [];\n  },\n  // See list of heuristics: http://theory.stanford.edu/~amitp/GameProgramming/Heuristics.html\n  heuristics: {\n    manhattan: function(pos0, pos1) {\n      var d1 = Math.abs(pos1.x - pos0.x);\n      var d2 = Math.abs(pos1.y - pos0.y);\n      return d1 + d2;\n    },\n    diagonal: function(pos0, pos1) {\n      var D = 1;\n      var D2 = Math.sqrt(2);\n      var d1 = Math.abs(pos1.x - pos0.x);\n      var d2 = Math.abs(pos1.y - pos0.y);\n      return (D * (d1 + d2)) + ((D2 - (2 * D)) * Math.min(d1, d2));\n    }\n  },\n  cleanNode: function(node) {\n    node.f = 0;\n    node.g = 0;\n    node.h = 0;\n    node.visited = false;\n    node.closed = false;\n    node.parent = null;\n  }\n});\n\n\nvar Graph = exports.Graph = declare({\n\n  constructor: function Graph(terrain, options) {\n    options = options || {};\n    this.nodes = [];\n    this.diagonal = !!options.diagonal;\n    this.grid = [];\n    this.astar=new astar();\n    var node,x,y,valueOfNode,row,check1,check2;\n    for (x = 0; x < terrain.width; x++) {\n      this.grid[x] = [];\n      for (y = 0; y < terrain.height; y++) {\n          check1= options.start[0] ==x && options.start[1] ==y;\n          check1= options.end[0] ==x && options.end[1] ==y;\n          valueOfNode=(terrain.isPassable([x,y], true) || check1 || check2) ===true?1: 0;\n          node = new GridNode(x, y, valueOfNode);\n          this.grid[x][y] = node;\n          this.nodes.push(node);\n      }\n    }\n    this.init();\n  },\n  init : function init() {\n    this.dirtyNodes = [];\n    for (var i = 0; i < this.nodes.length; i++) {\n      this.astar.cleanNode(this.nodes[i]);\n    }\n  },\n  cleanDirty :  function cleanDirty() {\n    for (var i = 0; i < this.dirtyNodes.length; i++) {\n      this.astar.cleanNode(this.dirtyNodes[i]);\n    }\n    this.dirtyNodes = [];\n  },\n  markDirty: function markDirty(node) {\n    this.dirtyNodes.push(node);\n  },\n  neighbors : function neighbors (node) {\n    var ret = [];\n    var x = node.x;\n    var y = node.y;\n    var grid = this.grid;\n\n    // West\n    if (grid[x - 1] && grid[x - 1][y]) {\n      ret.push(grid[x - 1][y]);\n    }\n\n    // East\n    if (grid[x + 1] && grid[x + 1][y]) {\n      ret.push(grid[x + 1][y]);\n    }\n\n    // South\n    if (grid[x] && grid[x][y - 1]) {\n      ret.push(grid[x][y - 1]);\n    }\n\n    // North\n    if (grid[x] && grid[x][y + 1]) {\n      ret.push(grid[x][y + 1]);\n    }\n\n    if (this.diagonal) {\n      // Southwest\n      if (grid[x - 1] && grid[x - 1][y - 1]) {\n        ret.push(grid[x - 1][y - 1]);\n      }\n\n      // Southeast\n      if (grid[x + 1] && grid[x + 1][y - 1]) {\n        ret.push(grid[x + 1][y - 1]);\n      }\n\n      // Northwest\n      if (grid[x - 1] && grid[x - 1][y + 1]) {\n        ret.push(grid[x - 1][y + 1]);\n      }\n\n      // Northeast\n      if (grid[x + 1] && grid[x + 1][y + 1]) {\n        ret.push(grid[x + 1][y + 1]);\n      }\n    }\n\n    return ret;\n  },\n  toString : function toString() {\n    var graphString = [];\n    var nodes = this.grid;\n    for (var x = 0; x < nodes.length; x++) {\n      var rowDebug = [];\n      var row = nodes[x];\n      for (var y = 0; y < row.length; y++) {\n        rowDebug.push(row[y].weight);\n      }\n      graphString.push(rowDebug.join(\" \"));\n    }\n    return graphString.join(\"\\n\");\n  },\n});\n\n\nvar GridNode = exports.GridNode = declare({\n  constructor: function GridNode(x, y, weight) {\n    this.x = x;\n    this.y = y;\n    this.weight = weight;\n  },\n  toString : function toString() {\n    return \"[\" + this.x + \" \" + this.y + \"]\";\n  },\n  getCost : function getCost(fromNeighbor) {\n    // Take diagonal weight into consideration.\n    if (fromNeighbor && fromNeighbor.x != this.x && fromNeighbor.y != this.y) {\n      return this.weight * 1.41421;\n    }\n    return this.weight;\n  },\n  isWall : function isWall() {\n    return this.weight === 0;\n  },\n\n});\n\nvar BinaryHeap = exports.BinaryHeap = declare({\n constructor: function BinaryHeap(scoreFunction)  {\n    this.content = [];\n    this.scoreFunction = scoreFunction;\n  },\n  push: function(element) {\n    // Add the new element to the end of the array.\n    this.content.push(element);\n\n    // Allow it to sink down.\n    this.sinkDown(this.content.length - 1);\n  },\n  pop: function() {\n    // Store the first element so we can return it later.\n    var result = this.content[0];\n    // Get the element at the end of the array.\n    var end = this.content.pop();\n    // If there are any elements left, put the end element at the\n    // start, and let it bubble up.\n    if (this.content.length > 0) {\n      this.content[0] = end;\n      this.bubbleUp(0);\n    }\n    return result;\n  },\n  remove: function(node) {\n    var i = this.content.indexOf(node);\n\n    // When it is found, the process seen in 'pop' is repeated\n    // to fill up the hole.\n    var end = this.content.pop();\n\n    if (i !== this.content.length - 1) {\n      this.content[i] = end;\n\n      if (this.scoreFunction(end) < this.scoreFunction(node)) {\n        this.sinkDown(i);\n      } else {\n        this.bubbleUp(i);\n      }\n    }\n  },\n  size: function() {\n    return this.content.length;\n  },\n  rescoreElement: function(node) {\n    this.sinkDown(this.content.indexOf(node));\n  },\n  sinkDown: function(n) {\n    // Fetch the element that has to be sunk.\n    var element = this.content[n];\n\n    // When at 0, an element can not sink any further.\n    while (n > 0) {\n\n      // Compute the parent element's index, and fetch it.\n      var parentN = ((n + 1) >> 1) - 1;\n      var parent = this.content[parentN];\n      // Swap the elements if the parent is greater.\n      if (this.scoreFunction(element) < this.scoreFunction(parent)) {\n        this.content[parentN] = element;\n        this.content[n] = parent;\n        // Update 'n' to continue at the new position.\n        n = parentN;\n      }\n      // Found a parent that is less, no need to sink any further.\n      else {\n        break;\n      }\n    }\n  },\n  bubbleUp: function(n) {\n    // Look up the target element and its score.\n    var length = this.content.length;\n    var element = this.content[n];\n    var elemScore = this.scoreFunction(element);\n\n    while (true) {\n      // Compute the indices of the child elements.\n      var child2N = (n + 1) << 1;\n      var child1N = child2N - 1;\n      // This is used to store the new position of the element, if any.\n      var swap = null;\n      var child1Score;\n      // If the first child exists (is inside the array)...\n      if (child1N < length) {\n        // Look it up and compute its score.\n        var child1 = this.content[child1N];\n        child1Score = this.scoreFunction(child1);\n\n        // If the score is less than our element's, we need to swap.\n        if (child1Score < elemScore) {\n          swap = child1N;\n        }\n      }\n\n      // Do the same checks for the other child.\n      if (child2N < length) {\n        var child2 = this.content[child2N];\n        var child2Score = this.scoreFunction(child2);\n        if (child2Score < (swap === null ? elemScore : child1Score)) {\n          swap = child2N;\n        }\n      }\n\n      // If the element needs to be moved, swap it, and continue.\n      if (swap !== null) {\n        this.content[n] = this.content[swap];\n        this.content[swap] = element;\n        n = swap;\n      }\n      // Otherwise, we are done.\n      else {\n        break;\n      }\n    }\n  }\n\n});\n\n\n\n\n\n","/** See __prologue__.js\n*/\n\t[ //TODO Add serializable classes.\n\t].forEach(function (type) {\n\t\ttype.__SERMAT__.identifier = exports.__package__ +'.'+ type.__SERMAT__.identifier;\n\t\texports.__SERMAT__.include.push(type);\n\t});\n\tSermat.include(exports);\n\treturn exports;\n}"]}